openapi: 3.0.3
info:
  title: External APIs
  description: >-
    This is a collection of all the endpoints made available to interact with
    Onvo's servers.


    If you use node js, you can use the `@onvo-ai/node` package to consume the
    endpoints.  

    [https://www.npmjs.com/package/@onvo-ai/node](https://www.npmjs.com/package/@onvo-ai/node)


    ---


    SDKs for other languages are coming soon!


    [https://github.com/onvo-ai/sdks](https://github.com/onvo-ai/sdks)
  version: 1.0.0
  contact: {}
servers:
  - url: "{{baseUrl}}"
paths:
  /api/accounts:
    get:
      tags:
        - Accounts
      summary: Get all accounts
      description: Get all accounts
      operationId: getAllAccounts
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 14:14:14 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    avatar_url:
                      type: string
                      example: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                    email:
                      type: string
                      example: info@onvo.ai
                    full_name:
                      type: string
                      example: Demo user
                    id:
                      type: string
                      example: 5899f99d-a449-4bfa-8769-19c097aaf1f5
                    phone_number:
                      type: string
                      example: "8075065108"
                    updated_at:
                      type: string
                      example: "2024-01-17T10:14:12.62603+00:00"
                example:
                  - avatar_url: >-
                      https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                    email: info@onvo.ai
                    full_name: Demo user
                    id: 5899f99d-a449-4bfa-8769-19c097aaf1f5
                    phone_number: "8075065108"
                    updated_at: "2024-01-17T10:14:12.62603+00:00"
                  - avatar_url: >-
                      https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                    email: ronneldavis1996@gmail.com
                    full_name: Ronnel Davis
                    id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                    phone_number: "8075065108"
                    updated_at: "2024-01-17T10:14:12.62603+00:00"
                  - avatar_url: >-
                      https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                    email: mbgashiq@gmail.com
                    full_name: Ashiq Muhammed
                    id: 5899f99d-a449-4bfa-8769-19c097aaf1f7
                    phone_number: "8075065108"
                    updated_at: "2024-01-17T10:14:12.62603+00:00"
                  - avatar_url: >-
                      https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                    email: vrushabh2312@gmail.com
                    full_name: Vrushabh Jambhulkar
                    id: 5899f99d-a449-4bfa-8769-19c097aaf1f8
                    phone_number: "8075065108"
                    updated_at: "2024-01-17T10:14:12.62603+00:00"
              examples:
                Success:
                  value:
                    - avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: info@onvo.ai
                      full_name: Demo user
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f5
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    - avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    - avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: mbgashiq@gmail.com
                      full_name: Ashiq Muhammed
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f7
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    - avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: vrushabh2312@gmail.com
                      full_name: Vrushabh Jambhulkar
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f8
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
  /api/accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Get account by id
      description: Get account by id
      operationId: getAccountById
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 16:20:18 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatar_url:
                    type: string
                    example: >-
                      https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                  email:
                    type: string
                    example: info@onvo.ai
                  full_name:
                    type: string
                    example: Demo user
                  id:
                    type: string
                    example: 5899f99d-a449-4bfa-8769-19c097aaf1f5
                  phone_number:
                    type: string
                    example: "8075065108"
                  updated_at:
                    type: string
                    example: "2024-01-17T10:14:12.62603+00:00"
              examples:
                Success:
                  value:
                    avatar_url: >-
                      https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                    email: info@onvo.ai
                    full_name: Demo user
                    id: 5899f99d-a449-4bfa-8769-19c097aaf1f5
                    phone_number: "8075065108"
                    updated_at: "2024-01-17T10:14:12.62603+00:00"
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5899f99d-a449-4bfa-8769-19c097aaf1f5
  /api/teams:
    get:
      tags:
        - Teams
      summary: Get all teams
      description: >-
        This endpoint retreives all organisations a user has access to. If
        calling with an API key, the endpoint fails as a key is scoped to a
        singular organisation
      operationId: getAllTeams
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Sun, 01 Oct 2023 13:36:45 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      type: string
                      example: "2023-09-26T13:39:00.642448+00:00"
                    email:
                      type: string
                      example: info@onvo.ai
                    id:
                      type: string
                      example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    logo:
                      nullable: true
                      example: null
                    name:
                      type: string
                      example: Onvo Test
                    phone_number:
                      nullable: true
                      example: null
                    stripe_id:
                      type: string
                      example: cus_Oj1JlJbQliLM6W
                example:
                  - created_at: "2023-09-26T13:39:00.642448+00:00"
                    email: info@onvo.ai
                    id: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    logo: null
                    name: Onvo Test
                    phone_number: null
                    stripe_id: cus_Oj1JlJbQliLM6W
              examples:
                Success:
                  value:
                    - created_at: "2023-09-26T13:39:00.642448+00:00"
                      email: info@onvo.ai
                      id: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      logo: null
                      name: Onvo Test
                      phone_number: null
                      stripe_id: cus_Oj1JlJbQliLM6W
  /api/teams/{id}:
    get:
      tags:
        - Teams
      summary: Get team by id
      description: >-
        This endpoint returns the details of a given organisation. When calling
        it with an API key, unless the organisation is the one scoped by the
        key, the request will fail
      operationId: getTeamById
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 16:27:58 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2024-01-17T10:14:12.62603+00:00"
                  email:
                    nullable: true
                    example: null
                  id:
                    type: string
                    example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  logo:
                    nullable: true
                    example: null
                  name:
                    type: string
                    example: Onvo AI
                  phone_number:
                    type: string
                    example: +91 807 506 5108
                  stripe_id:
                    nullable: true
                    example: null
              examples:
                Success:
                  value:
                    created_at: "2024-01-17T10:14:12.62603+00:00"
                    email: null
                    id: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    logo: null
                    name: Onvo AI
                    phone_number: +91 807 506 5108
                    stripe_id: null
    post:
      tags:
        - Teams
      summary: Update team by id
      description: >-
        This endpoint allows you to edit an organisation. If using an API key,
        you can only edit the organisation scoped by the key, it will fail
        otherwise.
      operationId: updateTeamById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Onvo AI
                phone_number:
                  type: string
                  example: +91 807 506 5108
            examples:
              Update team by id:
                value:
                  name: Onvo AI
                  phone_number: +91 807 506 5108
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 16:28:52 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2024-01-17T10:14:12.62603+00:00"
                  email:
                    nullable: true
                    example: null
                  id:
                    type: string
                    example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  logo:
                    nullable: true
                    example: null
                  name:
                    type: string
                    example: Onvo AI
                  phone_number:
                    type: string
                    example: +91 807 506 5108
                  stripe_id:
                    nullable: true
                    example: null
              examples:
                Success:
                  value:
                    created_at: "2024-01-17T10:14:12.62603+00:00"
                    email: null
                    id: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    logo: null
                    name: Onvo AI
                    phone_number: +91 807 506 5108
                    stripe_id: null
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
  /api/dashboards/{id}/widgets:
    get:
      tags:
        - Dashboards
        - Widgets
      summary: Get all widgets under dashboard
      description: Get all widgets under dashboard
      operationId: getAllWidgetsUnderDashboard
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:46:50 GMT
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    assumptions:
                      type: array
                      items:
                        type: string
                        example: >-
                          1. The total sales will be calculated from the array
                          with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                          contains the 'Sales' field.
                      example:
                        - >-
                          1. The total sales will be calculated from the array
                          with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                          contains the 'Sales' field.
                        - 2. The 'Sales' field is assumed to be in US dollars.
                        - >-
                          3. The 'Sales' field is assumed to be a numerical
                          value, but it will be passed through the
                          validateNumber function to ensure it is a usable
                          number.
                        - >-
                          4. The 'Sales' field values will be summed up to get
                          the total sales.
                        - >-
                          5. The total sales value will be rounded to 2 decimal
                          points using the toFixed(2) method.
                        - >-
                          6. The total sales value will be returned as a single
                          data point in the datasets.data array.
                        - >-
                          7. The datasets.label will be set to 'Total Sales
                          (USD)' to indicate the unit of the metric.
                        - >-
                          8. The type of chart in config will be set to 'metric'
                          as per the user's request.
                    code:
                      type: string
                      example: |-
                        function main(data) {
                            let totalSales = 0;
                            data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                totalSales += validateNumber(item['Sales']);
                            });
                            totalSales = totalSales.toFixed(2);

                            return {
                                type: 'metric',
                                data: {
                                    datasets: [{
                                        data: [totalSales],
                                        label: 'Total Sales (USD)'
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false
                                }
                            };
                        }
                    dashboard:
                      type: string
                      example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h:
                      type: number
                      example: 1
                    id:
                      type: string
                      example: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                    organisation:
                      type: string
                      example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query:
                      type: string
                      example: >-
                        Show me a metric showing the total amount of sales in US
                        dollars. Round the final value to 2 decimal points
                    title:
                      type: string
                      example: Total sales
                    w:
                      type: number
                      example: 4
                    x:
                      type: number
                      example: 4
                    "y":
                      type: number
                      example: 0
                example:
                  - assumptions:
                      - >-
                        1. The total sales will be calculated from the array
                        with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                        contains the 'Sales' field.
                      - 2. The 'Sales' field is assumed to be in US dollars.
                      - >-
                        3. The 'Sales' field is assumed to be a numerical value,
                        but it will be passed through the validateNumber
                        function to ensure it is a usable number.
                      - >-
                        4. The 'Sales' field values will be summed up to get the
                        total sales.
                      - >-
                        5. The total sales value will be rounded to 2 decimal
                        points using the toFixed(2) method.
                      - >-
                        6. The total sales value will be returned as a single
                        data point in the datasets.data array.
                      - >-
                        7. The datasets.label will be set to 'Total Sales (USD)'
                        to indicate the unit of the metric.
                      - >-
                        8. The type of chart in config will be set to 'metric'
                        as per the user's request.
                    code: |-
                      function main(data) {
                          let totalSales = 0;
                          data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                              totalSales += validateNumber(item['Sales']);
                          });
                          totalSales = totalSales.toFixed(2);

                          return {
                              type: 'metric',
                              data: {
                                  datasets: [{
                                      data: [totalSales],
                                      label: 'Total Sales (USD)'
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false
                              }
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 1
                    id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: >-
                      Show me a metric showing the total amount of sales in US
                      dollars. Round the final value to 2 decimal points
                    title: Total sales
                    w: 4
                    x: 4
                    "y": 0
                  - assumptions: []
                    code: |-
                      function main(data) {
                          let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                          let salesPerMonth = {};

                          salesData.forEach(sale => {
                              let date = new Date(sale['Order Date']);
                              let year = date.getFullYear();
                              let month = date.getMonth();

                              if (!salesPerMonth[year]) {
                                  salesPerMonth[year] = Array(12).fill(0);
                              }

                              salesPerMonth[year][month] += validateNumber(sale['Sales']);
                          });

                          let datasets = [];
                          for (let year in salesPerMonth) {
                              datasets.push({
                                  label: year,
                                  data: salesPerMonth[year],
                                  fill: false,
                                  borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                              });
                          }

                          return {
                              type: 'line',
                              data: {
                                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                  datasets: datasets
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      xAxes: [{
                                          display: true,
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Month'
                                          }
                                      }],
                                      yAxes: [{
                                          display: true,
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Sales'
                                          }
                                      }]
                                  }
                              }
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 3
                    id: 05f28a95-7cf5-488f-ac52-736536b3594e
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: >-
                      Show me the sales per month as a line chart. Each line
                      should show the sales for a year.
                    title: Sales per month as a line chart
                    w: 6
                    x: 6
                    "y": 1
                  - assumptions:
                      - >-
                        1. The total customer to date is calculated by counting
                        the unique Customer IDs in the data.
                      - >-
                        2. The data for Customer IDs is assumed to be in the
                        array for key 44a3aa21-0181-46d9-a54b-af915aaec92e.
                      - >-
                        3. The function uses a Set to store unique Customer IDs
                        and then counts the size of the Set.
                      - >-
                        4. The chart type is set to 'metric' and the total
                        customer count is returned as a single data point.
                      - >-
                        5. The label for the data point is set to 'Total
                        Customers'.
                    code: |-
                      function main(data) {
                          const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                          const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                          const totalCustomers = uniqueCustomers.size;

                          return {
                              type: 'metric',
                              data: {
                                  datasets: [{
                                      data: [totalCustomers],
                                      label: 'Total Customers'
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false
                              }
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 1
                    id: d38b4048-9a60-40e7-aead-62ba8227b7da
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: Create a metric showing the total customer to date
                    title: Total customers
                    w: 4
                    x: 0
                    "y": 0
                  - assumptions:
                      - >-
                        1. The user wants to know the total number of orders to
                        date.
                      - >-
                        2. The 'Order ID' field from the array with key
                        '74813926-d1ec-4b38-82e1-08d1820cb029' will be used to
                        count the number of orders.
                      - >-
                        3. The 'Order Date' field will be used to filter the
                        orders up to the current date.
                      - >-
                        4. The 'Customer ID' field will be used to match the
                        data from both arrays.
                      - >-
                        5. The validateNumber function will be used to ensure
                        the 'Order ID' is a valid number before counting.
                      - >-
                        6. The chart type will be set to 'metric' as per the
                        user's request.
                      - >-
                        7. The chart will display a single data point
                        representing the total number of orders to date.
                      - 8. The label for the data point will be 'Total Orders'.
                    code: |-
                      function main(data) {
                          let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                          let currentDate = new Date();
                          let totalOrders = 0;

                          for (let i = 0; i < orders.length; i++) {
                              let orderDate = new Date(orders[i]['Order Date']);
                              if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                  totalOrders++;
                              }
                          }

                          return {
                              type: 'metric',
                              data: {
                                  datasets: [{
                                      data: [totalOrders],
                                      label: 'Total Orders'
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      xAxes: [{
                                          display: true,
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Orders'
                                          }
                                      }],
                                      yAxes: [{
                                          display: true,
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Count'
                                          }
                                      }]
                                  }
                              }
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 1
                    id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: Show me a metric for how many orders I have to date
                    title: Total orders
                    w: 4
                    x: 8
                    "y": 0
                  - assumptions: []
                    code: |-
                      function main(data) {
                          // Extract the arrays from the data object
                          const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                          const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                          // Create a map to store the total sales volume for each state
                          const stateSales = new Map();

                          // Iterate over the sales data
                          for (let i = 0; i < salesData.length; i++) {
                              // Find the corresponding customer data
                              const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                              // If the customer data is found and the state is not yet in the map, add it
                              if (customer && !stateSales.has(customer.State)) {
                                  stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                              }
                              // If the state is already in the map, add the sales volume to the existing value
                              else if (customer) {
                                  stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                              }
                          }

                          // Convert the map to an array and sort it in descending order by sales volume
                          const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                          // Limit the data to the top 5 states
                          const topStates = sortedStates.slice(0, 5);

                          // Create the data for the chart
                          const chartData = {
                              labels: topStates.map(s => s[0]),
                              datasets: [{
                                  label: 'Sales Volume',
                                  data: topStates.map(s => s[1]),
                                  backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                  borderColor: 'rgba(75, 192, 192, 1)',
                                  borderWidth: 1
                              }]
                          };

                          // Create the options for the chart
                          const chartOptions = {
                              responsive: true,
                              maintainAspectRatio: false,
                              scales: {
                                  yAxes: [{
                                      ticks: {
                                          beginAtZero: true
                                      },
                                      scaleLabel: {
                                          display: true,
                                          labelString: 'Sales Volume'
                                      }
                                  }],
                                  xAxes: [{
                                      scaleLabel: {
                                          display: true,
                                          labelString: 'State'
                                      }
                                  }]
                              }
                          };

                          // Return the chart configuration
                          return {
                              type: 'bar',
                              data: chartData,
                              options: chartOptions
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 3
                    id: 5734dba1-4392-4128-8deb-058b7f6517fe
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: Create a chart showing the top 5 states by sales volume
                    title: Top 5 states by sales volume
                    w: 6
                    x: 0
                    "y": 1
              examples:
                Success:
                  value:
                    - assumptions:
                        - >-
                          1. The total sales will be calculated from the array
                          with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                          contains the 'Sales' field.
                        - 2. The 'Sales' field is assumed to be in US dollars.
                        - >-
                          3. The 'Sales' field is assumed to be a numerical
                          value, but it will be passed through the
                          validateNumber function to ensure it is a usable
                          number.
                        - >-
                          4. The 'Sales' field values will be summed up to get
                          the total sales.
                        - >-
                          5. The total sales value will be rounded to 2 decimal
                          points using the toFixed(2) method.
                        - >-
                          6. The total sales value will be returned as a single
                          data point in the datasets.data array.
                        - >-
                          7. The datasets.label will be set to 'Total Sales
                          (USD)' to indicate the unit of the metric.
                        - >-
                          8. The type of chart in config will be set to 'metric'
                          as per the user's request.
                      code: |-
                        function main(data) {
                            let totalSales = 0;
                            data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                totalSales += validateNumber(item['Sales']);
                            });
                            totalSales = totalSales.toFixed(2);

                            return {
                                type: 'metric',
                                data: {
                                    datasets: [{
                                        data: [totalSales],
                                        label: 'Total Sales (USD)'
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false
                                }
                            };
                        }
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      h: 1
                      id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      query: >-
                        Show me a metric showing the total amount of sales in US
                        dollars. Round the final value to 2 decimal points
                      title: Total sales
                      w: 4
                      x: 4
                      "y": 0
                    - assumptions: []
                      code: |-
                        function main(data) {
                            let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                            let salesPerMonth = {};

                            salesData.forEach(sale => {
                                let date = new Date(sale['Order Date']);
                                let year = date.getFullYear();
                                let month = date.getMonth();

                                if (!salesPerMonth[year]) {
                                    salesPerMonth[year] = Array(12).fill(0);
                                }

                                salesPerMonth[year][month] += validateNumber(sale['Sales']);
                            });

                            let datasets = [];
                            for (let year in salesPerMonth) {
                                datasets.push({
                                    label: year,
                                    data: salesPerMonth[year],
                                    fill: false,
                                    borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                });
                            }

                            return {
                                type: 'line',
                                data: {
                                    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                    datasets: datasets
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    scales: {
                                        xAxes: [{
                                            display: true,
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Month'
                                            }
                                        }],
                                        yAxes: [{
                                            display: true,
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Sales'
                                            }
                                        }]
                                    }
                                }
                            };
                        }
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      h: 3
                      id: 05f28a95-7cf5-488f-ac52-736536b3594e
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      query: >-
                        Show me the sales per month as a line chart. Each line
                        should show the sales for a year.
                      title: Sales per month as a line chart
                      w: 6
                      x: 6
                      "y": 1
                    - assumptions:
                        - >-
                          1. The total customer to date is calculated by
                          counting the unique Customer IDs in the data.
                        - >-
                          2. The data for Customer IDs is assumed to be in the
                          array for key 44a3aa21-0181-46d9-a54b-af915aaec92e.
                        - >-
                          3. The function uses a Set to store unique Customer
                          IDs and then counts the size of the Set.
                        - >-
                          4. The chart type is set to 'metric' and the total
                          customer count is returned as a single data point.
                        - >-
                          5. The label for the data point is set to 'Total
                          Customers'.
                      code: |-
                        function main(data) {
                            const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                            const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                            const totalCustomers = uniqueCustomers.size;

                            return {
                                type: 'metric',
                                data: {
                                    datasets: [{
                                        data: [totalCustomers],
                                        label: 'Total Customers'
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false
                                }
                            };
                        }
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      h: 1
                      id: d38b4048-9a60-40e7-aead-62ba8227b7da
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      query: Create a metric showing the total customer to date
                      title: Total customers
                      w: 4
                      x: 0
                      "y": 0
                    - assumptions:
                        - >-
                          1. The user wants to know the total number of orders
                          to date.
                        - >-
                          2. The 'Order ID' field from the array with key
                          '74813926-d1ec-4b38-82e1-08d1820cb029' will be used to
                          count the number of orders.
                        - >-
                          3. The 'Order Date' field will be used to filter the
                          orders up to the current date.
                        - >-
                          4. The 'Customer ID' field will be used to match the
                          data from both arrays.
                        - >-
                          5. The validateNumber function will be used to ensure
                          the 'Order ID' is a valid number before counting.
                        - >-
                          6. The chart type will be set to 'metric' as per the
                          user's request.
                        - >-
                          7. The chart will display a single data point
                          representing the total number of orders to date.
                        - >-
                          8. The label for the data point will be 'Total
                          Orders'.
                      code: |-
                        function main(data) {
                            let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                            let currentDate = new Date();
                            let totalOrders = 0;

                            for (let i = 0; i < orders.length; i++) {
                                let orderDate = new Date(orders[i]['Order Date']);
                                if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                    totalOrders++;
                                }
                            }

                            return {
                                type: 'metric',
                                data: {
                                    datasets: [{
                                        data: [totalOrders],
                                        label: 'Total Orders'
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    scales: {
                                        xAxes: [{
                                            display: true,
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Orders'
                                            }
                                        }],
                                        yAxes: [{
                                            display: true,
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Count'
                                            }
                                        }]
                                    }
                                }
                            };
                        }
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      h: 1
                      id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      query: Show me a metric for how many orders I have to date
                      title: Total orders
                      w: 4
                      x: 8
                      "y": 0
                    - assumptions: []
                      code: |-
                        function main(data) {
                            // Extract the arrays from the data object
                            const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                            const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                            // Create a map to store the total sales volume for each state
                            const stateSales = new Map();

                            // Iterate over the sales data
                            for (let i = 0; i < salesData.length; i++) {
                                // Find the corresponding customer data
                                const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                // If the customer data is found and the state is not yet in the map, add it
                                if (customer && !stateSales.has(customer.State)) {
                                    stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                }
                                // If the state is already in the map, add the sales volume to the existing value
                                else if (customer) {
                                    stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                }
                            }

                            // Convert the map to an array and sort it in descending order by sales volume
                            const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                            // Limit the data to the top 5 states
                            const topStates = sortedStates.slice(0, 5);

                            // Create the data for the chart
                            const chartData = {
                                labels: topStates.map(s => s[0]),
                                datasets: [{
                                    label: 'Sales Volume',
                                    data: topStates.map(s => s[1]),
                                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                    borderColor: 'rgba(75, 192, 192, 1)',
                                    borderWidth: 1
                                }]
                            };

                            // Create the options for the chart
                            const chartOptions = {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    yAxes: [{
                                        ticks: {
                                            beginAtZero: true
                                        },
                                        scaleLabel: {
                                            display: true,
                                            labelString: 'Sales Volume'
                                        }
                                    }],
                                    xAxes: [{
                                        scaleLabel: {
                                            display: true,
                                            labelString: 'State'
                                        }
                                    }]
                                }
                            };

                            // Return the chart configuration
                            return {
                                type: 'bar',
                                data: chartData,
                                options: chartOptions
                            };
                        }
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      h: 3
                      id: 5734dba1-4392-4128-8deb-058b7f6517fe
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      query: Create a chart showing the top 5 states by sales volume
                      title: Top 5 states by sales volume
                      w: 6
                      x: 0
                      "y": 1
      security:
        - apiKey: []
    put:
      tags:
        - Dashboards
        - Widgets
      summary: Create widget
      description: Create widget
      operationId: createWidget
      parameters:
        - name: query
          in: query
          schema:
            type: string
            example: Create a pie chart showing the sales in 2018 vs the sales in 2019
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assumptions:
                  type: array
                  items:
                    type: string
                    example: >-
                      1. The data provided by the user is in the correct format
                      as described above.
                  example:
                    - >-
                      1. The data provided by the user is in the correct format
                      as described above.
                    - 2. The Order Date field is in the format DD/MM/YYYY.
                    - >-
                      3. The Sales field is a numerical value representing the
                      sales for that particular order.
                    - >-
                      4. The data is unsorted, so we need to sort it by Order
                      Date to correctly plot the sales by month.
                    - >-
                      5. We are using the validateNumber function to ensure the
                      Sales field is a valid number.
                    - >-
                      6. We are not using the fields: Row ID, Order ID, Ship
                      Date, Ship Mode, Customer ID, Product ID, Category,
                      Sub-Category, Product Name, Quantity, Discount, Profit,
                      City, Country, Segment, State, Postal Code, Region.
                    - >-
                      7. We are assuming that the data for each month is summed
                      up to represent the total sales for that month.
                code:
                  type: string
                  example: |-
                    function main(data) {
                        // Extract and process sales data
                        let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                            return {
                                date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                sales: validateNumber(order['Sales'])
                            };
                        });

                        // Sort sales data by date
                        salesData.sort((a, b) => a.date - b.date);

                        // Group sales data by month and year
                        let groupedSalesData = {};
                        salesData.forEach(order => {
                            let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                            if (!groupedSalesData[monthYear]) {
                                groupedSalesData[monthYear] = 0;
                            }
                            groupedSalesData[monthYear] += order.sales;
                        });

                        // Prepare data for chart
                        let labels = Object.keys(groupedSalesData);
                        let datasets = [{
                            label: 'Sales',
                            data: Object.values(groupedSalesData),
                            fill: false,
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1
                        }];

                        // Return chart configuration
                        return {
                            type: 'line',
                            data: { labels, datasets },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Month and Year'
                                        }
                                    },
                                    y: {
                                        title: {
                                            display: true,
                                            text: 'Sales'
                                        }
                                    }
                                }
                            }
                        };
                    }
                dashboard:
                  type: string
                  example: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                h:
                  type: number
                  example: 1
                query:
                  type: string
                  example: >-
                    Create a line chart showing sales by month using the order
                    date. The x axis should show the month and year like "June
                    2020"
                title:
                  type: string
                  example: >-
                    Create a line chart showing sales by month using the order
                    date. The x axis should show the month and year like "June
                    2020"
                w:
                  type: number
                  example: 4
                x:
                  type: number
                  example: 0
                "y":
                  type: number
                  example: 0
            examples:
              Create widget:
                value:
                  assumptions:
                    - >-
                      1. The data provided by the user is in the correct format
                      as described above.
                    - 2. The Order Date field is in the format DD/MM/YYYY.
                    - >-
                      3. The Sales field is a numerical value representing the
                      sales for that particular order.
                    - >-
                      4. The data is unsorted, so we need to sort it by Order
                      Date to correctly plot the sales by month.
                    - >-
                      5. We are using the validateNumber function to ensure the
                      Sales field is a valid number.
                    - >-
                      6. We are not using the fields: Row ID, Order ID, Ship
                      Date, Ship Mode, Customer ID, Product ID, Category,
                      Sub-Category, Product Name, Quantity, Discount, Profit,
                      City, Country, Segment, State, Postal Code, Region.
                    - >-
                      7. We are assuming that the data for each month is summed
                      up to represent the total sales for that month.
                  code: |-
                    function main(data) {
                        // Extract and process sales data
                        let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                            return {
                                date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                sales: validateNumber(order['Sales'])
                            };
                        });

                        // Sort sales data by date
                        salesData.sort((a, b) => a.date - b.date);

                        // Group sales data by month and year
                        let groupedSalesData = {};
                        salesData.forEach(order => {
                            let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                            if (!groupedSalesData[monthYear]) {
                                groupedSalesData[monthYear] = 0;
                            }
                            groupedSalesData[monthYear] += order.sales;
                        });

                        // Prepare data for chart
                        let labels = Object.keys(groupedSalesData);
                        let datasets = [{
                            label: 'Sales',
                            data: Object.values(groupedSalesData),
                            fill: false,
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1
                        }];

                        // Return chart configuration
                        return {
                            type: 'line',
                            data: { labels, datasets },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Month and Year'
                                        }
                                    },
                                    y: {
                                        title: {
                                            display: true,
                                            text: 'Sales'
                                        }
                                    }
                                }
                            }
                        };
                    }
                  dashboard: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                  h: 1
                  query: >-
                    Create a line chart showing sales by month using the order
                    date. The x axis should show the month and year like "June
                    2020"
                  title: >-
                    Create a line chart showing sales by month using the order
                    date. The x axis should show the month and year like "June
                    2020"
                  w: 4
                  x: 0
                  "y": 0
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 11:02:53 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  assumptions:
                    type: array
                    items:
                      type: string
                      example: >-
                        1. The data provided by the user is in the correct
                        format as described above.
                    example:
                      - >-
                        1. The data provided by the user is in the correct
                        format as described above.
                      - 2. The Order Date field is in the format DD/MM/YYYY.
                      - >-
                        3. The Sales field is a numerical value representing the
                        sales for that particular order.
                      - >-
                        4. The data is unsorted, so we need to sort it by Order
                        Date to correctly plot the sales by month.
                      - >-
                        5. We are using the validateNumber function to ensure
                        the Sales field is a valid number.
                      - >-
                        6. We are not using the fields: Row ID, Order ID, Ship
                        Date, Ship Mode, Customer ID, Product ID, Category,
                        Sub-Category, Product Name, Quantity, Discount, Profit,
                        City, Country, Segment, State, Postal Code, Region.
                      - >-
                        7. We are assuming that the data for each month is
                        summed up to represent the total sales for that month.
                  code:
                    type: string
                    example: |-
                      function main(data) {
                          // Extract and process sales data
                          let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                              return {
                                  date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                  sales: validateNumber(order['Sales'])
                              };
                          });

                          // Sort sales data by date
                          salesData.sort((a, b) => a.date - b.date);

                          // Group sales data by month and year
                          let groupedSalesData = {};
                          salesData.forEach(order => {
                              let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                              if (!groupedSalesData[monthYear]) {
                                  groupedSalesData[monthYear] = 0;
                              }
                              groupedSalesData[monthYear] += order.sales;
                          });

                          // Prepare data for chart
                          let labels = Object.keys(groupedSalesData);
                          let datasets = [{
                              label: 'Sales',
                              data: Object.values(groupedSalesData),
                              fill: false,
                              borderColor: 'rgb(75, 192, 192)',
                              tension: 0.1
                          }];

                          // Return chart configuration
                          return {
                              type: 'line',
                              data: { labels, datasets },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      x: {
                                          title: {
                                              display: true,
                                              text: 'Month and Year'
                                          }
                                      },
                                      y: {
                                          title: {
                                              display: true,
                                              text: 'Sales'
                                          }
                                      }
                                  }
                              }
                          };
                      }
                  dashboard:
                    type: string
                    example: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                  h:
                    type: number
                    example: 1
                  id:
                    type: string
                    example: 0a895b21-c4a4-4806-943e-4de029121eea
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  query:
                    type: string
                    example: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                  title:
                    type: string
                    example: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                  w:
                    type: number
                    example: 4
                  x:
                    type: number
                    example: 0
                  "y":
                    type: number
                    example: 0
              examples:
                Success:
                  value:
                    assumptions:
                      - >-
                        1. The data provided by the user is in the correct
                        format as described above.
                      - 2. The Order Date field is in the format DD/MM/YYYY.
                      - >-
                        3. The Sales field is a numerical value representing the
                        sales for that particular order.
                      - >-
                        4. The data is unsorted, so we need to sort it by Order
                        Date to correctly plot the sales by month.
                      - >-
                        5. We are using the validateNumber function to ensure
                        the Sales field is a valid number.
                      - >-
                        6. We are not using the fields: Row ID, Order ID, Ship
                        Date, Ship Mode, Customer ID, Product ID, Category,
                        Sub-Category, Product Name, Quantity, Discount, Profit,
                        City, Country, Segment, State, Postal Code, Region.
                      - >-
                        7. We are assuming that the data for each month is
                        summed up to represent the total sales for that month.
                    code: |-
                      function main(data) {
                          // Extract and process sales data
                          let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                              return {
                                  date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                  sales: validateNumber(order['Sales'])
                              };
                          });

                          // Sort sales data by date
                          salesData.sort((a, b) => a.date - b.date);

                          // Group sales data by month and year
                          let groupedSalesData = {};
                          salesData.forEach(order => {
                              let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                              if (!groupedSalesData[monthYear]) {
                                  groupedSalesData[monthYear] = 0;
                              }
                              groupedSalesData[monthYear] += order.sales;
                          });

                          // Prepare data for chart
                          let labels = Object.keys(groupedSalesData);
                          let datasets = [{
                              label: 'Sales',
                              data: Object.values(groupedSalesData),
                              fill: false,
                              borderColor: 'rgb(75, 192, 192)',
                              tension: 0.1
                          }];

                          // Return chart configuration
                          return {
                              type: 'line',
                              data: { labels, datasets },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      x: {
                                          title: {
                                              display: true,
                                              text: 'Month and Year'
                                          }
                                      },
                                      y: {
                                          title: {
                                              display: true,
                                              text: 'Sales'
                                          }
                                      }
                                  }
                              }
                          };
                      }
                    dashboard: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                    h: 1
                    id: 0a895b21-c4a4-4806-943e-4de029121eea
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                    title: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                    w: 4
                    x: 0
                    "y": 0
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5159cb4e-b89d-49a6-9c81-ef7833737aba
  /api/dashboards/{dashboardId}/widgets/{widgetId}:
    get:
      tags:
        - Dashboards
        - Widgets
      summary: Get widget by id
      description: Get widget by id
      operationId: getWidgetById
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:50:16 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  assumptions:
                    type: array
                    items:
                      type: string
                      example: >-
                        1. The total sales will be calculated from the array
                        with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                        contains the 'Sales' field.
                    example:
                      - >-
                        1. The total sales will be calculated from the array
                        with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                        contains the 'Sales' field.
                      - 2. The 'Sales' field is assumed to be in US dollars.
                      - >-
                        3. The 'Sales' field is assumed to be a numerical value,
                        but it will be passed through the validateNumber
                        function to ensure it is a usable number.
                      - >-
                        4. The 'Sales' field values will be summed up to get the
                        total sales.
                      - >-
                        5. The total sales value will be rounded to 2 decimal
                        points using the toFixed(2) method.
                      - >-
                        6. The total sales value will be returned as a single
                        data point in the datasets.data array.
                      - >-
                        7. The datasets.label will be set to 'Total Sales (USD)'
                        to indicate the unit of the metric.
                      - >-
                        8. The type of chart in config will be set to 'metric'
                        as per the user's request.
                  code:
                    type: string
                    example: |-
                      function main(data) {
                          let totalSales = 0;
                          data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                              totalSales += validateNumber(item['Sales']);
                          });
                          totalSales = totalSales.toFixed(2);

                          return {
                              type: 'metric',
                              data: {
                                  datasets: [{
                                      data: [totalSales],
                                      label: 'Total Sales (USD)'
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false
                              }
                          };
                      }
                  dashboard:
                    type: string
                    example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                  h:
                    type: number
                    example: 1
                  id:
                    type: string
                    example: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  query:
                    type: string
                    example: >-
                      Show me a metric showing the total amount of sales in US
                      dollars. Round the final value to 2 decimal points
                  title:
                    type: string
                    example: Total sales
                  w:
                    type: number
                    example: 4
                  x:
                    type: number
                    example: 4
                  "y":
                    type: number
                    example: 0
              examples:
                Success:
                  value:
                    assumptions:
                      - >-
                        1. The total sales will be calculated from the array
                        with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                        contains the 'Sales' field.
                      - 2. The 'Sales' field is assumed to be in US dollars.
                      - >-
                        3. The 'Sales' field is assumed to be a numerical value,
                        but it will be passed through the validateNumber
                        function to ensure it is a usable number.
                      - >-
                        4. The 'Sales' field values will be summed up to get the
                        total sales.
                      - >-
                        5. The total sales value will be rounded to 2 decimal
                        points using the toFixed(2) method.
                      - >-
                        6. The total sales value will be returned as a single
                        data point in the datasets.data array.
                      - >-
                        7. The datasets.label will be set to 'Total Sales (USD)'
                        to indicate the unit of the metric.
                      - >-
                        8. The type of chart in config will be set to 'metric'
                        as per the user's request.
                    code: |-
                      function main(data) {
                          let totalSales = 0;
                          data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                              totalSales += validateNumber(item['Sales']);
                          });
                          totalSales = totalSales.toFixed(2);

                          return {
                              type: 'metric',
                              data: {
                                  datasets: [{
                                      data: [totalSales],
                                      label: 'Total Sales (USD)'
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false
                              }
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 1
                    id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: >-
                      Show me a metric showing the total amount of sales in US
                      dollars. Round the final value to 2 decimal points
                    title: Total sales
                    w: 4
                    x: 4
                    "y": 0
    post:
      tags:
        - Dashboards
        - Widgets
      summary: Update widget by id
      description: Update widget by id
      operationId: updateWidgetById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Testing title change
            examples:
              Update widget by id:
                value:
                  title: Testing title change
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 11:03:43 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  assumptions:
                    type: array
                    items:
                      type: string
                      example: >-
                        1. The data provided by the user is in the correct
                        format as described above.
                    example:
                      - >-
                        1. The data provided by the user is in the correct
                        format as described above.
                      - 2. The Order Date field is in the format DD/MM/YYYY.
                      - >-
                        3. The Sales field is a numerical value representing the
                        sales for that particular order.
                      - >-
                        4. The data is unsorted, so we need to sort it by Order
                        Date to correctly plot the sales by month.
                      - >-
                        5. We are using the validateNumber function to ensure
                        the Sales field is a valid number.
                      - >-
                        6. We are not using the fields: Row ID, Order ID, Ship
                        Date, Ship Mode, Customer ID, Product ID, Category,
                        Sub-Category, Product Name, Quantity, Discount, Profit,
                        City, Country, Segment, State, Postal Code, Region.
                      - >-
                        7. We are assuming that the data for each month is
                        summed up to represent the total sales for that month.
                  code:
                    type: string
                    example: |-
                      function main(data) {
                          // Extract and process sales data
                          let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                              return {
                                  date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                  sales: validateNumber(order['Sales'])
                              };
                          });

                          // Sort sales data by date
                          salesData.sort((a, b) => a.date - b.date);

                          // Group sales data by month and year
                          let groupedSalesData = {};
                          salesData.forEach(order => {
                              let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                              if (!groupedSalesData[monthYear]) {
                                  groupedSalesData[monthYear] = 0;
                              }
                              groupedSalesData[monthYear] += order.sales;
                          });

                          // Prepare data for chart
                          let labels = Object.keys(groupedSalesData);
                          let datasets = [{
                              label: 'Sales',
                              data: Object.values(groupedSalesData),
                              fill: false,
                              borderColor: 'rgb(75, 192, 192)',
                              tension: 0.1
                          }];

                          // Return chart configuration
                          return {
                              type: 'line',
                              data: { labels, datasets },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      x: {
                                          title: {
                                              display: true,
                                              text: 'Month and Year'
                                          }
                                      },
                                      y: {
                                          title: {
                                              display: true,
                                              text: 'Sales'
                                          }
                                      }
                                  }
                              }
                          };
                      }
                  dashboard:
                    type: string
                    example: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                  h:
                    type: number
                    example: 1
                  id:
                    type: string
                    example: 0a895b21-c4a4-4806-943e-4de029121eea
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  query:
                    type: string
                    example: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                  title:
                    type: string
                    example: Testing title change
                  w:
                    type: number
                    example: 4
                  x:
                    type: number
                    example: 0
                  "y":
                    type: number
                    example: 0
              examples:
                Success:
                  value:
                    assumptions:
                      - >-
                        1. The data provided by the user is in the correct
                        format as described above.
                      - 2. The Order Date field is in the format DD/MM/YYYY.
                      - >-
                        3. The Sales field is a numerical value representing the
                        sales for that particular order.
                      - >-
                        4. The data is unsorted, so we need to sort it by Order
                        Date to correctly plot the sales by month.
                      - >-
                        5. We are using the validateNumber function to ensure
                        the Sales field is a valid number.
                      - >-
                        6. We are not using the fields: Row ID, Order ID, Ship
                        Date, Ship Mode, Customer ID, Product ID, Category,
                        Sub-Category, Product Name, Quantity, Discount, Profit,
                        City, Country, Segment, State, Postal Code, Region.
                      - >-
                        7. We are assuming that the data for each month is
                        summed up to represent the total sales for that month.
                    code: |-
                      function main(data) {
                          // Extract and process sales data
                          let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                              return {
                                  date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                  sales: validateNumber(order['Sales'])
                              };
                          });

                          // Sort sales data by date
                          salesData.sort((a, b) => a.date - b.date);

                          // Group sales data by month and year
                          let groupedSalesData = {};
                          salesData.forEach(order => {
                              let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                              if (!groupedSalesData[monthYear]) {
                                  groupedSalesData[monthYear] = 0;
                              }
                              groupedSalesData[monthYear] += order.sales;
                          });

                          // Prepare data for chart
                          let labels = Object.keys(groupedSalesData);
                          let datasets = [{
                              label: 'Sales',
                              data: Object.values(groupedSalesData),
                              fill: false,
                              borderColor: 'rgb(75, 192, 192)',
                              tension: 0.1
                          }];

                          // Return chart configuration
                          return {
                              type: 'line',
                              data: { labels, datasets },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      x: {
                                          title: {
                                              display: true,
                                              text: 'Month and Year'
                                          }
                                      },
                                      y: {
                                          title: {
                                              display: true,
                                              text: 'Sales'
                                          }
                                      }
                                  }
                              }
                          };
                      }
                    dashboard: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                    h: 1
                    id: 0a895b21-c4a4-4806-943e-4de029121eea
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                    title: Testing title change
                    w: 4
                    x: 0
                    "y": 0
    delete:
      tags:
        - Dashboards
        - Widgets
      summary: Delete widget by id
      description: Delete widget by id
      operationId: deleteWidgetById
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 11:04:24 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
              examples:
                Success:
                  value:
                    success: true
    parameters:
      - name: dashboardId
        in: path
        required: true
        schema:
          type: string
          example: 5159cb4e-b89d-49a6-9c81-ef7833737aba
      - name: widgetId
        in: path
        required: true
        schema:
          type: string
          example: 00edb07b-2805-4808-a185-3ac2f8635c19
  /api/dashboards/{id}/questions:
    get:
      tags:
        - Dashboards
        - Questions
      summary: Get questions by dashboard id
      description: Get questions by dashboard id
      operationId: getQuestionsByDashboardId
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:44:55 GMT
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    assumptions:
                      type: array
                      items:
                        type: string
                        example: >-
                          1. The 'Sales' field in the second dataset represents
                          the sales volume.
                      example:
                        - >-
                          1. The 'Sales' field in the second dataset represents
                          the sales volume.
                        - >-
                          2. The 'State' field in the first dataset represents
                          the state of the customer.
                        - >-
                          3. The 'Customer ID' field is the common field between
                          the two datasets.
                        - >-
                          4. The 'Sales' field is a numerical value and needs to
                          be validated using the validateNumber function.
                        - >-
                          5. The sales volume is calculated by summing up the
                          'Sales' field for each state.
                        - >-
                          6. If there are multiple states with the same highest
                          sales volume, only one of them will be returned.
                    code:
                      type: string
                      example: |-
                        function main(data) {
                            let customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                            let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                            let salesByState = {};

                            for (let i = 0; i < salesData.length; i++) {
                                let sales = validateNumber(salesData[i]['Sales']);
                                let customerId = salesData[i]['Customer ID'];

                                for (let j = 0; j < customerData.length; j++) {
                                    if (customerData[j]['Customer ID'] === customerId) {
                                        let state = customerData[j]['State'];
                                        if (salesByState[state]) {
                                            salesByState[state] += sales;
                                        } else {
                                            salesByState[state] = sales;
                                        }
                                        break;
                                    }
                                }
                            }

                            let maxSalesState = Object.keys(salesByState).reduce((a, b) => salesByState[a] > salesByState[b] ? a : b);

                            return { 'State': maxSalesState, 'Sales Volume': salesByState[maxSalesState] };
                        }
                    created_at:
                      type: string
                      example: "2023-09-08T10:40:22.02916+00:00"
                    dashboard:
                      type: string
                      example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    id:
                      type: string
                      example: c3016b18-3233-4ca8-b19d-36526d32b049
                    organisation:
                      type: string
                      example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    organisation_user:
                      nullable: true
                      example: null
                    output:
                      type: string
                      example: >-
                        The state with the highest sales volume is California
                        with a sales volume of 451036.58229999995.
                    query:
                      type: string
                      example: Which state has the highest sales volume?
                    report:
                      nullable: true
                      example: null
                    user:
                      nullable: true
                      example: null
                example:
                  - assumptions:
                      - >-
                        1. The 'Sales' field in the second dataset represents
                        the sales volume.
                      - >-
                        2. The 'State' field in the first dataset represents the
                        state of the customer.
                      - >-
                        3. The 'Customer ID' field is the common field between
                        the two datasets.
                      - >-
                        4. The 'Sales' field is a numerical value and needs to
                        be validated using the validateNumber function.
                      - >-
                        5. The sales volume is calculated by summing up the
                        'Sales' field for each state.
                      - >-
                        6. If there are multiple states with the same highest
                        sales volume, only one of them will be returned.
                    code: |-
                      function main(data) {
                          let customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                          let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                          let salesByState = {};

                          for (let i = 0; i < salesData.length; i++) {
                              let sales = validateNumber(salesData[i]['Sales']);
                              let customerId = salesData[i]['Customer ID'];

                              for (let j = 0; j < customerData.length; j++) {
                                  if (customerData[j]['Customer ID'] === customerId) {
                                      let state = customerData[j]['State'];
                                      if (salesByState[state]) {
                                          salesByState[state] += sales;
                                      } else {
                                          salesByState[state] = sales;
                                      }
                                      break;
                                  }
                              }
                          }

                          let maxSalesState = Object.keys(salesByState).reduce((a, b) => salesByState[a] > salesByState[b] ? a : b);

                          return { 'State': maxSalesState, 'Sales Volume': salesByState[maxSalesState] };
                      }
                    created_at: "2023-09-08T10:40:22.02916+00:00"
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    id: c3016b18-3233-4ca8-b19d-36526d32b049
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    organisation_user: null
                    output: >-
                      The state with the highest sales volume is California with
                      a sales volume of 451036.58229999995.
                    query: Which state has the highest sales volume?
                    report: null
                    user: null
              examples:
                Success:
                  value:
                    - assumptions:
                        - >-
                          1. The 'Sales' field in the second dataset represents
                          the sales volume.
                        - >-
                          2. The 'State' field in the first dataset represents
                          the state of the customer.
                        - >-
                          3. The 'Customer ID' field is the common field between
                          the two datasets.
                        - >-
                          4. The 'Sales' field is a numerical value and needs to
                          be validated using the validateNumber function.
                        - >-
                          5. The sales volume is calculated by summing up the
                          'Sales' field for each state.
                        - >-
                          6. If there are multiple states with the same highest
                          sales volume, only one of them will be returned.
                      code: |-
                        function main(data) {
                            let customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                            let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                            let salesByState = {};

                            for (let i = 0; i < salesData.length; i++) {
                                let sales = validateNumber(salesData[i]['Sales']);
                                let customerId = salesData[i]['Customer ID'];

                                for (let j = 0; j < customerData.length; j++) {
                                    if (customerData[j]['Customer ID'] === customerId) {
                                        let state = customerData[j]['State'];
                                        if (salesByState[state]) {
                                            salesByState[state] += sales;
                                        } else {
                                            salesByState[state] = sales;
                                        }
                                        break;
                                    }
                                }
                            }

                            let maxSalesState = Object.keys(salesByState).reduce((a, b) => salesByState[a] > salesByState[b] ? a : b);

                            return { 'State': maxSalesState, 'Sales Volume': salesByState[maxSalesState] };
                        }
                      created_at: "2023-09-08T10:40:22.02916+00:00"
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      id: c3016b18-3233-4ca8-b19d-36526d32b049
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      organisation_user: null
                      output: >-
                        The state with the highest sales volume is California
                        with a sales volume of 451036.58229999995.
                      query: Which state has the highest sales volume?
                      report: null
                      user: null
    put:
      tags:
        - Dashboards
        - Questions
      summary: Ask question to dashboard by id
      description: Ask question to dashboard by id
      operationId: askQuestionToDashboardById
      parameters:
        - name: query
          in: query
          schema:
            type: string
            example: Which state has the highest sales volume?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: TESTING API
            examples:
              Ask question to dashboard by id:
                value:
                  title: TESTING API
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:39:43 GMT
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            text/plain:
              examples:
                Success:
                  value: >-
                    // Assumptions:

                    // 1. The 'Sales' field in the second dataset represents the
                    sales volume.

                    // 2. The 'State' field in the first dataset represents the
                    state of the customer.

                    // 3. The 'Customer ID' field is the common field between
                    the two datasets.

                    // 4. The 'Sales' field is a numerical value and needs to be
                    validated using the validateNumber function.

                    // 5. The sales volume is calculated by summing up the
                    'Sales' field for each state.

                    // 6. If there are multiple states with the same highest
                    sales volume, only one of them will be returned.


                    function main(data) {
                        let customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                        let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                        let salesByState = {};

                        for (let i = 0; i < salesData.length; i++) {
                            let sales = validateNumber(salesData[i]['Sales']);
                            let customerId = salesData[i]['Customer ID'];

                            for (let j = 0; j < customerData.length; j++) {
                                if (customerData[j]['Customer ID'] === customerId) {
                                    let state = customerData[j]['State'];
                                    if (salesByState[state]) {
                                        salesByState[state] += sales;
                                    } else {
                                        salesByState[state] = sales;
                                    }
                                    break;
                                }
                            }
                        }

                        let maxSalesState = Object.keys(salesByState).reduce((a, b) => salesByState[a] > salesByState[b] ? a : b);

                        return { 'State': maxSalesState, 'Sales Volume': salesByState[maxSalesState] };
                    }

                    FINAL ANSWER:The state with the highest sales volume is
                    California with a sales volume of 451036.58229999995.
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
  /api/dashboards/{id}/sessions:
    get:
      tags:
        - Dashboards
        - Sessions
      summary: Get all dashboard sessions
      description: Get all dashboard sessions
      operationId: getAllDashboardSessions
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 16:48:50 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      type: string
                      example: "2024-01-21T15:56:48.736583+00:00"
                    dashboard:
                      type: string
                      example: f72e528a-7722-4f67-9499-806d74701992
                    embed_user:
                      type: string
                      example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead-123456
                    id:
                      type: string
                      example: 0f9d51d2-52be-4808-b84a-976a9c4c35f5
                    parameters:
                      type: string
                      example: AMzLETYlazN6mEtbScR+EBWTzDDGtijTB7ivDcx38d4NVw==
                    team:
                      type: string
                      example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                example:
                  - created_at: "2024-01-21T15:56:48.736583+00:00"
                    dashboard: f72e528a-7722-4f67-9499-806d74701992
                    embed_user: ee5b08c6-5167-4425-bbc3-a746fe4a7ead-123456
                    id: 0f9d51d2-52be-4808-b84a-976a9c4c35f5
                    parameters: AMzLETYlazN6mEtbScR+EBWTzDDGtijTB7ivDcx38d4NVw==
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  - created_at: "2024-01-23T13:32:35.876799+00:00"
                    dashboard: 8b7b858a-46fb-4a00-9e51-c66822248483
                    embed_user: >-
                      ee5b08c6-5167-4425-bbc3-a746fe4a7ead-5899f99d-a449-4bfa-8769-19c097aaf1f6
                    id: 81081344-0595-4ce2-9a51-6054852cba5d
                    parameters: AMzLETYlazN6mEtbScR+EBWTzDDGtijTB7ivDcx38d4NVw==
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
              examples:
                Success:
                  value:
                    - created_at: "2024-01-21T15:56:48.736583+00:00"
                      dashboard: f72e528a-7722-4f67-9499-806d74701992
                      embed_user: ee5b08c6-5167-4425-bbc3-a746fe4a7ead-123456
                      id: 0f9d51d2-52be-4808-b84a-976a9c4c35f5
                      parameters: AMzLETYlazN6mEtbScR+EBWTzDDGtijTB7ivDcx38d4NVw==
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    - created_at: "2024-01-23T13:32:35.876799+00:00"
                      dashboard: 8b7b858a-46fb-4a00-9e51-c66822248483
                      embed_user: >-
                        ee5b08c6-5167-4425-bbc3-a746fe4a7ead-5899f99d-a449-4bfa-8769-19c097aaf1f6
                      id: 81081344-0595-4ce2-9a51-6054852cba5d
                      parameters: AMzLETYlazN6mEtbScR+EBWTzDDGtijTB7ivDcx38d4NVw==
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
    post:
      tags:
        - Dashboards
        - Sessions
      summary: Upsert dashboard session
      description: >-
        A session creates a link between a user under your organisation and a
        dashboard. If a session already exists, its retrieved to save the user's
        changes and edits. If a session does not exist, one is created and is
        retreived
      operationId: upsertDashboardSession
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  type: object
                  properties:
                    hello:
                      type: string
                      example: world
                    testing:
                      type: number
                      example: 1234567456
                user:
                  type: string
                  example: successfull
            examples:
              Upsert dashboard session:
                value:
                  parameters:
                    hello: world
                    testing: 1234567456
                  user: successfull
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 06:48:47 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  dashboard:
                    type: string
                    example: e0a6ce20-ca31-421e-8764-74cde46e9463
                  id:
                    type: string
                    example: 1ad893d9-8654-4797-8603-d01186575349
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  parameters:
                    type: object
                    properties:
                      hello:
                        type: string
                        example: world
                      testing:
                        type: number
                        example: 1234567456
                  url:
                    type: string
                    example: >-
                      /embed/dashboard/e0a6ce20-ca31-421e-8764-74cde46e9463?token=eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiYXV0aGVudGljYXRlZCIsImFwcF9tZXRhZGF0YSI6eyJkYXNoYm9hcmQiOiJlMGE2Y2UyMC1jYTMxLTQyMWUtODc2NC03NGNkZTQ2ZTk0NjMiLCJzZXNzaW9uIjoiMWFkODkzZDktODY1NC00Nzk3LTg2MDMtZDAxMTg2NTc1MzQ5In0sInN1YiI6IjMxYTA1Y2ZkLTEyNzUtNGM3Ni04MzkwLTIwYjMyOGEzYzRiZi1zdWNjZXNzZnVsbCIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJpYXQiOjE2OTQxNTU3Mjd9.P_eZloNdX7FN2sVWsANfIrHy5SikE1Zl8NPmAteDIwU
                  user:
                    type: string
                    example: successfull
              examples:
                Success:
                  value:
                    dashboard: e0a6ce20-ca31-421e-8764-74cde46e9463
                    id: 1ad893d9-8654-4797-8603-d01186575349
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parameters:
                      hello: world
                      testing: 1234567456
                    url: >-
                      /embed/dashboard/e0a6ce20-ca31-421e-8764-74cde46e9463?token=eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiYXV0aGVudGljYXRlZCIsImFwcF9tZXRhZGF0YSI6eyJkYXNoYm9hcmQiOiJlMGE2Y2UyMC1jYTMxLTQyMWUtODc2NC03NGNkZTQ2ZTk0NjMiLCJzZXNzaW9uIjoiMWFkODkzZDktODY1NC00Nzk3LTg2MDMtZDAxMTg2NTc1MzQ5In0sInN1YiI6IjMxYTA1Y2ZkLTEyNzUtNGM3Ni04MzkwLTIwYjMyOGEzYzRiZi1zdWNjZXNzZnVsbCIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJpYXQiOjE2OTQxNTU3Mjd9.P_eZloNdX7FN2sVWsANfIrHy5SikE1Zl8NPmAteDIwU
                    user: successfull
    delete:
      tags:
        - Dashboards
        - Sessions
      summary: Revoke dashboard sessions
      description: Revoke dashboard sessions
      operationId: revokeDashboardSessions
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 16:49:14 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
              examples:
                Success:
                  value:
                    success: true
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: c5d37456-a042-4177-ab5f-69563f07937d
  /api/dashboards:
    get:
      tags:
        - Dashboards
      summary: Get all dashboards
      description: This endpoint fetches all teh dashboards under an organisation
      operationId: getAllDashboards
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 06:21:09 GMT
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      type: string
                      example: "2023-09-01T11:14:50.430891+00:00"
                    datasources:
                      type: array
                      items:
                        type: object
                        properties:
                          columns:
                            type: array
                            items:
                              type: object
                              properties:
                                description:
                                  type: string
                                  example: Customer ID is a unique key across tables
                                title:
                                  type: string
                                  example: Customer ID
                            example:
                              - description: Customer ID is a unique key across tables
                                title: Customer ID
                              - description: City
                                title: City
                              - description: Country
                                title: Country
                              - description: The segment of the customer
                                title: Segment
                              - description: State
                                title: State
                              - description: Postal Code
                                title: Postal Code
                              - description: Region
                                title: Region
                          config:
                            type: object
                            properties:
                              type:
                                type: string
                                example: csv
                              url:
                                type: string
                                example: >-
                                  http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                          created_at:
                            type: string
                            example: "2023-09-01T11:39:30.716235+00:00"
                          id:
                            type: string
                            example: 44a3aa21-0181-46d9-a54b-af915aaec92e
                          last_updated_at:
                            type: string
                            example: "2023-09-01T11:40:13.644+00:00"
                          organisation:
                            type: string
                            example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          parameters:
                            type: array
                            items: {}
                            example: []
                          source:
                            type: string
                            example: file
                          title:
                            type: string
                            example: Customer data
                      example:
                        - columns:
                            - description: Customer ID is a unique key across tables
                              title: Customer ID
                            - description: City
                              title: City
                            - description: Country
                              title: Country
                            - description: The segment of the customer
                              title: Segment
                            - description: State
                              title: State
                            - description: Postal Code
                              title: Postal Code
                            - description: Region
                              title: Region
                          config:
                            type: csv
                            url: >-
                              http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                          created_at: "2023-09-01T11:39:30.716235+00:00"
                          id: 44a3aa21-0181-46d9-a54b-af915aaec92e
                          last_updated_at: "2023-09-01T11:40:13.644+00:00"
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          parameters: []
                          source: file
                          title: Customer data
                        - columns:
                            - description: Row ID
                              title: Row ID
                            - description: Order ID
                              title: Order ID
                            - description: Order Date
                              title: Order Date
                            - description: Ship Date
                              title: Ship Date
                            - description: Ship Mode
                              title: Ship Mode
                            - description: Customer ID
                              title: Customer ID
                            - description: Product ID
                              title: Product ID
                            - description: Category
                              title: Category
                            - description: Sub-Category
                              title: Sub-Category
                            - description: Product Name
                              title: Product Name
                            - description: Sales
                              title: Sales
                            - description: Quantity
                              title: Quantity
                            - description: Discount
                              title: Discount
                            - description: Profit
                              title: Profit
                          config:
                            type: csv
                            url: >-
                              http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:3f6aa55e-ba95-42e3-8a07-b4baceb0812d/Sample%20demo%20dataset%20-%20Sample%20Orders.csv
                          created_at: "2023-09-01T10:26:18.017866+00:00"
                          id: 74813926-d1ec-4b38-82e1-08d1820cb029
                          last_updated_at: "2023-09-06T15:17:27.333+00:00"
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          parameters: []
                          source: file
                          title: Order data
                    description:
                      type: string
                      example: Some description about the dashboard
                    id:
                      type: string
                      example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    last_updated_at:
                      type: string
                      example: "2023-09-07T14:51:42.626+00:00"
                    organisation:
                      type: string
                      example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parent_dashboard:
                      nullable: true
                      example: null
                    thumbnail:
                      type: string
                      example: >-
                        http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/dashboard:47b6e961-a51c-4bf3-a9d4-01f30215cc42/thumbnail.png
                    title:
                      type: string
                      example: Sample Dashboard
                    widgets:
                      type: array
                      items:
                        type: object
                        properties:
                          assumptions:
                            type: array
                            items:
                              type: string
                              example: >-
                                1. The total sales will be calculated from the
                                array with key
                                74813926-d1ec-4b38-82e1-08d1820cb029 as it
                                contains the 'Sales' field.
                            example:
                              - >-
                                1. The total sales will be calculated from the
                                array with key
                                74813926-d1ec-4b38-82e1-08d1820cb029 as it
                                contains the 'Sales' field.
                              - >-
                                2. The 'Sales' field is assumed to be in US
                                dollars.
                              - >-
                                3. The 'Sales' field is assumed to be a
                                numerical value, but it will be passed through
                                the validateNumber function to ensure it is a
                                usable number.
                              - >-
                                4. The 'Sales' field values will be summed up to
                                get the total sales.
                              - >-
                                5. The total sales value will be rounded to 2
                                decimal points using the toFixed(2) method.
                              - >-
                                6. The total sales value will be returned as a
                                single data point in the datasets.data array.
                              - >-
                                7. The datasets.label will be set to 'Total
                                Sales (USD)' to indicate the unit of the metric.
                              - >-
                                8. The type of chart in config will be set to
                                'metric' as per the user's request.
                          code:
                            type: string
                            example: |-
                              function main(data) {
                                  let totalSales = 0;
                                  data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                      totalSales += validateNumber(item['Sales']);
                                  });
                                  totalSales = totalSales.toFixed(2);

                                  return {
                                      type: 'metric',
                                      data: {
                                          datasets: [{
                                              data: [totalSales],
                                              label: 'Total Sales (USD)'
                                          }]
                                      },
                                      options: {
                                          responsive: true,
                                          maintainAspectRatio: false
                                      }
                                  };
                              }
                          dashboard:
                            type: string
                            example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h:
                            type: number
                            example: 1
                          id:
                            type: string
                            example: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                          organisation:
                            type: string
                            example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query:
                            type: string
                            example: >-
                              Show me a metric showing the total amount of sales
                              in US dollars. Round the final value to 2 decimal
                              points
                          title:
                            type: string
                            example: Total sales
                          w:
                            type: number
                            example: 4
                          x:
                            type: number
                            example: 4
                          "y":
                            type: number
                            example: 0
                      example:
                        - assumptions:
                            - >-
                              1. The total sales will be calculated from the
                              array with key
                              74813926-d1ec-4b38-82e1-08d1820cb029 as it
                              contains the 'Sales' field.
                            - >-
                              2. The 'Sales' field is assumed to be in US
                              dollars.
                            - >-
                              3. The 'Sales' field is assumed to be a numerical
                              value, but it will be passed through the
                              validateNumber function to ensure it is a usable
                              number.
                            - >-
                              4. The 'Sales' field values will be summed up to
                              get the total sales.
                            - >-
                              5. The total sales value will be rounded to 2
                              decimal points using the toFixed(2) method.
                            - >-
                              6. The total sales value will be returned as a
                              single data point in the datasets.data array.
                            - >-
                              7. The datasets.label will be set to 'Total Sales
                              (USD)' to indicate the unit of the metric.
                            - >-
                              8. The type of chart in config will be set to
                              'metric' as per the user's request.
                          code: |-
                            function main(data) {
                                let totalSales = 0;
                                data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                    totalSales += validateNumber(item['Sales']);
                                });
                                totalSales = totalSales.toFixed(2);

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalSales],
                                            label: 'Total Sales (USD)'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Show me a metric showing the total amount of sales
                            in US dollars. Round the final value to 2 decimal
                            points
                          title: Total sales
                          w: 4
                          x: 4
                          "y": 0
                        - assumptions:
                            - >-
                              1. The total customer to date is calculated by
                              counting the unique Customer IDs in the data.
                            - >-
                              2. The data for Customer IDs is assumed to be in
                              the array for key
                              44a3aa21-0181-46d9-a54b-af915aaec92e.
                            - >-
                              3. The function uses a Set to store unique
                              Customer IDs and then counts the size of the Set.
                            - >-
                              4. The chart type is set to 'metric' and the total
                              customer count is returned as a single data point.
                            - >-
                              5. The label for the data point is set to 'Total
                              Customers'.
                          code: |-
                            function main(data) {
                                const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                                const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                                const totalCustomers = uniqueCustomers.size;

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalCustomers],
                                            label: 'Total Customers'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: d38b4048-9a60-40e7-aead-62ba8227b7da
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: Create a metric showing the total customer to date
                          title: Total customers
                          w: 4
                          x: 0
                          "y": 0
                        - assumptions: []
                          code: |-
                            function main(data) {
                                let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                                let salesPerMonth = {};

                                salesData.forEach(sale => {
                                    let date = new Date(sale['Order Date']);
                                    let year = date.getFullYear();
                                    let month = date.getMonth();

                                    if (!salesPerMonth[year]) {
                                        salesPerMonth[year] = Array(12).fill(0);
                                    }

                                    salesPerMonth[year][month] += validateNumber(sale['Sales']);
                                });

                                let datasets = [];
                                for (let year in salesPerMonth) {
                                    datasets.push({
                                        label: year,
                                        data: salesPerMonth[year],
                                        fill: false,
                                        borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                    });
                                }

                                return {
                                    type: 'line',
                                    data: {
                                        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                        datasets: datasets
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false,
                                        scales: {
                                            xAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Month'
                                                }
                                            }],
                                            yAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Sales'
                                                }
                                            }]
                                        }
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 3
                          id: 05f28a95-7cf5-488f-ac52-736536b3594e
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Show me the sales per month as a line chart. Each
                            line should show the sales for a year.
                          title: Sales per month as a line chart
                          w: 6
                          x: 6
                          "y": 1
                        - assumptions:
                            - >-
                              1. The user wants to know the total number of
                              orders to date.
                            - >-
                              2. The 'Order ID' field from the array with key
                              '74813926-d1ec-4b38-82e1-08d1820cb029' will be
                              used to count the number of orders.
                            - >-
                              3. The 'Order Date' field will be used to filter
                              the orders up to the current date.
                            - >-
                              4. The 'Customer ID' field will be used to match
                              the data from both arrays.
                            - >-
                              5. The validateNumber function will be used to
                              ensure the 'Order ID' is a valid number before
                              counting.
                            - >-
                              6. The chart type will be set to 'metric' as per
                              the user's request.
                            - >-
                              7. The chart will display a single data point
                              representing the total number of orders to date.
                            - >-
                              8. The label for the data point will be 'Total
                              Orders'.
                          code: |-
                            function main(data) {
                                let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                                let currentDate = new Date();
                                let totalOrders = 0;

                                for (let i = 0; i < orders.length; i++) {
                                    let orderDate = new Date(orders[i]['Order Date']);
                                    if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                        totalOrders++;
                                    }
                                }

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalOrders],
                                            label: 'Total Orders'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false,
                                        scales: {
                                            xAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Orders'
                                                }
                                            }],
                                            yAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Count'
                                                }
                                            }]
                                        }
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: Show me a metric for how many orders I have to date
                          title: Total orders
                          w: 4
                          x: 8
                          "y": 0
                        - assumptions: []
                          code: |-
                            function main(data) {
                                // Extract the arrays from the data object
                                const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                                const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                                // Create a map to store the total sales volume for each state
                                const stateSales = new Map();

                                // Iterate over the sales data
                                for (let i = 0; i < salesData.length; i++) {
                                    // Find the corresponding customer data
                                    const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                    // If the customer data is found and the state is not yet in the map, add it
                                    if (customer && !stateSales.has(customer.State)) {
                                        stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                    }
                                    // If the state is already in the map, add the sales volume to the existing value
                                    else if (customer) {
                                        stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                    }
                                }

                                // Convert the map to an array and sort it in descending order by sales volume
                                const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                                // Limit the data to the top 5 states
                                const topStates = sortedStates.slice(0, 5);

                                // Create the data for the chart
                                const chartData = {
                                    labels: topStates.map(s => s[0]),
                                    datasets: [{
                                        label: 'Sales Volume',
                                        data: topStates.map(s => s[1]),
                                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                        borderColor: 'rgba(75, 192, 192, 1)',
                                        borderWidth: 1
                                    }]
                                };

                                // Create the options for the chart
                                const chartOptions = {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    scales: {
                                        yAxes: [{
                                            ticks: {
                                                beginAtZero: true
                                            },
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Sales Volume'
                                            }
                                        }],
                                        xAxes: [{
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'State'
                                            }
                                        }]
                                    }
                                };

                                // Return the chart configuration
                                return {
                                    type: 'bar',
                                    data: chartData,
                                    options: chartOptions
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 3
                          id: 5734dba1-4392-4128-8deb-058b7f6517fe
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Create a chart showing the top 5 states by sales
                            volume
                          title: Top 5 states by sales volume
                          w: 6
                          x: 0
                          "y": 1
                example:
                  - created_at: "2023-09-01T11:14:50.430891+00:00"
                    datasources:
                      - columns:
                          - description: Customer ID is a unique key across tables
                            title: Customer ID
                          - description: City
                            title: City
                          - description: Country
                            title: Country
                          - description: The segment of the customer
                            title: Segment
                          - description: State
                            title: State
                          - description: Postal Code
                            title: Postal Code
                          - description: Region
                            title: Region
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                        created_at: "2023-09-01T11:39:30.716235+00:00"
                        id: 44a3aa21-0181-46d9-a54b-af915aaec92e
                        last_updated_at: "2023-09-01T11:40:13.644+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Customer data
                      - columns:
                          - description: Row ID
                            title: Row ID
                          - description: Order ID
                            title: Order ID
                          - description: Order Date
                            title: Order Date
                          - description: Ship Date
                            title: Ship Date
                          - description: Ship Mode
                            title: Ship Mode
                          - description: Customer ID
                            title: Customer ID
                          - description: Product ID
                            title: Product ID
                          - description: Category
                            title: Category
                          - description: Sub-Category
                            title: Sub-Category
                          - description: Product Name
                            title: Product Name
                          - description: Sales
                            title: Sales
                          - description: Quantity
                            title: Quantity
                          - description: Discount
                            title: Discount
                          - description: Profit
                            title: Profit
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:3f6aa55e-ba95-42e3-8a07-b4baceb0812d/Sample%20demo%20dataset%20-%20Sample%20Orders.csv
                        created_at: "2023-09-01T10:26:18.017866+00:00"
                        id: 74813926-d1ec-4b38-82e1-08d1820cb029
                        last_updated_at: "2023-09-06T15:17:27.333+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Order data
                    description: Some description about the dashboard
                    id: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    last_updated_at: "2023-09-07T14:51:42.626+00:00"
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parent_dashboard: null
                    thumbnail: >-
                      http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/dashboard:47b6e961-a51c-4bf3-a9d4-01f30215cc42/thumbnail.png
                    title: Sample Dashboard
                    widgets:
                      - assumptions:
                          - >-
                            1. The total sales will be calculated from the array
                            with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                            contains the 'Sales' field.
                          - 2. The 'Sales' field is assumed to be in US dollars.
                          - >-
                            3. The 'Sales' field is assumed to be a numerical
                            value, but it will be passed through the
                            validateNumber function to ensure it is a usable
                            number.
                          - >-
                            4. The 'Sales' field values will be summed up to get
                            the total sales.
                          - >-
                            5. The total sales value will be rounded to 2
                            decimal points using the toFixed(2) method.
                          - >-
                            6. The total sales value will be returned as a
                            single data point in the datasets.data array.
                          - >-
                            7. The datasets.label will be set to 'Total Sales
                            (USD)' to indicate the unit of the metric.
                          - >-
                            8. The type of chart in config will be set to
                            'metric' as per the user's request.
                        code: |-
                          function main(data) {
                              let totalSales = 0;
                              data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                  totalSales += validateNumber(item['Sales']);
                              });
                              totalSales = totalSales.toFixed(2);

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalSales],
                                          label: 'Total Sales (USD)'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me a metric showing the total amount of sales in
                          US dollars. Round the final value to 2 decimal points
                        title: Total sales
                        w: 4
                        x: 4
                        "y": 0
                      - assumptions:
                          - >-
                            1. The total customer to date is calculated by
                            counting the unique Customer IDs in the data.
                          - >-
                            2. The data for Customer IDs is assumed to be in the
                            array for key 44a3aa21-0181-46d9-a54b-af915aaec92e.
                          - >-
                            3. The function uses a Set to store unique Customer
                            IDs and then counts the size of the Set.
                          - >-
                            4. The chart type is set to 'metric' and the total
                            customer count is returned as a single data point.
                          - >-
                            5. The label for the data point is set to 'Total
                            Customers'.
                        code: |-
                          function main(data) {
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                              const totalCustomers = uniqueCustomers.size;

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalCustomers],
                                          label: 'Total Customers'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: d38b4048-9a60-40e7-aead-62ba8227b7da
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Create a metric showing the total customer to date
                        title: Total customers
                        w: 4
                        x: 0
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let salesPerMonth = {};

                              salesData.forEach(sale => {
                                  let date = new Date(sale['Order Date']);
                                  let year = date.getFullYear();
                                  let month = date.getMonth();

                                  if (!salesPerMonth[year]) {
                                      salesPerMonth[year] = Array(12).fill(0);
                                  }

                                  salesPerMonth[year][month] += validateNumber(sale['Sales']);
                              });

                              let datasets = [];
                              for (let year in salesPerMonth) {
                                  datasets.push({
                                      label: year,
                                      data: salesPerMonth[year],
                                      fill: false,
                                      borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                  });
                              }

                              return {
                                  type: 'line',
                                  data: {
                                      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                      datasets: datasets
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Month'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Sales'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 05f28a95-7cf5-488f-ac52-736536b3594e
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me the sales per month as a line chart. Each line
                          should show the sales for a year.
                        title: Sales per month as a line chart
                        w: 6
                        x: 6
                        "y": 1
                      - assumptions:
                          - >-
                            1. The user wants to know the total number of orders
                            to date.
                          - >-
                            2. The 'Order ID' field from the array with key
                            '74813926-d1ec-4b38-82e1-08d1820cb029' will be used
                            to count the number of orders.
                          - >-
                            3. The 'Order Date' field will be used to filter the
                            orders up to the current date.
                          - >-
                            4. The 'Customer ID' field will be used to match the
                            data from both arrays.
                          - >-
                            5. The validateNumber function will be used to
                            ensure the 'Order ID' is a valid number before
                            counting.
                          - >-
                            6. The chart type will be set to 'metric' as per the
                            user's request.
                          - >-
                            7. The chart will display a single data point
                            representing the total number of orders to date.
                          - >-
                            8. The label for the data point will be 'Total
                            Orders'.
                        code: |-
                          function main(data) {
                              let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let currentDate = new Date();
                              let totalOrders = 0;

                              for (let i = 0; i < orders.length; i++) {
                                  let orderDate = new Date(orders[i]['Order Date']);
                                  if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                      totalOrders++;
                                  }
                              }

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalOrders],
                                          label: 'Total Orders'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Orders'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Count'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Show me a metric for how many orders I have to date
                        title: Total orders
                        w: 4
                        x: 8
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              // Extract the arrays from the data object
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                              // Create a map to store the total sales volume for each state
                              const stateSales = new Map();

                              // Iterate over the sales data
                              for (let i = 0; i < salesData.length; i++) {
                                  // Find the corresponding customer data
                                  const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                  // If the customer data is found and the state is not yet in the map, add it
                                  if (customer && !stateSales.has(customer.State)) {
                                      stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                  }
                                  // If the state is already in the map, add the sales volume to the existing value
                                  else if (customer) {
                                      stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                  }
                              }

                              // Convert the map to an array and sort it in descending order by sales volume
                              const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                              // Limit the data to the top 5 states
                              const topStates = sortedStates.slice(0, 5);

                              // Create the data for the chart
                              const chartData = {
                                  labels: topStates.map(s => s[0]),
                                  datasets: [{
                                      label: 'Sales Volume',
                                      data: topStates.map(s => s[1]),
                                      backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                      borderColor: 'rgba(75, 192, 192, 1)',
                                      borderWidth: 1
                                  }]
                              };

                              // Create the options for the chart
                              const chartOptions = {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      yAxes: [{
                                          ticks: {
                                              beginAtZero: true
                                          },
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Sales Volume'
                                          }
                                      }],
                                      xAxes: [{
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'State'
                                          }
                                      }]
                                  }
                              };

                              // Return the chart configuration
                              return {
                                  type: 'bar',
                                  data: chartData,
                                  options: chartOptions
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 5734dba1-4392-4128-8deb-058b7f6517fe
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Create a chart showing the top 5 states by sales
                          volume
                        title: Top 5 states by sales volume
                        w: 6
                        x: 0
                        "y": 1
              examples:
                Success:
                  value:
                    - created_at: "2023-09-01T11:14:50.430891+00:00"
                      datasources:
                        - columns:
                            - description: Customer ID is a unique key across tables
                              title: Customer ID
                            - description: City
                              title: City
                            - description: Country
                              title: Country
                            - description: The segment of the customer
                              title: Segment
                            - description: State
                              title: State
                            - description: Postal Code
                              title: Postal Code
                            - description: Region
                              title: Region
                          config:
                            type: csv
                            url: >-
                              http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                          created_at: "2023-09-01T11:39:30.716235+00:00"
                          id: 44a3aa21-0181-46d9-a54b-af915aaec92e
                          last_updated_at: "2023-09-01T11:40:13.644+00:00"
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          parameters: []
                          source: file
                          title: Customer data
                        - columns:
                            - description: Row ID
                              title: Row ID
                            - description: Order ID
                              title: Order ID
                            - description: Order Date
                              title: Order Date
                            - description: Ship Date
                              title: Ship Date
                            - description: Ship Mode
                              title: Ship Mode
                            - description: Customer ID
                              title: Customer ID
                            - description: Product ID
                              title: Product ID
                            - description: Category
                              title: Category
                            - description: Sub-Category
                              title: Sub-Category
                            - description: Product Name
                              title: Product Name
                            - description: Sales
                              title: Sales
                            - description: Quantity
                              title: Quantity
                            - description: Discount
                              title: Discount
                            - description: Profit
                              title: Profit
                          config:
                            type: csv
                            url: >-
                              http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:3f6aa55e-ba95-42e3-8a07-b4baceb0812d/Sample%20demo%20dataset%20-%20Sample%20Orders.csv
                          created_at: "2023-09-01T10:26:18.017866+00:00"
                          id: 74813926-d1ec-4b38-82e1-08d1820cb029
                          last_updated_at: "2023-09-06T15:17:27.333+00:00"
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          parameters: []
                          source: file
                          title: Order data
                      description: Some description about the dashboard
                      id: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      last_updated_at: "2023-09-07T14:51:42.626+00:00"
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      parent_dashboard: null
                      thumbnail: >-
                        http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/dashboard:47b6e961-a51c-4bf3-a9d4-01f30215cc42/thumbnail.png
                      title: Sample Dashboard
                      widgets:
                        - assumptions:
                            - >-
                              1. The total sales will be calculated from the
                              array with key
                              74813926-d1ec-4b38-82e1-08d1820cb029 as it
                              contains the 'Sales' field.
                            - >-
                              2. The 'Sales' field is assumed to be in US
                              dollars.
                            - >-
                              3. The 'Sales' field is assumed to be a numerical
                              value, but it will be passed through the
                              validateNumber function to ensure it is a usable
                              number.
                            - >-
                              4. The 'Sales' field values will be summed up to
                              get the total sales.
                            - >-
                              5. The total sales value will be rounded to 2
                              decimal points using the toFixed(2) method.
                            - >-
                              6. The total sales value will be returned as a
                              single data point in the datasets.data array.
                            - >-
                              7. The datasets.label will be set to 'Total Sales
                              (USD)' to indicate the unit of the metric.
                            - >-
                              8. The type of chart in config will be set to
                              'metric' as per the user's request.
                          code: |-
                            function main(data) {
                                let totalSales = 0;
                                data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                    totalSales += validateNumber(item['Sales']);
                                });
                                totalSales = totalSales.toFixed(2);

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalSales],
                                            label: 'Total Sales (USD)'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Show me a metric showing the total amount of sales
                            in US dollars. Round the final value to 2 decimal
                            points
                          title: Total sales
                          w: 4
                          x: 4
                          "y": 0
                        - assumptions:
                            - >-
                              1. The total customer to date is calculated by
                              counting the unique Customer IDs in the data.
                            - >-
                              2. The data for Customer IDs is assumed to be in
                              the array for key
                              44a3aa21-0181-46d9-a54b-af915aaec92e.
                            - >-
                              3. The function uses a Set to store unique
                              Customer IDs and then counts the size of the Set.
                            - >-
                              4. The chart type is set to 'metric' and the total
                              customer count is returned as a single data point.
                            - >-
                              5. The label for the data point is set to 'Total
                              Customers'.
                          code: |-
                            function main(data) {
                                const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                                const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                                const totalCustomers = uniqueCustomers.size;

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalCustomers],
                                            label: 'Total Customers'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: d38b4048-9a60-40e7-aead-62ba8227b7da
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: Create a metric showing the total customer to date
                          title: Total customers
                          w: 4
                          x: 0
                          "y": 0
                        - assumptions: []
                          code: |-
                            function main(data) {
                                let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                                let salesPerMonth = {};

                                salesData.forEach(sale => {
                                    let date = new Date(sale['Order Date']);
                                    let year = date.getFullYear();
                                    let month = date.getMonth();

                                    if (!salesPerMonth[year]) {
                                        salesPerMonth[year] = Array(12).fill(0);
                                    }

                                    salesPerMonth[year][month] += validateNumber(sale['Sales']);
                                });

                                let datasets = [];
                                for (let year in salesPerMonth) {
                                    datasets.push({
                                        label: year,
                                        data: salesPerMonth[year],
                                        fill: false,
                                        borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                    });
                                }

                                return {
                                    type: 'line',
                                    data: {
                                        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                        datasets: datasets
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false,
                                        scales: {
                                            xAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Month'
                                                }
                                            }],
                                            yAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Sales'
                                                }
                                            }]
                                        }
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 3
                          id: 05f28a95-7cf5-488f-ac52-736536b3594e
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Show me the sales per month as a line chart. Each
                            line should show the sales for a year.
                          title: Sales per month as a line chart
                          w: 6
                          x: 6
                          "y": 1
                        - assumptions:
                            - >-
                              1. The user wants to know the total number of
                              orders to date.
                            - >-
                              2. The 'Order ID' field from the array with key
                              '74813926-d1ec-4b38-82e1-08d1820cb029' will be
                              used to count the number of orders.
                            - >-
                              3. The 'Order Date' field will be used to filter
                              the orders up to the current date.
                            - >-
                              4. The 'Customer ID' field will be used to match
                              the data from both arrays.
                            - >-
                              5. The validateNumber function will be used to
                              ensure the 'Order ID' is a valid number before
                              counting.
                            - >-
                              6. The chart type will be set to 'metric' as per
                              the user's request.
                            - >-
                              7. The chart will display a single data point
                              representing the total number of orders to date.
                            - >-
                              8. The label for the data point will be 'Total
                              Orders'.
                          code: |-
                            function main(data) {
                                let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                                let currentDate = new Date();
                                let totalOrders = 0;

                                for (let i = 0; i < orders.length; i++) {
                                    let orderDate = new Date(orders[i]['Order Date']);
                                    if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                        totalOrders++;
                                    }
                                }

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalOrders],
                                            label: 'Total Orders'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false,
                                        scales: {
                                            xAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Orders'
                                                }
                                            }],
                                            yAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Count'
                                                }
                                            }]
                                        }
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: Show me a metric for how many orders I have to date
                          title: Total orders
                          w: 4
                          x: 8
                          "y": 0
                        - assumptions: []
                          code: |-
                            function main(data) {
                                // Extract the arrays from the data object
                                const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                                const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                                // Create a map to store the total sales volume for each state
                                const stateSales = new Map();

                                // Iterate over the sales data
                                for (let i = 0; i < salesData.length; i++) {
                                    // Find the corresponding customer data
                                    const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                    // If the customer data is found and the state is not yet in the map, add it
                                    if (customer && !stateSales.has(customer.State)) {
                                        stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                    }
                                    // If the state is already in the map, add the sales volume to the existing value
                                    else if (customer) {
                                        stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                    }
                                }

                                // Convert the map to an array and sort it in descending order by sales volume
                                const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                                // Limit the data to the top 5 states
                                const topStates = sortedStates.slice(0, 5);

                                // Create the data for the chart
                                const chartData = {
                                    labels: topStates.map(s => s[0]),
                                    datasets: [{
                                        label: 'Sales Volume',
                                        data: topStates.map(s => s[1]),
                                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                        borderColor: 'rgba(75, 192, 192, 1)',
                                        borderWidth: 1
                                    }]
                                };

                                // Create the options for the chart
                                const chartOptions = {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    scales: {
                                        yAxes: [{
                                            ticks: {
                                                beginAtZero: true
                                            },
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Sales Volume'
                                            }
                                        }],
                                        xAxes: [{
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'State'
                                            }
                                        }]
                                    }
                                };

                                // Return the chart configuration
                                return {
                                    type: 'bar',
                                    data: chartData,
                                    options: chartOptions
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 3
                          id: 5734dba1-4392-4128-8deb-058b7f6517fe
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Create a chart showing the top 5 states by sales
                            volume
                          title: Top 5 states by sales volume
                          w: 6
                          x: 0
                          "y": 1
    put:
      tags:
        - Dashboards
      summary: Create dashboard
      description: >-
        This endpoint creates a new dashboard. Minumum requirements are the
        title, description and the thumbnail
      operationId: createDashboard
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                thumbnail:
                  type: string
                  example: >-
                    https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                title:
                  type: string
                  example: Untitled Dashboard
            examples:
              Create dashboard:
                value:
                  description: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                  thumbnail: >-
                    https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                  title: Untitled Dashboard
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 06:27:01 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2023-09-08T06:27:01.524552+00:00"
                  description:
                    type: string
                    example: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                  id:
                    type: string
                    example: d1f04fea-9ef7-4a68-a30e-a0e1d3462006
                  last_updated_at:
                    type: string
                    example: "2023-09-08T06:27:01.524552+00:00"
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  parent_dashboard:
                    nullable: true
                    example: null
                  thumbnail:
                    type: string
                    example: >-
                      https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                  title:
                    type: string
                    example: Untitled Dashboard
              examples:
                Success:
                  value:
                    created_at: "2023-09-08T06:27:01.524552+00:00"
                    description: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                    id: d1f04fea-9ef7-4a68-a30e-a0e1d3462006
                    last_updated_at: "2023-09-08T06:27:01.524552+00:00"
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parent_dashboard: null
                    thumbnail: >-
                      https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                    title: Untitled Dashboard
  /api/dashboards/{id}:
    get:
      tags:
        - Dashboards
      summary: Get dashboard by id
      description: Get dashboard by id
      operationId: getDashboardById
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:29:41 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2023-09-01T11:14:50.430891+00:00"
                  datasources:
                    type: array
                    items:
                      type: object
                      properties:
                        columns:
                          type: array
                          items:
                            type: object
                            properties:
                              description:
                                type: string
                                example: Customer ID is a unique key across tables
                              title:
                                type: string
                                example: Customer ID
                          example:
                            - description: Customer ID is a unique key across tables
                              title: Customer ID
                            - description: City
                              title: City
                            - description: Country
                              title: Country
                            - description: The segment of the customer
                              title: Segment
                            - description: State
                              title: State
                            - description: Postal Code
                              title: Postal Code
                            - description: Region
                              title: Region
                        config:
                          type: object
                          properties:
                            type:
                              type: string
                              example: csv
                            url:
                              type: string
                              example: >-
                                http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                        created_at:
                          type: string
                          example: "2023-09-01T11:39:30.716235+00:00"
                        id:
                          type: string
                          example: 44a3aa21-0181-46d9-a54b-af915aaec92e
                        last_updated_at:
                          type: string
                          example: "2023-09-01T11:40:13.644+00:00"
                        organisation:
                          type: string
                          example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters:
                          type: array
                          items: {}
                          example: []
                        source:
                          type: string
                          example: file
                        title:
                          type: string
                          example: Customer data
                    example:
                      - columns:
                          - description: Customer ID is a unique key across tables
                            title: Customer ID
                          - description: City
                            title: City
                          - description: Country
                            title: Country
                          - description: The segment of the customer
                            title: Segment
                          - description: State
                            title: State
                          - description: Postal Code
                            title: Postal Code
                          - description: Region
                            title: Region
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                        created_at: "2023-09-01T11:39:30.716235+00:00"
                        id: 44a3aa21-0181-46d9-a54b-af915aaec92e
                        last_updated_at: "2023-09-01T11:40:13.644+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Customer data
                      - columns:
                          - description: Row ID
                            title: Row ID
                          - description: Order ID
                            title: Order ID
                          - description: Order Date
                            title: Order Date
                          - description: Ship Date
                            title: Ship Date
                          - description: Ship Mode
                            title: Ship Mode
                          - description: Customer ID
                            title: Customer ID
                          - description: Product ID
                            title: Product ID
                          - description: Category
                            title: Category
                          - description: Sub-Category
                            title: Sub-Category
                          - description: Product Name
                            title: Product Name
                          - description: Sales
                            title: Sales
                          - description: Quantity
                            title: Quantity
                          - description: Discount
                            title: Discount
                          - description: Profit
                            title: Profit
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:3f6aa55e-ba95-42e3-8a07-b4baceb0812d/Sample%20demo%20dataset%20-%20Sample%20Orders.csv
                        created_at: "2023-09-01T10:26:18.017866+00:00"
                        id: 74813926-d1ec-4b38-82e1-08d1820cb029
                        last_updated_at: "2023-09-06T15:17:27.333+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Order data
                  description:
                    type: string
                    example: Some description about the dashboard
                  id:
                    type: string
                    example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                  last_updated_at:
                    type: string
                    example: "2023-09-07T14:51:42.626+00:00"
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  parent_dashboard:
                    nullable: true
                    example: null
                  thumbnail:
                    type: string
                    example: >-
                      http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/dashboard:47b6e961-a51c-4bf3-a9d4-01f30215cc42/thumbnail.png
                  title:
                    type: string
                    example: Sample Dashboard
                  widgets:
                    type: array
                    items:
                      type: object
                      properties:
                        assumptions:
                          type: array
                          items:
                            type: string
                            example: >-
                              1. The total sales will be calculated from the
                              array with key
                              74813926-d1ec-4b38-82e1-08d1820cb029 as it
                              contains the 'Sales' field.
                          example:
                            - >-
                              1. The total sales will be calculated from the
                              array with key
                              74813926-d1ec-4b38-82e1-08d1820cb029 as it
                              contains the 'Sales' field.
                            - >-
                              2. The 'Sales' field is assumed to be in US
                              dollars.
                            - >-
                              3. The 'Sales' field is assumed to be a numerical
                              value, but it will be passed through the
                              validateNumber function to ensure it is a usable
                              number.
                            - >-
                              4. The 'Sales' field values will be summed up to
                              get the total sales.
                            - >-
                              5. The total sales value will be rounded to 2
                              decimal points using the toFixed(2) method.
                            - >-
                              6. The total sales value will be returned as a
                              single data point in the datasets.data array.
                            - >-
                              7. The datasets.label will be set to 'Total Sales
                              (USD)' to indicate the unit of the metric.
                            - >-
                              8. The type of chart in config will be set to
                              'metric' as per the user's request.
                        code:
                          type: string
                          example: |-
                            function main(data) {
                                let totalSales = 0;
                                data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                    totalSales += validateNumber(item['Sales']);
                                });
                                totalSales = totalSales.toFixed(2);

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalSales],
                                            label: 'Total Sales (USD)'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false
                                    }
                                };
                            }
                        dashboard:
                          type: string
                          example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h:
                          type: number
                          example: 1
                        id:
                          type: string
                          example: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                        organisation:
                          type: string
                          example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query:
                          type: string
                          example: >-
                            Show me a metric showing the total amount of sales
                            in US dollars. Round the final value to 2 decimal
                            points
                        title:
                          type: string
                          example: Total sales
                        w:
                          type: number
                          example: 4
                        x:
                          type: number
                          example: 4
                        "y":
                          type: number
                          example: 0
                    example:
                      - assumptions:
                          - >-
                            1. The total sales will be calculated from the array
                            with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                            contains the 'Sales' field.
                          - 2. The 'Sales' field is assumed to be in US dollars.
                          - >-
                            3. The 'Sales' field is assumed to be a numerical
                            value, but it will be passed through the
                            validateNumber function to ensure it is a usable
                            number.
                          - >-
                            4. The 'Sales' field values will be summed up to get
                            the total sales.
                          - >-
                            5. The total sales value will be rounded to 2
                            decimal points using the toFixed(2) method.
                          - >-
                            6. The total sales value will be returned as a
                            single data point in the datasets.data array.
                          - >-
                            7. The datasets.label will be set to 'Total Sales
                            (USD)' to indicate the unit of the metric.
                          - >-
                            8. The type of chart in config will be set to
                            'metric' as per the user's request.
                        code: |-
                          function main(data) {
                              let totalSales = 0;
                              data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                  totalSales += validateNumber(item['Sales']);
                              });
                              totalSales = totalSales.toFixed(2);

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalSales],
                                          label: 'Total Sales (USD)'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me a metric showing the total amount of sales in
                          US dollars. Round the final value to 2 decimal points
                        title: Total sales
                        w: 4
                        x: 4
                        "y": 0
                      - assumptions:
                          - >-
                            1. The total customer to date is calculated by
                            counting the unique Customer IDs in the data.
                          - >-
                            2. The data for Customer IDs is assumed to be in the
                            array for key 44a3aa21-0181-46d9-a54b-af915aaec92e.
                          - >-
                            3. The function uses a Set to store unique Customer
                            IDs and then counts the size of the Set.
                          - >-
                            4. The chart type is set to 'metric' and the total
                            customer count is returned as a single data point.
                          - >-
                            5. The label for the data point is set to 'Total
                            Customers'.
                        code: |-
                          function main(data) {
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                              const totalCustomers = uniqueCustomers.size;

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalCustomers],
                                          label: 'Total Customers'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: d38b4048-9a60-40e7-aead-62ba8227b7da
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Create a metric showing the total customer to date
                        title: Total customers
                        w: 4
                        x: 0
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let salesPerMonth = {};

                              salesData.forEach(sale => {
                                  let date = new Date(sale['Order Date']);
                                  let year = date.getFullYear();
                                  let month = date.getMonth();

                                  if (!salesPerMonth[year]) {
                                      salesPerMonth[year] = Array(12).fill(0);
                                  }

                                  salesPerMonth[year][month] += validateNumber(sale['Sales']);
                              });

                              let datasets = [];
                              for (let year in salesPerMonth) {
                                  datasets.push({
                                      label: year,
                                      data: salesPerMonth[year],
                                      fill: false,
                                      borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                  });
                              }

                              return {
                                  type: 'line',
                                  data: {
                                      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                      datasets: datasets
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Month'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Sales'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 05f28a95-7cf5-488f-ac52-736536b3594e
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me the sales per month as a line chart. Each line
                          should show the sales for a year.
                        title: Sales per month as a line chart
                        w: 6
                        x: 6
                        "y": 1
                      - assumptions:
                          - >-
                            1. The user wants to know the total number of orders
                            to date.
                          - >-
                            2. The 'Order ID' field from the array with key
                            '74813926-d1ec-4b38-82e1-08d1820cb029' will be used
                            to count the number of orders.
                          - >-
                            3. The 'Order Date' field will be used to filter the
                            orders up to the current date.
                          - >-
                            4. The 'Customer ID' field will be used to match the
                            data from both arrays.
                          - >-
                            5. The validateNumber function will be used to
                            ensure the 'Order ID' is a valid number before
                            counting.
                          - >-
                            6. The chart type will be set to 'metric' as per the
                            user's request.
                          - >-
                            7. The chart will display a single data point
                            representing the total number of orders to date.
                          - >-
                            8. The label for the data point will be 'Total
                            Orders'.
                        code: |-
                          function main(data) {
                              let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let currentDate = new Date();
                              let totalOrders = 0;

                              for (let i = 0; i < orders.length; i++) {
                                  let orderDate = new Date(orders[i]['Order Date']);
                                  if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                      totalOrders++;
                                  }
                              }

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalOrders],
                                          label: 'Total Orders'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Orders'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Count'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Show me a metric for how many orders I have to date
                        title: Total orders
                        w: 4
                        x: 8
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              // Extract the arrays from the data object
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                              // Create a map to store the total sales volume for each state
                              const stateSales = new Map();

                              // Iterate over the sales data
                              for (let i = 0; i < salesData.length; i++) {
                                  // Find the corresponding customer data
                                  const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                  // If the customer data is found and the state is not yet in the map, add it
                                  if (customer && !stateSales.has(customer.State)) {
                                      stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                  }
                                  // If the state is already in the map, add the sales volume to the existing value
                                  else if (customer) {
                                      stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                  }
                              }

                              // Convert the map to an array and sort it in descending order by sales volume
                              const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                              // Limit the data to the top 5 states
                              const topStates = sortedStates.slice(0, 5);

                              // Create the data for the chart
                              const chartData = {
                                  labels: topStates.map(s => s[0]),
                                  datasets: [{
                                      label: 'Sales Volume',
                                      data: topStates.map(s => s[1]),
                                      backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                      borderColor: 'rgba(75, 192, 192, 1)',
                                      borderWidth: 1
                                  }]
                              };

                              // Create the options for the chart
                              const chartOptions = {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      yAxes: [{
                                          ticks: {
                                              beginAtZero: true
                                          },
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Sales Volume'
                                          }
                                      }],
                                      xAxes: [{
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'State'
                                          }
                                      }]
                                  }
                              };

                              // Return the chart configuration
                              return {
                                  type: 'bar',
                                  data: chartData,
                                  options: chartOptions
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 5734dba1-4392-4128-8deb-058b7f6517fe
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Create a chart showing the top 5 states by sales
                          volume
                        title: Top 5 states by sales volume
                        w: 6
                        x: 0
                        "y": 1
              examples:
                Success:
                  value:
                    created_at: "2023-09-01T11:14:50.430891+00:00"
                    datasources:
                      - columns:
                          - description: Customer ID is a unique key across tables
                            title: Customer ID
                          - description: City
                            title: City
                          - description: Country
                            title: Country
                          - description: The segment of the customer
                            title: Segment
                          - description: State
                            title: State
                          - description: Postal Code
                            title: Postal Code
                          - description: Region
                            title: Region
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                        created_at: "2023-09-01T11:39:30.716235+00:00"
                        id: 44a3aa21-0181-46d9-a54b-af915aaec92e
                        last_updated_at: "2023-09-01T11:40:13.644+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Customer data
                      - columns:
                          - description: Row ID
                            title: Row ID
                          - description: Order ID
                            title: Order ID
                          - description: Order Date
                            title: Order Date
                          - description: Ship Date
                            title: Ship Date
                          - description: Ship Mode
                            title: Ship Mode
                          - description: Customer ID
                            title: Customer ID
                          - description: Product ID
                            title: Product ID
                          - description: Category
                            title: Category
                          - description: Sub-Category
                            title: Sub-Category
                          - description: Product Name
                            title: Product Name
                          - description: Sales
                            title: Sales
                          - description: Quantity
                            title: Quantity
                          - description: Discount
                            title: Discount
                          - description: Profit
                            title: Profit
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:3f6aa55e-ba95-42e3-8a07-b4baceb0812d/Sample%20demo%20dataset%20-%20Sample%20Orders.csv
                        created_at: "2023-09-01T10:26:18.017866+00:00"
                        id: 74813926-d1ec-4b38-82e1-08d1820cb029
                        last_updated_at: "2023-09-06T15:17:27.333+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Order data
                    description: Some description about the dashboard
                    id: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    last_updated_at: "2023-09-07T14:51:42.626+00:00"
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parent_dashboard: null
                    thumbnail: >-
                      http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/dashboard:47b6e961-a51c-4bf3-a9d4-01f30215cc42/thumbnail.png
                    title: Sample Dashboard
                    widgets:
                      - assumptions:
                          - >-
                            1. The total sales will be calculated from the array
                            with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                            contains the 'Sales' field.
                          - 2. The 'Sales' field is assumed to be in US dollars.
                          - >-
                            3. The 'Sales' field is assumed to be a numerical
                            value, but it will be passed through the
                            validateNumber function to ensure it is a usable
                            number.
                          - >-
                            4. The 'Sales' field values will be summed up to get
                            the total sales.
                          - >-
                            5. The total sales value will be rounded to 2
                            decimal points using the toFixed(2) method.
                          - >-
                            6. The total sales value will be returned as a
                            single data point in the datasets.data array.
                          - >-
                            7. The datasets.label will be set to 'Total Sales
                            (USD)' to indicate the unit of the metric.
                          - >-
                            8. The type of chart in config will be set to
                            'metric' as per the user's request.
                        code: |-
                          function main(data) {
                              let totalSales = 0;
                              data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                  totalSales += validateNumber(item['Sales']);
                              });
                              totalSales = totalSales.toFixed(2);

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalSales],
                                          label: 'Total Sales (USD)'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me a metric showing the total amount of sales in
                          US dollars. Round the final value to 2 decimal points
                        title: Total sales
                        w: 4
                        x: 4
                        "y": 0
                      - assumptions:
                          - >-
                            1. The total customer to date is calculated by
                            counting the unique Customer IDs in the data.
                          - >-
                            2. The data for Customer IDs is assumed to be in the
                            array for key 44a3aa21-0181-46d9-a54b-af915aaec92e.
                          - >-
                            3. The function uses a Set to store unique Customer
                            IDs and then counts the size of the Set.
                          - >-
                            4. The chart type is set to 'metric' and the total
                            customer count is returned as a single data point.
                          - >-
                            5. The label for the data point is set to 'Total
                            Customers'.
                        code: |-
                          function main(data) {
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                              const totalCustomers = uniqueCustomers.size;

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalCustomers],
                                          label: 'Total Customers'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: d38b4048-9a60-40e7-aead-62ba8227b7da
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Create a metric showing the total customer to date
                        title: Total customers
                        w: 4
                        x: 0
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let salesPerMonth = {};

                              salesData.forEach(sale => {
                                  let date = new Date(sale['Order Date']);
                                  let year = date.getFullYear();
                                  let month = date.getMonth();

                                  if (!salesPerMonth[year]) {
                                      salesPerMonth[year] = Array(12).fill(0);
                                  }

                                  salesPerMonth[year][month] += validateNumber(sale['Sales']);
                              });

                              let datasets = [];
                              for (let year in salesPerMonth) {
                                  datasets.push({
                                      label: year,
                                      data: salesPerMonth[year],
                                      fill: false,
                                      borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                  });
                              }

                              return {
                                  type: 'line',
                                  data: {
                                      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                      datasets: datasets
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Month'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Sales'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 05f28a95-7cf5-488f-ac52-736536b3594e
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me the sales per month as a line chart. Each line
                          should show the sales for a year.
                        title: Sales per month as a line chart
                        w: 6
                        x: 6
                        "y": 1
                      - assumptions:
                          - >-
                            1. The user wants to know the total number of orders
                            to date.
                          - >-
                            2. The 'Order ID' field from the array with key
                            '74813926-d1ec-4b38-82e1-08d1820cb029' will be used
                            to count the number of orders.
                          - >-
                            3. The 'Order Date' field will be used to filter the
                            orders up to the current date.
                          - >-
                            4. The 'Customer ID' field will be used to match the
                            data from both arrays.
                          - >-
                            5. The validateNumber function will be used to
                            ensure the 'Order ID' is a valid number before
                            counting.
                          - >-
                            6. The chart type will be set to 'metric' as per the
                            user's request.
                          - >-
                            7. The chart will display a single data point
                            representing the total number of orders to date.
                          - >-
                            8. The label for the data point will be 'Total
                            Orders'.
                        code: |-
                          function main(data) {
                              let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let currentDate = new Date();
                              let totalOrders = 0;

                              for (let i = 0; i < orders.length; i++) {
                                  let orderDate = new Date(orders[i]['Order Date']);
                                  if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                      totalOrders++;
                                  }
                              }

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalOrders],
                                          label: 'Total Orders'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Orders'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Count'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Show me a metric for how many orders I have to date
                        title: Total orders
                        w: 4
                        x: 8
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              // Extract the arrays from the data object
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                              // Create a map to store the total sales volume for each state
                              const stateSales = new Map();

                              // Iterate over the sales data
                              for (let i = 0; i < salesData.length; i++) {
                                  // Find the corresponding customer data
                                  const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                  // If the customer data is found and the state is not yet in the map, add it
                                  if (customer && !stateSales.has(customer.State)) {
                                      stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                  }
                                  // If the state is already in the map, add the sales volume to the existing value
                                  else if (customer) {
                                      stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                  }
                              }

                              // Convert the map to an array and sort it in descending order by sales volume
                              const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                              // Limit the data to the top 5 states
                              const topStates = sortedStates.slice(0, 5);

                              // Create the data for the chart
                              const chartData = {
                                  labels: topStates.map(s => s[0]),
                                  datasets: [{
                                      label: 'Sales Volume',
                                      data: topStates.map(s => s[1]),
                                      backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                      borderColor: 'rgba(75, 192, 192, 1)',
                                      borderWidth: 1
                                  }]
                              };

                              // Create the options for the chart
                              const chartOptions = {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      yAxes: [{
                                          ticks: {
                                              beginAtZero: true
                                          },
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Sales Volume'
                                          }
                                      }],
                                      xAxes: [{
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'State'
                                          }
                                      }]
                                  }
                              };

                              // Return the chart configuration
                              return {
                                  type: 'bar',
                                  data: chartData,
                                  options: chartOptions
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 5734dba1-4392-4128-8deb-058b7f6517fe
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Create a chart showing the top 5 states by sales
                          volume
                        title: Top 5 states by sales volume
                        w: 6
                        x: 0
                        "y": 1
    post:
      tags:
        - Dashboards
      summary: Update dashboard by id
      description: Update dashboard by id
      operationId: updateDashboardById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: TESTING API
            examples:
              Update dashboard by id:
                value:
                  title: TESTING API
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:37:58 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2023-09-08T06:27:01.524552+00:00"
                  description:
                    type: string
                    example: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                  id:
                    type: string
                    example: d1f04fea-9ef7-4a68-a30e-a0e1d3462006
                  last_updated_at:
                    type: string
                    example: "2023-09-08T10:37:58.032+00:00"
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  parent_dashboard:
                    nullable: true
                    example: null
                  thumbnail:
                    type: string
                    example: >-
                      https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                  title:
                    type: string
                    example: TESTING API
              examples:
                Success:
                  value:
                    created_at: "2023-09-08T06:27:01.524552+00:00"
                    description: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                    id: d1f04fea-9ef7-4a68-a30e-a0e1d3462006
                    last_updated_at: "2023-09-08T10:37:58.032+00:00"
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parent_dashboard: null
                    thumbnail: >-
                      https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                    title: TESTING API
    delete:
      tags:
        - Dashboards
      summary: Delete dashboard by id
      description: Delete dashboard by id
      operationId: deleteDashboardById
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:33:54 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
              examples:
                Success:
                  value:
                    success: true
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: d1f04fea-9ef7-4a68-a30e-a0e1d3462006
  /api/embed-users:
    get:
      tags:
        - Embed Users
      summary: Get all embed users
      description: Get all embed users
      operationId: getAllEmbedUsers
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 15:13:01 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      type: string
                      example: "2024-01-23T13:32:33.333579+00:00"
                    email:
                      type: string
                      example: ronneldavis1996@gmail.com
                    id:
                      type: string
                      example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                    last_updated_at:
                      type: string
                      example: "2024-01-23T13:32:33.333579+00:00"
                    metadata:
                      type: object
                      properties:
                        hello:
                          type: string
                          example: world
                    name:
                      type: string
                      example: Ronnel Davis
                    team:
                      type: string
                      example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                example:
                  - created_at: "2024-01-23T13:32:33.333579+00:00"
                    email: ronneldavis1996@gmail.com
                    id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                    last_updated_at: "2024-01-23T13:32:33.333579+00:00"
                    metadata: {}
                    name: Ronnel Davis
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  - created_at: "2024-01-24T14:36:04.032105+00:00"
                    email: helleeo@eyworld.com
                    id: successfull
                    last_updated_at: "2024-01-24T14:36:04.032105+00:00"
                    metadata:
                      hello: world
                    name: TESTSTTS
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  - created_at: "2024-01-20T09:48:58.064312+00:00"
                    email: helleeo@eyworld.com
                    id: "123456"
                    last_updated_at: "2024-01-20T09:48:58.064312+00:00"
                    metadata:
                      hello: world
                    name: TESTSTTS
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
              examples:
                Success:
                  value:
                    - created_at: "2024-01-23T13:32:33.333579+00:00"
                      email: ronneldavis1996@gmail.com
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      last_updated_at: "2024-01-23T13:32:33.333579+00:00"
                      metadata: {}
                      name: Ronnel Davis
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    - created_at: "2024-01-24T14:36:04.032105+00:00"
                      email: helleeo@eyworld.com
                      id: successfull
                      last_updated_at: "2024-01-24T14:36:04.032105+00:00"
                      metadata:
                        hello: world
                      name: TESTSTTS
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    - created_at: "2024-01-20T09:48:58.064312+00:00"
                      email: helleeo@eyworld.com
                      id: "123456"
                      last_updated_at: "2024-01-20T09:48:58.064312+00:00"
                      metadata:
                        hello: world
                      name: TESTSTTS
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
    post:
      tags:
        - Embed Users
      summary: Upsert embed user
      description: Upsert embed user
      operationId: upsertEmbedUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: helleeo@eyworld.com
                id:
                  type: string
                  example: "123456"
                metadata:
                  type: object
                  properties:
                    hello:
                      type: string
                      example: world
                name:
                  type: string
                  example: TESTSTTS
            examples:
              Upsert embed user:
                value:
                  email: helleeo@eyworld.com
                  id: "123456"
                  metadata:
                    hello: world
                  name: TESTSTTS
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 14:38:20 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2024-01-20T09:48:58.064312+00:00"
                  email:
                    type: string
                    example: helleeo@eyworld.com
                  id:
                    type: string
                    example: "123456"
                  last_updated_at:
                    type: string
                    example: "2024-01-20T09:48:58.064312+00:00"
                  metadata:
                    type: object
                    properties:
                      hello:
                        type: string
                        example: world
                  name:
                    type: string
                    example: TESTSTTS
                  team:
                    type: string
                    example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
              examples:
                Success:
                  value:
                    created_at: "2024-01-20T09:48:58.064312+00:00"
                    email: helleeo@eyworld.com
                    id: "123456"
                    last_updated_at: "2024-01-20T09:48:58.064312+00:00"
                    metadata:
                      hello: world
                    name: TESTSTTS
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
  /api/embed-users/{id}/token:
    get:
      tags:
        - Embed Users
      summary: Get token for embed user by id
      description: Get token for embed user by id
      operationId: getTokenForEmbedUserById
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 14:41:19 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: >-
                      eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiYXV0aGVudGljYXRlZCIsImFwcF9tZXRhZGF0YSI6eyJkYXNoYm9hcmRzIjpbImY3MmU1MjhhLTc3MjItNGY2Ny05NDk5LTgwNmQ3NDcwMTk5MiJdfSwic3ViIjoiZWU1YjA4YzYtNTE2Ny00NDI1LWJiYzMtYTc0NmZlNGE3ZWFkLTEyMzQ1NiIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJpYXQiOjE3MDYxMDcyNzl9.ENx5LFmxJ-2x5WsPTS3dWj4hAASsk9tDC5oN4lPYHoU
                  user:
                    type: string
                    example: "123456"
              examples:
                Success:
                  value:
                    token: >-
                      eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiYXV0aGVudGljYXRlZCIsImFwcF9tZXRhZGF0YSI6eyJkYXNoYm9hcmRzIjpbImY3MmU1MjhhLTc3MjItNGY2Ny05NDk5LTgwNmQ3NDcwMTk5MiJdfSwic3ViIjoiZWU1YjA4YzYtNTE2Ny00NDI1LWJiYzMtYTc0NmZlNGE3ZWFkLTEyMzQ1NiIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJpYXQiOjE3MDYxMDcyNzl9.ENx5LFmxJ-2x5WsPTS3dWj4hAASsk9tDC5oN4lPYHoU
                    user: "123456"
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: "123456"
  /api/embed-users/{id}:
    get:
      tags:
        - Embed Users
      summary: Get embed user by id
      description: Get embed user by id
      operationId: getEmbedUserById
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 15:14:50 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2024-01-20T09:48:58.064312+00:00"
                  email:
                    type: string
                    example: helleeo@eyworld.com
                  id:
                    type: string
                    example: "123456"
                  last_updated_at:
                    type: string
                    example: "2024-01-20T09:48:58.064312+00:00"
                  metadata:
                    type: object
                    properties:
                      hello:
                        type: string
                        example: world
                  name:
                    type: string
                    example: TESTSTTS
                  team:
                    type: string
                    example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
              examples:
                Success:
                  value:
                    created_at: "2024-01-20T09:48:58.064312+00:00"
                    email: helleeo@eyworld.com
                    id: "123456"
                    last_updated_at: "2024-01-20T09:48:58.064312+00:00"
                    metadata:
                      hello: world
                    name: TESTSTTS
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
    delete:
      tags:
        - Embed Users
      summary: Delete embed user by id
      description: Delete embed user by id
      operationId: deleteEmbedUserById
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 15:15:54 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
              examples:
                Success:
                  value:
                    success: true
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: "123456"
  /api/datasources/{id}:
    get:
      tags:
        - Datasources
      summary: Get data source by id
      description: Get data source by id
      operationId: getDataSourceById
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 16:10:16 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  columns:
                    type: array
                    items:
                      type: object
                      properties:
                        description:
                          type: string
                          example: The date in the format 'D-Mon'
                        title:
                          type: string
                          example: Date
                    example:
                      - description: The date in the format 'D-Mon'
                        title: Date
                      - description: The name of the guest
                        title: Guest
                      - description: The phone number of the guest
                        title: Phone number
                      - description: The total number of nights stayed
                        title: Total nights
                      - description: >-
                          The confirmed amount in currency format (e.g.,
                          '3,880.00')
                        title: Confirmed Amt
                      - description: The GST amount in currency format (e.g., '200.00')
                        title: GST
                      - description: >-
                          The amount received by the bank in currency format
                          (e.g., '3,680.00')
                        title: Received by Bank
                  config:
                    type: string
                    example: >-
                      {"url":"http://localhost:54321/storage/v1/object/sign/data-sources/ee5b08c6-5167-4425-bbc3-a746fe4a7ead/datasource:30f1b94c-a03d-41aa-bb2a-bc94890f1926/Airbnb.csv?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJkYXRhLXNvdXJjZXMvZWU1YjA4YzYtNTE2Ny00NDI1LWJiYzMtYTc0NmZlNGE3ZWFkL2RhdGFzb3VyY2U6MzBmMWI5NGMtYTAzZC00MWFhLWJiMmEtYmM5NDg5MGYxOTI2L0FpcmJuYi5jc3YiLCJpYXQiOjE3MDU1MDkwNzgsImV4cCI6MTczNzA0NTA3OH0.kstAzDO6_pizKI8wQAvQkNCmHoVNzfiJjbcJtpHJ5vo","filename":"Airbnb.csv","type":"csv"}
                  created_at:
                    type: string
                    example: "2024-01-17T16:31:06.014144+00:00"
                  created_by:
                    type: string
                    example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                  description:
                    type: string
                    example: ""
                  id:
                    type: string
                    example: 30f1b94c-a03d-41aa-bb2a-bc94890f1926
                  last_updated_at:
                    type: string
                    example: "2024-01-17T16:31:28.528+00:00"
                  last_updated_by:
                    type: string
                    example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                  parameters:
                    type: string
                    example: "[]"
                  sample_data:
                    type: string
                    example: >-
                      [{"Date":"1-Jul","Guest":"Siddharth Manmdhan","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"6-Jul","Guest":"John Umman","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"8-Jul","Guest":"Irshad PP","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"9-Jul","Guest":"Avith M Lal","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,317.40","GST":"171.00","Received by Bank":"
                      \t3,146.40"},{"Date":"11-Jul","Guest":"Shams Nazar","Phone
                      number":"","Total nights":"2","Confirmed Amt":"
                      \t7,760.00","GST":"400.00","Received by Bank":"
                      \t7,360.00"},{"Date":"14-Jul","Guest":"Kevin
                      Thomas","Phone number":"","Total nights":"1","Confirmed
                      Amt":" \t3,317.40","GST":"171.00","Received by Bank":"
                      \t3,146.40"},{"Date":"15-Jul","Guest":"Kevin
                      Thomas","Phone number":"","Total nights":"1","Confirmed
                      Amt":" \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"16-Jul","Guest":"Anna Binu","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,298.00","GST":"170.00","Received by Bank":"
                      \t3,128.00"},{"Date":"18-Jul","Guest":"Faiza M","Phone
                      number":"","Total nights":"2","Confirmed Amt":"
                      \t7,760.00","GST":"400.00","Received by Bank":"
                      \t7,360.00"},{"Date":"22-Jul","Guest":"Prabhath CA","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"}]
                  size:
                    type: number
                    example: 4
                  source:
                    type: string
                    example: file
                  team:
                    type: string
                    example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  title:
                    type: string
                    example: File test
              examples:
                Success:
                  value:
                    columns:
                      - description: The date in the format 'D-Mon'
                        title: Date
                      - description: The name of the guest
                        title: Guest
                      - description: The phone number of the guest
                        title: Phone number
                      - description: The total number of nights stayed
                        title: Total nights
                      - description: >-
                          The confirmed amount in currency format (e.g.,
                          '3,880.00')
                        title: Confirmed Amt
                      - description: The GST amount in currency format (e.g., '200.00')
                        title: GST
                      - description: >-
                          The amount received by the bank in currency format
                          (e.g., '3,680.00')
                        title: Received by Bank
                    config: >-
                      {"url":"http://localhost:54321/storage/v1/object/sign/data-sources/ee5b08c6-5167-4425-bbc3-a746fe4a7ead/datasource:30f1b94c-a03d-41aa-bb2a-bc94890f1926/Airbnb.csv?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJkYXRhLXNvdXJjZXMvZWU1YjA4YzYtNTE2Ny00NDI1LWJiYzMtYTc0NmZlNGE3ZWFkL2RhdGFzb3VyY2U6MzBmMWI5NGMtYTAzZC00MWFhLWJiMmEtYmM5NDg5MGYxOTI2L0FpcmJuYi5jc3YiLCJpYXQiOjE3MDU1MDkwNzgsImV4cCI6MTczNzA0NTA3OH0.kstAzDO6_pizKI8wQAvQkNCmHoVNzfiJjbcJtpHJ5vo","filename":"Airbnb.csv","type":"csv"}
                    created_at: "2024-01-17T16:31:06.014144+00:00"
                    created_by: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                    description: ""
                    id: 30f1b94c-a03d-41aa-bb2a-bc94890f1926
                    last_updated_at: "2024-01-17T16:31:28.528+00:00"
                    last_updated_by: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                    parameters: "[]"
                    sample_data: >-
                      [{"Date":"1-Jul","Guest":"Siddharth Manmdhan","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"6-Jul","Guest":"John Umman","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"8-Jul","Guest":"Irshad PP","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"9-Jul","Guest":"Avith M Lal","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,317.40","GST":"171.00","Received by Bank":"
                      \t3,146.40"},{"Date":"11-Jul","Guest":"Shams Nazar","Phone
                      number":"","Total nights":"2","Confirmed Amt":"
                      \t7,760.00","GST":"400.00","Received by Bank":"
                      \t7,360.00"},{"Date":"14-Jul","Guest":"Kevin
                      Thomas","Phone number":"","Total nights":"1","Confirmed
                      Amt":" \t3,317.40","GST":"171.00","Received by Bank":"
                      \t3,146.40"},{"Date":"15-Jul","Guest":"Kevin
                      Thomas","Phone number":"","Total nights":"1","Confirmed
                      Amt":" \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"16-Jul","Guest":"Anna Binu","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,298.00","GST":"170.00","Received by Bank":"
                      \t3,128.00"},{"Date":"18-Jul","Guest":"Faiza M","Phone
                      number":"","Total nights":"2","Confirmed Amt":"
                      \t7,760.00","GST":"400.00","Received by Bank":"
                      \t7,360.00"},{"Date":"22-Jul","Guest":"Prabhath CA","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"}]
                    size: 4
                    source: file
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: File test
    delete:
      tags:
        - Datasources
      summary: Delete data source by id
      description: Delete data source by id
      operationId: deleteDataSourceById
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 15:37:09 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
              examples:
                Success:
                  value:
                    success: true
    patch:
      tags:
        - Datasources
      summary: Update data source by id
      description: Update data source by id
      operationId: updateDataSourceById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Airtable customers dataset
            examples:
              Update data source by id:
                value:
                  title: Airtable customers dataset
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 15:26:11 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  columns:
                    type: array
                    items:
                      type: object
                      properties:
                        description:
                          type: string
                          example: The state where the customer is located.
                        title:
                          type: string
                          example: State
                    example:
                      - description: The state where the customer is located.
                        title: State
                      - description: The unique identifier for the customer.
                        title: Customer ID
                      - description: The city where the customer is located.
                        title: City
                      - description: >-
                          The customer segment (e.g., Consumer, Corporate,
                          etc.).
                        title: Segment
                      - description: The country where the customer is located.
                        title: Country
                      - description: The postal code of the customer's location.
                        title: Postal Code
                      - description: The region where the customer is located.
                        title: Region
                  config:
                    type: string
                    example: >-
                      Cmw+arkPgRtgYM9aDeMwqsr4vwLNPoxbwK+j5+7y9ytNc6L3nRwo0SmjvIgy3v/Zqu10CmLridbh

                      w29juLQwbUzGafEZ3HT2EhC8Nby68xlscNEOSiqeQSvZJOvFFD18v3Urmw4nyOWAYMPgiEe2SjR3

                      4864rxQcId9IBIatvGEpZkqMgT8BJerh7Btz0VtE1G6k+GfqriPfDZk=
                  created_at:
                    type: string
                    example: "2024-01-17T11:55:26.929359+00:00"
                  created_by:
                    type: string
                    example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                  description:
                    type: string
                    example: ""
                  id:
                    type: string
                    example: 2e335065-0fb5-47c0-97b0-e603a15efdd8
                  last_updated_at:
                    type: string
                    example: "2024-01-24T15:26:11.8+00:00"
                  last_updated_by:
                    nullable: true
                    example: null
                  parameters:
                    type: string
                    example: GCHHaN/37sD/x8jhbI0Drf6jUqRumCZilJjAmPp6c+JRkg==
                  sample_data:
                    type: string
                    example: >-
                      G+xLNbqHn/KoUqVh5j27JMIaKs1jONSOL/2Wt8wAPC2XwFtqRr0U6Mix6yFPpZV3dAokPv6746fu

                      pEKRW6+lvvxQC7zlNuaptvNOFuhJzmJRUUkchfB+OyN/lske17uaJ8MwMGLm2H1rhevZ3/ZIHo8F

                      CyKcdxyBEQ9Az6ApiNg4L1cXD6OxG1Vcw4YlkWd+n13I9lUfd04UKIXm3HDTSza29DePfnix4p2w

                      9q3mtwAi6dxEtnQ54Lbvk8FgLSGz+syMuHRMxdkHJC8TtQ2EKXCR9JphsMIH2g6fG4AYJuZezwW1

                      VtD/n2z/vY+K40Oiw471OVkuEm7cnUs73D/NnhNbHgOsCQOtwTaPR+ylge0z1N1dYtZOk8SFhkY3

                      z9wlE/Gnj0EzuUff2F46xJx9gBxhfZPkYPLedZ8+pMvVL8ZuzqUx+pKNKnosAiIdvQkRG17O44Ol

                      6s/0P38AS6EkYBQQJMg2E1WsYbwAVHVDJ7NZgpcPSvYYaxsWMxk6dBOs9mhJv8MMbM4D2eqsZt4s

                      QuPCtu6ZyxuUIgw5yk2dDHUn/ZG3UVXkcT6HRjh2gVAn4WHvqJEsB380e0KuK38bkXEUK7j/kaOM

                      UlauV7mf+XqH9QJxUno/cAbz96KhKRwmUakpbwHojXaJDg5W4feTfqDB2BJf42EgMFPEjWlzI6x/

                      ApInN8a1SoFE4sWJP1mfLrEoe3oikTPDW9YH68iJKaIN99LfimjunDlAqxRXhoeubMeqwK6jvObi

                      nryA0ZkcrgWRV3WXik76aQFb5Ws8WElZBZbTU1tdaT8ClwKhbrMSB/s7akgxAsLY0H7r3YA1pN97

                      9MrO9MGiY80yhgi/cG+v4h5CHKydXg4hx7jRdW8mM8XxkiErPlQIWM8wnWCdt9a9TRm9svWNYY9M

                      7VzNSTRYZqisXGlADWqaxqevU/AD5o3aCghyrU9letT5YyRayWl2a0M0+xjm/+TMa1LwM8Tk2AWW

                      V0ipSixGffn5hlTg6XgkgJCaUhFRZo37UDMNljZtAHeKmaXu3JbZiqEQWN1+LybJvarkppj+fneU

                      Cn3dlKcsRPrRat7HTI8WEck5y2Bo+Z4l3311lKuyEiRJ7mWUkBiiIb06+7Bw1RXW3fUjPBPUQSdm

                      2CfKxh/uDhNh+PTfLpC3Qp548L9GE5BPwnKGHhjh8fStYGn9uQBl9rVL/D2nUC8BTlK4hAMV84us

                      HzVGlCLsUYw7f2L0pljWTu7/hQitH4aYtu4wqBO8vvKBBhsiBIEUCxjEpgA42T530EdyPIxs6T8g

                      DBQ510VlZebm2aBAnablrGvKGsPMq64IUExlRnEskpNOsHd2ry2SCprFornn2NxwFf0m57EYef26

                      gcl2lFY0TiKJV0SHfx/H+HkQsrDVrVzoHVbU7EtQ3vWUro07xkFNA8Uq39ddwAVatVMHjIBBMGWm

                      DpN0GsQw+immthG8RIIh4vVMMOCmf1cdKwM4VhoJ0RNsDDIOH0nWPwHp1CKNZt+zngo1gHU9NKpQ

                      yuFMbfUoZ87aGrIFP01ZcIzr3Epw14XimyjIZpzqBRMCdl0Q9PcmhCSgUJYCVxs994OQ2VR9lMWO

                      auhgqo7ayGdCzWYyVx3VSWqKsi1deQiDhSSN93PX4pCqnUp/Zu/X+avCVOvcAw+ovjEMsF+1faL1

                      JZFPWYcYI/CM9mz+On/gip+cPb6AS/gtfuqEOw6PZ90QA45Grd4uqtMd+2aJtFc68CQ9GRxuX98G

                      bly127WfOtwODrT9ZvqJ60nhm7ZND/jaMusQ/vPPfKlVdQHXHDBmPK9R3K0Wurl0H5CkyFnhxJO1

                      58w8Xxuju5bCxXESHrHc3d0yq4I+r783Mq51mRuKzc841Jm8sNv51l0QloAHaDfav4ZhR2z1UVdY

                      JOTnxtAV3/sJIDUpWCvZjxAPFqqReNkP1jrePuArjSW7zUjmyXOw4H9ZDLptxWVj2IoOe53vn+mT

                      RrfybMDgVpn5dnPoaEwstfdq540k2hlDWYDe5zTfMnfXSYbR7M5fJsiBEbRB8DLM3kMWK/Ece1Ts

                      6Jb1yxkkre69hjgLk8Jq36hLcG3LJEGox8ICWA==
                  size:
                    type: number
                    example: 15
                  source:
                    type: string
                    example: airtable
                  team:
                    type: string
                    example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  title:
                    type: string
                    example: Airtable customers dataset
              examples:
                Success:
                  value:
                    columns:
                      - description: The state where the customer is located.
                        title: State
                      - description: The unique identifier for the customer.
                        title: Customer ID
                      - description: The city where the customer is located.
                        title: City
                      - description: >-
                          The customer segment (e.g., Consumer, Corporate,
                          etc.).
                        title: Segment
                      - description: The country where the customer is located.
                        title: Country
                      - description: The postal code of the customer's location.
                        title: Postal Code
                      - description: The region where the customer is located.
                        title: Region
                    config: >-
                      Cmw+arkPgRtgYM9aDeMwqsr4vwLNPoxbwK+j5+7y9ytNc6L3nRwo0SmjvIgy3v/Zqu10CmLridbh

                      w29juLQwbUzGafEZ3HT2EhC8Nby68xlscNEOSiqeQSvZJOvFFD18v3Urmw4nyOWAYMPgiEe2SjR3

                      4864rxQcId9IBIatvGEpZkqMgT8BJerh7Btz0VtE1G6k+GfqriPfDZk=
                    created_at: "2024-01-17T11:55:26.929359+00:00"
                    created_by: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                    description: ""
                    id: 2e335065-0fb5-47c0-97b0-e603a15efdd8
                    last_updated_at: "2024-01-24T15:26:11.8+00:00"
                    last_updated_by: null
                    parameters: GCHHaN/37sD/x8jhbI0Drf6jUqRumCZilJjAmPp6c+JRkg==
                    sample_data: >-
                      G+xLNbqHn/KoUqVh5j27JMIaKs1jONSOL/2Wt8wAPC2XwFtqRr0U6Mix6yFPpZV3dAokPv6746fu

                      pEKRW6+lvvxQC7zlNuaptvNOFuhJzmJRUUkchfB+OyN/lske17uaJ8MwMGLm2H1rhevZ3/ZIHo8F

                      CyKcdxyBEQ9Az6ApiNg4L1cXD6OxG1Vcw4YlkWd+n13I9lUfd04UKIXm3HDTSza29DePfnix4p2w

                      9q3mtwAi6dxEtnQ54Lbvk8FgLSGz+syMuHRMxdkHJC8TtQ2EKXCR9JphsMIH2g6fG4AYJuZezwW1

                      VtD/n2z/vY+K40Oiw471OVkuEm7cnUs73D/NnhNbHgOsCQOtwTaPR+ylge0z1N1dYtZOk8SFhkY3

                      z9wlE/Gnj0EzuUff2F46xJx9gBxhfZPkYPLedZ8+pMvVL8ZuzqUx+pKNKnosAiIdvQkRG17O44Ol

                      6s/0P38AS6EkYBQQJMg2E1WsYbwAVHVDJ7NZgpcPSvYYaxsWMxk6dBOs9mhJv8MMbM4D2eqsZt4s

                      QuPCtu6ZyxuUIgw5yk2dDHUn/ZG3UVXkcT6HRjh2gVAn4WHvqJEsB380e0KuK38bkXEUK7j/kaOM

                      UlauV7mf+XqH9QJxUno/cAbz96KhKRwmUakpbwHojXaJDg5W4feTfqDB2BJf42EgMFPEjWlzI6x/

                      ApInN8a1SoFE4sWJP1mfLrEoe3oikTPDW9YH68iJKaIN99LfimjunDlAqxRXhoeubMeqwK6jvObi

                      nryA0ZkcrgWRV3WXik76aQFb5Ws8WElZBZbTU1tdaT8ClwKhbrMSB/s7akgxAsLY0H7r3YA1pN97

                      9MrO9MGiY80yhgi/cG+v4h5CHKydXg4hx7jRdW8mM8XxkiErPlQIWM8wnWCdt9a9TRm9svWNYY9M

                      7VzNSTRYZqisXGlADWqaxqevU/AD5o3aCghyrU9letT5YyRayWl2a0M0+xjm/+TMa1LwM8Tk2AWW

                      V0ipSixGffn5hlTg6XgkgJCaUhFRZo37UDMNljZtAHeKmaXu3JbZiqEQWN1+LybJvarkppj+fneU

                      Cn3dlKcsRPrRat7HTI8WEck5y2Bo+Z4l3311lKuyEiRJ7mWUkBiiIb06+7Bw1RXW3fUjPBPUQSdm

                      2CfKxh/uDhNh+PTfLpC3Qp548L9GE5BPwnKGHhjh8fStYGn9uQBl9rVL/D2nUC8BTlK4hAMV84us

                      HzVGlCLsUYw7f2L0pljWTu7/hQitH4aYtu4wqBO8vvKBBhsiBIEUCxjEpgA42T530EdyPIxs6T8g

                      DBQ510VlZebm2aBAnablrGvKGsPMq64IUExlRnEskpNOsHd2ry2SCprFornn2NxwFf0m57EYef26

                      gcl2lFY0TiKJV0SHfx/H+HkQsrDVrVzoHVbU7EtQ3vWUro07xkFNA8Uq39ddwAVatVMHjIBBMGWm

                      DpN0GsQw+immthG8RIIh4vVMMOCmf1cdKwM4VhoJ0RNsDDIOH0nWPwHp1CKNZt+zngo1gHU9NKpQ

                      yuFMbfUoZ87aGrIFP01ZcIzr3Epw14XimyjIZpzqBRMCdl0Q9PcmhCSgUJYCVxs994OQ2VR9lMWO

                      auhgqo7ayGdCzWYyVx3VSWqKsi1deQiDhSSN93PX4pCqnUp/Zu/X+avCVOvcAw+ovjEMsF+1faL1

                      JZFPWYcYI/CM9mz+On/gip+cPb6AS/gtfuqEOw6PZ90QA45Grd4uqtMd+2aJtFc68CQ9GRxuX98G

                      bly127WfOtwODrT9ZvqJ60nhm7ZND/jaMusQ/vPPfKlVdQHXHDBmPK9R3K0Wurl0H5CkyFnhxJO1

                      58w8Xxuju5bCxXESHrHc3d0yq4I+r783Mq51mRuKzc841Jm8sNv51l0QloAHaDfav4ZhR2z1UVdY

                      JOTnxtAV3/sJIDUpWCvZjxAPFqqReNkP1jrePuArjSW7zUjmyXOw4H9ZDLptxWVj2IoOe53vn+mT

                      RrfybMDgVpn5dnPoaEwstfdq540k2hlDWYDe5zTfMnfXSYbR7M5fJsiBEbRB8DLM3kMWK/Ece1Ts

                      6Jb1yxkkre69hjgLk8Jq36hLcG3LJEGox8ICWA==
                    size: 15
                    source: airtable
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: Airtable customers dataset
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 2e335065-0fb5-47c0-97b0-e603a15efdd8
  /api/datasources/{id}/data:
    get:
      tags:
        - Datasources
      summary: Get data source data by id
      description: Get data source data by id
      operationId: getDataSourceDataById
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 15:43:45 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        City:
                          type: string
                          example: Westland
                        Country:
                          type: string
                          example: United States
                        Customer ID:
                          type: string
                          example: PO-18865
                        Postal Code:
                          type: string
                          example: "48185"
                        Region:
                          type: string
                          example: Central
                        Segment:
                          type: string
                          example: Consumer
                        State:
                          type: string
                          example: Michigan
                    example:
                      - City: Westland
                        Country: United States
                        Customer ID: PO-18865
                        Postal Code: "48185"
                        Region: Central
                        Segment: Consumer
                        State: Michigan
                      - City: Sioux Falls
                        Country: United States
                        Customer ID: EM-13825
                        Postal Code: "57103"
                        Region: Central
                        Segment: Corporate
                        State: South Dakota
                      - City: Saint Louis
                        Country: United States
                        Customer ID: MC-17635
                        Postal Code: "63116"
                        Region: Central
                        Segment: Corporate
                        State: Missouri
                      - City: Newark
                        Country: United States
                        Customer ID: VM-21835
                        Postal Code: "19711"
                        Region: East
                        Segment: Consumer
                        State: Delaware
                      - City: New York City
                        Country: United States
                        Customer ID: AP-10720
                        Postal Code: "10035"
                        Region: East
                        Segment: Home Office
                        State: New York
                      - City: Charlottesville
                        Country: United States
                        Customer ID: AS-10090
                        Postal Code: "22901"
                        Region: South
                        Segment: Consumer
                        State: Virginia
                      - City: Memphis
                        Country: United States
                        Customer ID: JE-15745
                        Postal Code: "38109"
                        Region: South
                        Segment: Consumer
                        State: Tennessee
                      - City: Chicago
                        Country: United States
                        Customer ID: KL-16645
                        Postal Code: "60610"
                        Region: Central
                        Segment: Consumer
                        State: Illinois
                      - City: Springfield
                        Country: United States
                        Customer ID: JR-16210
                        Postal Code: "45503"
                        Region: East
                        Segment: Corporate
                        State: Ohio
                      - City: New York City
                        Country: United States
                        Customer ID: JG-15805
                        Postal Code: "10024"
                        Region: East
                        Segment: Corporate
                        State: New York
                  id:
                    type: string
                    example: 2e335065-0fb5-47c0-97b0-e603a15efdd8
              examples:
                Success:
                  value:
                    data:
                      - City: Westland
                        Country: United States
                        Customer ID: PO-18865
                        Postal Code: "48185"
                        Region: Central
                        Segment: Consumer
                        State: Michigan
                      - City: Sioux Falls
                        Country: United States
                        Customer ID: EM-13825
                        Postal Code: "57103"
                        Region: Central
                        Segment: Corporate
                        State: South Dakota
                      - City: Saint Louis
                        Country: United States
                        Customer ID: MC-17635
                        Postal Code: "63116"
                        Region: Central
                        Segment: Corporate
                        State: Missouri
                      - City: Newark
                        Country: United States
                        Customer ID: VM-21835
                        Postal Code: "19711"
                        Region: East
                        Segment: Consumer
                        State: Delaware
                      - City: New York City
                        Country: United States
                        Customer ID: AP-10720
                        Postal Code: "10035"
                        Region: East
                        Segment: Home Office
                        State: New York
                      - City: Charlottesville
                        Country: United States
                        Customer ID: AS-10090
                        Postal Code: "22901"
                        Region: South
                        Segment: Consumer
                        State: Virginia
                      - City: Memphis
                        Country: United States
                        Customer ID: JE-15745
                        Postal Code: "38109"
                        Region: South
                        Segment: Consumer
                        State: Tennessee
                      - City: Chicago
                        Country: United States
                        Customer ID: KL-16645
                        Postal Code: "60610"
                        Region: Central
                        Segment: Consumer
                        State: Illinois
                      - City: Springfield
                        Country: United States
                        Customer ID: JR-16210
                        Postal Code: "45503"
                        Region: East
                        Segment: Corporate
                        State: Ohio
                      - City: New York City
                        Country: United States
                        Customer ID: JG-15805
                        Postal Code: "10024"
                        Region: East
                        Segment: Corporate
                        State: New York
                    id: 2e335065-0fb5-47c0-97b0-e603a15efdd8
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 2e335065-0fb5-47c0-97b0-e603a15efdd8
  /api/datasources/{id}/populate-columns:
    post:
      tags:
        - Datasources
      summary: Populate data source columns by id
      description: Populate data source columns by id
      operationId: populateDataSourceColumnsById
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 15:49:17 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  columns:
                    type: array
                    items:
                      type: object
                      properties:
                        description:
                          type: string
                          example: State name of the customer's location
                        title:
                          type: string
                          example: State
                    example:
                      - description: State name of the customer's location
                        title: State
                      - description: Unique identifier for the customer
                        title: Customer ID
                      - description: City name of the customer's location
                        title: City
                      - description: Segment of the customer (e.g. Consumer, Corporate)
                        title: Segment
                      - description: Country name of the customer's location
                        title: Country
                      - description: Postal code of the customer's location
                        title: Postal Code
                      - description: Region of the customer's location
                        title: Region
                  config:
                    type: string
                    example: >-
                      Cmw+arkPgRtgYM9aDeMwqsr4vwLNPoxbwK+j5+7y9ytNc6L3nRwo0SmjvIgy3v/Zqu10CmLridbh

                      w29juLQwbUzGafEZ3HT2EhC8Nby68xlscNEOSiqeQSvZJOvFFD18v3Urmw4nyOWAYMPgiEe2SjR3

                      4864rxQcId9IBIatvGEpZkqMgT8BJerh7Btz0VtE1G6k+GfqriPfDZk=
                  created_at:
                    type: string
                    example: "2024-01-17T11:55:26.929359+00:00"
                  created_by:
                    type: string
                    example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                  description:
                    type: string
                    example: ""
                  id:
                    type: string
                    example: 2e335065-0fb5-47c0-97b0-e603a15efdd8
                  last_updated_at:
                    type: string
                    example: "2024-01-24T15:49:17.05+00:00"
                  last_updated_by:
                    nullable: true
                    example: null
                  parameters:
                    type: string
                    example: GCHHaN/37sD/x8jhbI0Drf6jUqRumCZilJjAmPp6c+JRkg==
                  sample_data:
                    type: string
                    example: >-
                      G+xLNbqHn/KoUqVh5j27JMIaKs1jONSOL/2Wt8wAPC2XwFtqRr0U6Mix6yFPpZV3dAokPv6746fu

                      pEKRW6+lvvxQC7zlNuaptvNOFuhJzmJRUUkchfB+OyN/lske17uaJ8MwMGLm2H1rhevZ3/ZIHo8F

                      CyKcdxyBEQ9Az6ApiNg4L1cXD6OxG1Vcw4YlkWd+n13I9lUfd04UKIXm3HDTSza29DePfnix4p2w

                      9q3mtwAi6dxEtnQ54Lbvk8FgLSGz+syMuHRMxdkHJC8TtQ2EKXCR9JphsMIH2g6fG4AYJuZezwW1

                      VtD/n2z/vY+K40Oiw471OVkuEm7cnUs73D/NnhNbHgOsCQOtwTaPR+ylge0z1N1dYtZOk8SFhkY3

                      z9wlE/Gnj0EzuUff2F46xJx9gBxhfZPkYPLedZ8+pMvVL8ZuzqUx+pKNKnosAiIdvQkRG17O44Ol

                      6s/0P38AS6EkYBQQJMg2E1WsYbwAVHVDJ7NZgpcPSvYYaxsWMxk6dBOs9mhJv8MMbM4D2eqsZt4s

                      QuPCtu6ZyxuUIgw5yk2dDHUn/ZG3UVXkcT6HRjh2gVAn4WHvqJEsB380e0KuK38bkXEUK7j/kaOM

                      UlauV7mf+XqH9QJxUno/cAbz96KhKRwmUakpbwHojXaJDg5W4feTfqDB2BJf42EgMFPEjWlzI6x/

                      ApInN8a1SoFE4sWJP1mfLrEoe3oikTPDW9YH68iJKaIN99LfimjunDlAqxRXhoeubMeqwK6jvObi

                      nryA0ZkcrgWRV3WXik76aQFb5Ws8WElZBZbTU1tdaT8ClwKhbrMSB/s7akgxAsLY0H7r3YA1pN97

                      9MrO9MGiY80yhgi/cG+v4h5CHKydXg4hx7jRdW8mM8XxkiErPlQIWM8wnWCdt9a9TRm9svWNYY9M

                      7VzNSTRYZqisXGlADWqaxqevU/AD5o3aCghyrU9letT5YyRayWl2a0M0+xjm/+TMa1LwM8Tk2AWW

                      V0ipSixGffn5hlTg6XgkgJCaUhFRZo37UDMNljZtAHeKmaXu3JbZiqEQWN1+LybJvarkppj+fneU

                      Cn3dlKcsRPrRat7HTI8WEck5y2Bo+Z4l3311lKuyEiRJ7mWUkBiiIb06+7Bw1RXW3fUjPBPUQSdm

                      2CfKxh/uDhNh+PTfLpC3Qp548L9GE5BPwnKGHhjh8fStYGn9uQBl9rVL/D2nUC8BTlK4hAMV84us

                      HzVGlCLsUYw7f2L0pljWTu7/hQitH4aYtu4wqBO8vvKBBhsiBIEUCxjEpgA42T530EdyPIxs6T8g

                      DBQ510VlZebm2aBAnablrGvKGsPMq64IUExlRnEskpNOsHd2ry2SCprFornn2NxwFf0m57EYef26

                      gcl2lFY0TiKJV0SHfx/H+HkQsrDVrVzoHVbU7EtQ3vWUro07xkFNA8Uq39ddwAVatVMHjIBBMGWm

                      DpN0GsQw+immthG8RIIh4vVMMOCmf1cdKwM4VhoJ0RNsDDIOH0nWPwHp1CKNZt+zngo1gHU9NKpQ

                      yuFMbfUoZ87aGrIFP01ZcIzr3Epw14XimyjIZpzqBRMCdl0Q9PcmhCSgUJYCVxs994OQ2VR9lMWO

                      auhgqo7ayGdCzWYyVx3VSWqKsi1deQiDhSSN93PX4pCqnUp/Zu/X+avCVOvcAw+ovjEMsF+1faL1

                      JZFPWYcYI/CM9mz+On/gip+cPb6AS/gtfuqEOw6PZ90QA45Grd4uqtMd+2aJtFc68CQ9GRxuX98G

                      bly127WfOtwODrT9ZvqJ60nhm7ZND/jaMusQ/vPPfKlVdQHXHDBmPK9R3K0Wurl0H5CkyFnhxJO1

                      58w8Xxuju5bCxXESHrHc3d0yq4I+r783Mq51mRuKzc841Jm8sNv51l0QloAHaDfav4ZhR2z1UVdY

                      JOTnxtAV3/sJIDUpWCvZjxAPFqqReNkP1jrePuArjSW7zUjmyXOw4H9ZDLptxWVj2IoOe53vn+mT

                      RrfybMDgVpn5dnPoaEwstfdq540k2hlDWYDe5zTfMnfXSYbR7M5fJsiBEbRB8DLM3kMWK/Ece1Ts

                      6Jb1yxkkre69hjgLk8Jq36hLcG3LJEGox8ICWA==
                  size:
                    type: number
                    example: 15
                  source:
                    type: string
                    example: airtable
                  team:
                    type: string
                    example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  title:
                    type: string
                    example: Airtable customers dataset
              examples:
                Success:
                  value:
                    columns:
                      - description: State name of the customer's location
                        title: State
                      - description: Unique identifier for the customer
                        title: Customer ID
                      - description: City name of the customer's location
                        title: City
                      - description: Segment of the customer (e.g. Consumer, Corporate)
                        title: Segment
                      - description: Country name of the customer's location
                        title: Country
                      - description: Postal code of the customer's location
                        title: Postal Code
                      - description: Region of the customer's location
                        title: Region
                    config: >-
                      Cmw+arkPgRtgYM9aDeMwqsr4vwLNPoxbwK+j5+7y9ytNc6L3nRwo0SmjvIgy3v/Zqu10CmLridbh

                      w29juLQwbUzGafEZ3HT2EhC8Nby68xlscNEOSiqeQSvZJOvFFD18v3Urmw4nyOWAYMPgiEe2SjR3

                      4864rxQcId9IBIatvGEpZkqMgT8BJerh7Btz0VtE1G6k+GfqriPfDZk=
                    created_at: "2024-01-17T11:55:26.929359+00:00"
                    created_by: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                    description: ""
                    id: 2e335065-0fb5-47c0-97b0-e603a15efdd8
                    last_updated_at: "2024-01-24T15:49:17.05+00:00"
                    last_updated_by: null
                    parameters: GCHHaN/37sD/x8jhbI0Drf6jUqRumCZilJjAmPp6c+JRkg==
                    sample_data: >-
                      G+xLNbqHn/KoUqVh5j27JMIaKs1jONSOL/2Wt8wAPC2XwFtqRr0U6Mix6yFPpZV3dAokPv6746fu

                      pEKRW6+lvvxQC7zlNuaptvNOFuhJzmJRUUkchfB+OyN/lske17uaJ8MwMGLm2H1rhevZ3/ZIHo8F

                      CyKcdxyBEQ9Az6ApiNg4L1cXD6OxG1Vcw4YlkWd+n13I9lUfd04UKIXm3HDTSza29DePfnix4p2w

                      9q3mtwAi6dxEtnQ54Lbvk8FgLSGz+syMuHRMxdkHJC8TtQ2EKXCR9JphsMIH2g6fG4AYJuZezwW1

                      VtD/n2z/vY+K40Oiw471OVkuEm7cnUs73D/NnhNbHgOsCQOtwTaPR+ylge0z1N1dYtZOk8SFhkY3

                      z9wlE/Gnj0EzuUff2F46xJx9gBxhfZPkYPLedZ8+pMvVL8ZuzqUx+pKNKnosAiIdvQkRG17O44Ol

                      6s/0P38AS6EkYBQQJMg2E1WsYbwAVHVDJ7NZgpcPSvYYaxsWMxk6dBOs9mhJv8MMbM4D2eqsZt4s

                      QuPCtu6ZyxuUIgw5yk2dDHUn/ZG3UVXkcT6HRjh2gVAn4WHvqJEsB380e0KuK38bkXEUK7j/kaOM

                      UlauV7mf+XqH9QJxUno/cAbz96KhKRwmUakpbwHojXaJDg5W4feTfqDB2BJf42EgMFPEjWlzI6x/

                      ApInN8a1SoFE4sWJP1mfLrEoe3oikTPDW9YH68iJKaIN99LfimjunDlAqxRXhoeubMeqwK6jvObi

                      nryA0ZkcrgWRV3WXik76aQFb5Ws8WElZBZbTU1tdaT8ClwKhbrMSB/s7akgxAsLY0H7r3YA1pN97

                      9MrO9MGiY80yhgi/cG+v4h5CHKydXg4hx7jRdW8mM8XxkiErPlQIWM8wnWCdt9a9TRm9svWNYY9M

                      7VzNSTRYZqisXGlADWqaxqevU/AD5o3aCghyrU9letT5YyRayWl2a0M0+xjm/+TMa1LwM8Tk2AWW

                      V0ipSixGffn5hlTg6XgkgJCaUhFRZo37UDMNljZtAHeKmaXu3JbZiqEQWN1+LybJvarkppj+fneU

                      Cn3dlKcsRPrRat7HTI8WEck5y2Bo+Z4l3311lKuyEiRJ7mWUkBiiIb06+7Bw1RXW3fUjPBPUQSdm

                      2CfKxh/uDhNh+PTfLpC3Qp548L9GE5BPwnKGHhjh8fStYGn9uQBl9rVL/D2nUC8BTlK4hAMV84us

                      HzVGlCLsUYw7f2L0pljWTu7/hQitH4aYtu4wqBO8vvKBBhsiBIEUCxjEpgA42T530EdyPIxs6T8g

                      DBQ510VlZebm2aBAnablrGvKGsPMq64IUExlRnEskpNOsHd2ry2SCprFornn2NxwFf0m57EYef26

                      gcl2lFY0TiKJV0SHfx/H+HkQsrDVrVzoHVbU7EtQ3vWUro07xkFNA8Uq39ddwAVatVMHjIBBMGWm

                      DpN0GsQw+immthG8RIIh4vVMMOCmf1cdKwM4VhoJ0RNsDDIOH0nWPwHp1CKNZt+zngo1gHU9NKpQ

                      yuFMbfUoZ87aGrIFP01ZcIzr3Epw14XimyjIZpzqBRMCdl0Q9PcmhCSgUJYCVxs994OQ2VR9lMWO

                      auhgqo7ayGdCzWYyVx3VSWqKsi1deQiDhSSN93PX4pCqnUp/Zu/X+avCVOvcAw+ovjEMsF+1faL1

                      JZFPWYcYI/CM9mz+On/gip+cPb6AS/gtfuqEOw6PZ90QA45Grd4uqtMd+2aJtFc68CQ9GRxuX98G

                      bly127WfOtwODrT9ZvqJ60nhm7ZND/jaMusQ/vPPfKlVdQHXHDBmPK9R3K0Wurl0H5CkyFnhxJO1

                      58w8Xxuju5bCxXESHrHc3d0yq4I+r783Mq51mRuKzc841Jm8sNv51l0QloAHaDfav4ZhR2z1UVdY

                      JOTnxtAV3/sJIDUpWCvZjxAPFqqReNkP1jrePuArjSW7zUjmyXOw4H9ZDLptxWVj2IoOe53vn+mT

                      RrfybMDgVpn5dnPoaEwstfdq540k2hlDWYDe5zTfMnfXSYbR7M5fJsiBEbRB8DLM3kMWK/Ece1Ts

                      6Jb1yxkkre69hjgLk8Jq36hLcG3LJEGox8ICWA==
                    size: 15
                    source: airtable
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: Airtable customers dataset
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 2e335065-0fb5-47c0-97b0-e603a15efdd8
  /api/datasources/:
    put:
      tags:
        - Datasources
      summary: Create data source
      description: Create data source
      operationId: createDataSource
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: ""
                source:
                  type: string
                  example: airtable
                title:
                  type: string
                  example: Airtable customers API test
            examples:
              Create data source:
                value:
                  description: ""
                  source: airtable
                  title: Airtable customers API test
      responses:
        "201":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 15:29:12 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  columns:
                    type: array
                    items: {}
                    example: []
                  config:
                    type: string
                    example: eiRRfAWSFeimsE6hNekFrIBJHIjt7JiwdHjWKCz+DNmMUw==
                  created_at:
                    type: string
                    example: "2024-01-24T15:29:12.794291+00:00"
                  created_by:
                    nullable: true
                    example: null
                  description:
                    type: string
                    example: ""
                  id:
                    type: string
                    example: 1e299626-d48f-4686-9102-7ee26499ec52
                  last_updated_at:
                    type: string
                    example: "2024-01-24T15:29:12.794291+00:00"
                  last_updated_by:
                    nullable: true
                    example: null
                  parameters:
                    type: string
                    example: GCHHaN/37sD/x8jhbI0Drf6jUqRumCZilJjAmPp6c+JRkg==
                  sample_data:
                    type: string
                    example: GCHHaN/37sD/x8jhbI0Drf6jUqRumCZilJjAmPp6c+JRkg==
                  size:
                    type: number
                    example: 0
                  source:
                    type: string
                    example: airtable
                  team:
                    type: string
                    example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  title:
                    type: string
                    example: Airtable customers API test
              examples:
                Success:
                  value:
                    columns: []
                    config: eiRRfAWSFeimsE6hNekFrIBJHIjt7JiwdHjWKCz+DNmMUw==
                    created_at: "2024-01-24T15:29:12.794291+00:00"
                    created_by: null
                    description: ""
                    id: 1e299626-d48f-4686-9102-7ee26499ec52
                    last_updated_at: "2024-01-24T15:29:12.794291+00:00"
                    last_updated_by: null
                    parameters: GCHHaN/37sD/x8jhbI0Drf6jUqRumCZilJjAmPp6c+JRkg==
                    sample_data: GCHHaN/37sD/x8jhbI0Drf6jUqRumCZilJjAmPp6c+JRkg==
                    size: 0
                    source: airtable
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: Airtable customers API test
  /api/datasources:
    get:
      tags:
        - Datasources
      summary: Get all data sources
      description: Get all data sources
      operationId: getAllDataSources
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 15:16:47 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    columns:
                      type: array
                      items:
                        type: object
                        properties:
                          description:
                            type: string
                            example: The state where the customer is located.
                          title:
                            type: string
                            example: State
                      example:
                        - description: The state where the customer is located.
                          title: State
                        - description: The unique identifier for the customer.
                          title: Customer ID
                        - description: The city where the customer is located.
                          title: City
                        - description: >-
                            The customer segment (e.g., Consumer, Corporate,
                            etc.).
                          title: Segment
                        - description: The country where the customer is located.
                          title: Country
                        - description: The postal code of the customer's location.
                          title: Postal Code
                        - description: The region where the customer is located.
                          title: Region
                    config:
                      type: string
                      example: >-
                        {"baseId":"appV4eljLGnPbPnUU","baseName":"Sample
                        Customers.csv","tableId":"tbl7ZBUFUNA3kx7GL","tableName":"Imported
                        table"}
                    created_at:
                      type: string
                      example: "2024-01-17T11:55:26.929359+00:00"
                    created_by:
                      type: object
                      properties:
                        avatar_url:
                          type: string
                          example: >-
                            https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email:
                          type: string
                          example: ronneldavis1996@gmail.com
                        full_name:
                          type: string
                          example: Ronnel Davis
                        id:
                          type: string
                          example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number:
                          type: string
                          example: "8075065108"
                        updated_at:
                          type: string
                          example: "2024-01-17T10:14:12.62603+00:00"
                    description:
                      type: string
                      example: ""
                    id:
                      type: string
                      example: 2e335065-0fb5-47c0-97b0-e603a15efdd8
                    last_updated_at:
                      type: string
                      example: "2024-01-17T12:00:03.629+00:00"
                    last_updated_by:
                      type: object
                      properties:
                        avatar_url:
                          type: string
                          example: >-
                            https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email:
                          type: string
                          example: ronneldavis1996@gmail.com
                        full_name:
                          type: string
                          example: Ronnel Davis
                        id:
                          type: string
                          example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number:
                          type: string
                          example: "8075065108"
                        updated_at:
                          type: string
                          example: "2024-01-17T10:14:12.62603+00:00"
                    parameters:
                      type: string
                      example: "[]"
                    sample_data:
                      type: string
                      example: >-
                        [{"State":"Michigan","Customer
                        ID":"PO-18865","City":"Westland","Segment":"Consumer","Country":"United
                        States","Postal
                        Code":"48185","Region":"Central"},{"State":"South
                        Dakota","Customer ID":"EM-13825","City":"Sioux
                        Falls","Segment":"Corporate","Country":"United
                        States","Postal
                        Code":"57103","Region":"Central"},{"State":"Missouri","Customer
                        ID":"MC-17635","City":"Saint
                        Louis","Segment":"Corporate","Country":"United
                        States","Postal
                        Code":"63116","Region":"Central"},{"State":"Delaware","Customer
                        ID":"VM-21835","City":"Newark","Segment":"Consumer","Country":"United
                        States","Postal
                        Code":"19711","Region":"East"},{"State":"New
                        York","Customer ID":"AP-10720","City":"New York
                        City","Segment":"Home Office","Country":"United
                        States","Postal
                        Code":"10035","Region":"East"},{"State":"Virginia","Customer
                        ID":"AS-10090","City":"Charlottesville","Segment":"Consumer","Country":"United
                        States","Postal
                        Code":"22901","Region":"South"},{"State":"Tennessee","Customer
                        ID":"JE-15745","City":"Memphis","Segment":"Consumer","Country":"United
                        States","Postal
                        Code":"38109","Region":"South"},{"State":"Illinois","Customer
                        ID":"KL-16645","City":"Chicago","Segment":"Consumer","Country":"United
                        States","Postal
                        Code":"60610","Region":"Central"},{"State":"Ohio","Customer
                        ID":"JR-16210","City":"Springfield","Segment":"Corporate","Country":"United
                        States","Postal
                        Code":"45503","Region":"East"},{"State":"New
                        York","Customer ID":"JG-15805","City":"New York
                        City","Segment":"Corporate","Country":"United
                        States","Postal Code":"10024","Region":"East"}]
                    size:
                      type: number
                      example: 15
                    source:
                      type: string
                      example: airtable
                    team:
                      type: string
                      example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title:
                      type: string
                      example: Airtable test
                example:
                  - columns:
                      - description: The state where the customer is located.
                        title: State
                      - description: The unique identifier for the customer.
                        title: Customer ID
                      - description: The city where the customer is located.
                        title: City
                      - description: >-
                          The customer segment (e.g., Consumer, Corporate,
                          etc.).
                        title: Segment
                      - description: The country where the customer is located.
                        title: Country
                      - description: The postal code of the customer's location.
                        title: Postal Code
                      - description: The region where the customer is located.
                        title: Region
                    config: >-
                      {"baseId":"appV4eljLGnPbPnUU","baseName":"Sample
                      Customers.csv","tableId":"tbl7ZBUFUNA3kx7GL","tableName":"Imported
                      table"}
                    created_at: "2024-01-17T11:55:26.929359+00:00"
                    created_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    description: ""
                    id: 2e335065-0fb5-47c0-97b0-e603a15efdd8
                    last_updated_at: "2024-01-17T12:00:03.629+00:00"
                    last_updated_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    parameters: "[]"
                    sample_data: >-
                      [{"State":"Michigan","Customer
                      ID":"PO-18865","City":"Westland","Segment":"Consumer","Country":"United
                      States","Postal
                      Code":"48185","Region":"Central"},{"State":"South
                      Dakota","Customer ID":"EM-13825","City":"Sioux
                      Falls","Segment":"Corporate","Country":"United
                      States","Postal
                      Code":"57103","Region":"Central"},{"State":"Missouri","Customer
                      ID":"MC-17635","City":"Saint
                      Louis","Segment":"Corporate","Country":"United
                      States","Postal
                      Code":"63116","Region":"Central"},{"State":"Delaware","Customer
                      ID":"VM-21835","City":"Newark","Segment":"Consumer","Country":"United
                      States","Postal
                      Code":"19711","Region":"East"},{"State":"New
                      York","Customer ID":"AP-10720","City":"New York
                      City","Segment":"Home Office","Country":"United
                      States","Postal
                      Code":"10035","Region":"East"},{"State":"Virginia","Customer
                      ID":"AS-10090","City":"Charlottesville","Segment":"Consumer","Country":"United
                      States","Postal
                      Code":"22901","Region":"South"},{"State":"Tennessee","Customer
                      ID":"JE-15745","City":"Memphis","Segment":"Consumer","Country":"United
                      States","Postal
                      Code":"38109","Region":"South"},{"State":"Illinois","Customer
                      ID":"KL-16645","City":"Chicago","Segment":"Consumer","Country":"United
                      States","Postal
                      Code":"60610","Region":"Central"},{"State":"Ohio","Customer
                      ID":"JR-16210","City":"Springfield","Segment":"Corporate","Country":"United
                      States","Postal
                      Code":"45503","Region":"East"},{"State":"New
                      York","Customer ID":"JG-15805","City":"New York
                      City","Segment":"Corporate","Country":"United
                      States","Postal Code":"10024","Region":"East"}]
                    size: 15
                    source: airtable
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: Airtable test
                  - columns:
                      - description: The date in the format 'D-Mon'
                        title: Date
                      - description: The name of the guest
                        title: Guest
                      - description: The phone number of the guest
                        title: Phone number
                      - description: The total number of nights stayed
                        title: Total nights
                      - description: >-
                          The confirmed amount in currency format (e.g.,
                          '3,880.00')
                        title: Confirmed Amt
                      - description: The GST amount in currency format (e.g., '200.00')
                        title: GST
                      - description: >-
                          The amount received by the bank in currency format
                          (e.g., '3,680.00')
                        title: Received by Bank
                    config: >-
                      {"url":"http://localhost:54321/storage/v1/object/sign/data-sources/ee5b08c6-5167-4425-bbc3-a746fe4a7ead/datasource:30f1b94c-a03d-41aa-bb2a-bc94890f1926/Airbnb.csv?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJkYXRhLXNvdXJjZXMvZWU1YjA4YzYtNTE2Ny00NDI1LWJiYzMtYTc0NmZlNGE3ZWFkL2RhdGFzb3VyY2U6MzBmMWI5NGMtYTAzZC00MWFhLWJiMmEtYmM5NDg5MGYxOTI2L0FpcmJuYi5jc3YiLCJpYXQiOjE3MDU1MDkwNzgsImV4cCI6MTczNzA0NTA3OH0.kstAzDO6_pizKI8wQAvQkNCmHoVNzfiJjbcJtpHJ5vo","filename":"Airbnb.csv","type":"csv"}
                    created_at: "2024-01-17T16:31:06.014144+00:00"
                    created_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    description: ""
                    id: 30f1b94c-a03d-41aa-bb2a-bc94890f1926
                    last_updated_at: "2024-01-17T16:31:28.528+00:00"
                    last_updated_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    parameters: "[]"
                    sample_data: >-
                      [{"Date":"1-Jul","Guest":"Siddharth Manmdhan","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"6-Jul","Guest":"John Umman","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"8-Jul","Guest":"Irshad PP","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"9-Jul","Guest":"Avith M Lal","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,317.40","GST":"171.00","Received by Bank":"
                      \t3,146.40"},{"Date":"11-Jul","Guest":"Shams Nazar","Phone
                      number":"","Total nights":"2","Confirmed Amt":"
                      \t7,760.00","GST":"400.00","Received by Bank":"
                      \t7,360.00"},{"Date":"14-Jul","Guest":"Kevin
                      Thomas","Phone number":"","Total nights":"1","Confirmed
                      Amt":" \t3,317.40","GST":"171.00","Received by Bank":"
                      \t3,146.40"},{"Date":"15-Jul","Guest":"Kevin
                      Thomas","Phone number":"","Total nights":"1","Confirmed
                      Amt":" \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"},{"Date":"16-Jul","Guest":"Anna Binu","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,298.00","GST":"170.00","Received by Bank":"
                      \t3,128.00"},{"Date":"18-Jul","Guest":"Faiza M","Phone
                      number":"","Total nights":"2","Confirmed Amt":"
                      \t7,760.00","GST":"400.00","Received by Bank":"
                      \t7,360.00"},{"Date":"22-Jul","Guest":"Prabhath CA","Phone
                      number":"","Total nights":"1","Confirmed Amt":"
                      \t3,880.00","GST":"200.00","Received by Bank":"
                      \t3,680.00"}]
                    size: 4
                    source: file
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: File test
                  - columns:
                      - description: The name of the subscription service (string)
                        title: Subscription
                      - description: The monthly subscription amount in currency (number)
                        title: Amount per month
                      - description: >-
                          The date of the next renewal in the format 'Month Day,
                          Year' (string)
                        title: Next renewal
                      - description: The status of the subscription (string)
                        title: Status
                    config: >-
                      {"docId":"1-LSXe4MAkOsN0xIKqk3kPQUWksFHsW8QZYG8pYW96GE","sheetId":0,"sheetName":"Sheet1"}
                    created_at: "2024-01-17T16:31:47.377513+00:00"
                    created_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    description: ""
                    id: 9fa19a4d-8852-4228-b0f5-f10ade43f576
                    last_updated_at: "2024-01-17T16:38:54.071+00:00"
                    last_updated_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    parameters: "[]"
                    sample_data: >-
                      [{"Subscription":"Netflix","Amount per month":"650","Next
                      renewal":"October 1,
                      2022","Status":""},{"Subscription":"Game pass
                      ultimate","Amount per month":"499","Next renewal":"October
                      3, 2022","Status":""},{"Subscription":"iCloud
                      200GB","Amount per month":"199","Next
                      renewal":"","Status":""},{"Subscription":"Google
                      one","Amount per month":"130","Next renewal":"October 9,
                      2022","Status":""},{"Subscription":"Disney+
                      hotstar","Amount per month":"125","Next renewal":"March 4,
                      2023","Status":""},{"Subscription":"GitHub
                      copilot","Amount per month":"0","Next renewal":"October
                      21, 2022","Status":""},{"Subscription":"Spotify","Amount
                      per month":"119","Next renewal":"October 18,
                      2022","Status":"Cancelled"},{"Subscription":"YouTube
                      premium","Amount per month":"249","Next renewal":"October
                      17, 2022","Status":"Cancelled"},{"Subscription":"Apple
                      one","Amount per month":"365","Next renewal":"October 14,
                      2022","Status":"Cancelled"},{"Subscription":"Amazon
                      prime","Amount per month":"320","Next renewal":"October
                      18, 2022","Status":"Cancelled"}]
                    size: 1
                    source: google-sheet
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: Google sheet test
                  - columns: []
                    config: >-
                      {"url":"mongodb+srv://username:password@cluster0.qllzhbg.mongodb.net/?retryWrites=true&w=majority","database":"admin","collection":"sample_airbnb"}
                    created_at: "2024-01-19T16:39:50.039927+00:00"
                    created_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    description: ""
                    id: 937b32c1-412c-4397-af87-5644ab41bbf7
                    last_updated_at: "2024-01-19T16:48:14.855+00:00"
                    last_updated_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    parameters: "[]"
                    sample_data: "[]"
                    size: 0
                    source: mongodb
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: MongoDB
                  - columns:
                      - description: A unique identifier for the customer across tables
                        title: Customer ID
                      - description: City of residence
                        title: City
                      - description: Country of residence
                        title: Country
                      - description: Segment of customer according to purchasing habits
                        title: Segment
                      - description: State of residence
                        title: State
                      - description: Postal Code of customer
                        title: Postal Code
                      - description: Region of residence
                        title: Region
                    config: >-
                      {"type":"csv","url":"https://eiexmihxmtknazmbqnsa.supabase.co/storage/v1/object/public/assets/Sample%20Customers.csv"}
                    created_at: "2024-01-18T09:58:05.210116+00:00"
                    created_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    description: >-
                      A sample datasource containing the details of customers in
                      an e-commerce setting
                    id: fb252707-58e5-4958-bbe4-e1bab726a7ee
                    last_updated_at: "2024-01-18T09:58:05.210116+00:00"
                    last_updated_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    parameters: "[]"
                    sample_data: >-
                      [{"Customer
                      ID":"CG-12520","City":"Henderson","Country":"United
                      States","Segment":"Consumer","State":"Kentucky","Postal
                      Code":"42420","Region":"South"},{"Customer
                      ID":"DV-13045","City":"Los Angeles","Country":"United
                      States","Segment":"Corporate","State":"California","Postal
                      Code":"90036","Region":"West"},{"Customer
                      ID":"SO-20335","City":"Fort Lauderdale","Country":"United
                      States","Segment":"Consumer","State":"Florida","Postal
                      Code":"33311","Region":"South"},{"Customer
                      ID":"BH-11710","City":"Los Angeles","Country":"United
                      States","Segment":"Consumer","State":"California","Postal
                      Code":"90032","Region":"West"},{"Customer
                      ID":"AA-10480","City":"Concord","Country":"United
                      States","Segment":"Consumer","State":"North
                      Carolina","Postal
                      Code":"28027","Region":"South"},{"Customer
                      ID":"IM-15070","City":"Seattle","Country":"United
                      States","Segment":"Consumer","State":"Washington","Postal
                      Code":"98103","Region":"West"},{"Customer
                      ID":"HP-14815","City":"Fort Worth","Country":"United
                      States","Segment":"Home Office","State":"Texas","Postal
                      Code":"76106","Region":"Central"},{"Customer
                      ID":"PK-19075","City":"Madison","Country":"United
                      States","Segment":"Consumer","State":"Wisconsin","Postal
                      Code":"53711","Region":"Central"},{"Customer
                      ID":"AG-10270","City":"West Jordan","Country":"United
                      States","Segment":"Consumer","State":"Utah","Postal
                      Code":"84084","Region":"West"},{"Customer
                      ID":"ZD-21925","City":"San Francisco","Country":"United
                      States","Segment":"Consumer","State":"California","Postal
                      Code":"94109","Region":"West"}]
                    size: 118
                    source: file
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: Sample Customers
                  - columns:
                      - description: A serial number for every row
                        title: Row ID
                      - description: A unique ID for every order
                        title: Order ID
                      - description: Order Date in YYYY-MM-DD format
                        title: Order Date
                      - description: Ship Date in YYYY-MM-DD format
                        title: Ship Date
                      - description: The type of shipping for the order
                        title: Ship Mode
                      - description: Customer ID
                        title: Customer ID
                      - description: Product ID
                        title: Product ID
                      - description: Category of product
                        title: Category
                      - description: Sub-Category of product
                        title: Sub-Category
                      - description: name of the product
                        title: Product Name
                      - description: Sales price in USD
                        title: Sales
                      - description: Quantity as a whole number
                        title: Quantity
                      - description: Discount as a percentage from 0-1
                        title: Discount
                      - description: Profit in USD (can be negative)
                        title: Profit
                    config: >-
                      {"type":"csv","url":"https://eiexmihxmtknazmbqnsa.supabase.co/storage/v1/object/public/assets/Sample%20Orders.csv"}
                    created_at: "2024-01-18T09:58:05.300625+00:00"
                    created_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    description: >-
                      A sample datasource containing the details of orders in an
                      e-commerce setting
                    id: fbef48dd-177e-4512-a906-bf5791e1bf05
                    last_updated_at: "2024-01-18T09:58:05.300625+00:00"
                    last_updated_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    parameters: "[]"
                    sample_data: >-
                      [{"Row ID":"1","Order ID":"CA-2017-152156","Order
                      Date":"2017-11-08","Ship Date":"2017-11-11","Ship
                      Mode":"Second Class","Customer ID":"CG-12520","Product
                      ID":"FUR-BO-10001798","Category":"Furniture","Sub-Category":"Bookcases","Product
                      Name":"Bush Somerset Collection
                      Bookcase","Sales":"261.96","Quantity":"2","Discount":"0","Profit":"41.9136"},{"Row
                      ID":"2","Order ID":"CA-2017-152156","Order
                      Date":"2017-11-08","Ship Date":"2017-11-11","Ship
                      Mode":"Second Class","Customer ID":"CG-12520","Product
                      ID":"FUR-CH-10000454","Category":"Furniture","Sub-Category":"Chairs","Product
                      Name":"Hon Deluxe Fabric Upholstered Stacking Chairs,
                      Rounded
                      Back","Sales":"731.94","Quantity":"3","Discount":"0","Profit":"219.582"},{"Row
                      ID":"3","Order ID":"CA-2017-138688","Order
                      Date":"2017-06-12","Ship Date":"2017-06-16","Ship
                      Mode":"Second Class","Customer ID":"DV-13045","Product
                      ID":"OFF-LA-10000240","Category":"Office
                      Supplies","Sub-Category":"Labels","Product
                      Name":"Self-Adhesive Address Labels for Typewriters by
                      Universal","Sales":"14.62","Quantity":"2","Discount":"0","Profit":"6.8714"},{"Row
                      ID":"4","Order ID":"US-2016-108966","Order
                      Date":"2016-10-11","Ship Date":"2016-10-18","Ship
                      Mode":"Standard Class","Customer ID":"SO-20335","Product
                      ID":"FUR-TA-10000577","Category":"Furniture","Sub-Category":"Tables","Product
                      Name":"Bretford CR4500 Series Slim Rectangular
                      Table","Sales":"957.5775","Quantity":"5","Discount":"0.45","Profit":"-383.031"},{"Row
                      ID":"5","Order ID":"US-2016-108966","Order
                      Date":"2016-10-11","Ship Date":"2016-10-18","Ship
                      Mode":"Standard Class","Customer ID":"SO-20335","Product
                      ID":"OFF-ST-10000760","Category":"Office
                      Supplies","Sub-Category":"Storage","Product Name":"Eldon
                      Fold 'N Roll Cart
                      System","Sales":"22.368","Quantity":"2","Discount":"0.2","Profit":"2.5164"},{"Row
                      ID":"6","Order ID":"CA-2015-115812","Order
                      Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                      Mode":"Standard Class","Customer ID":"BH-11710","Product
                      ID":"FUR-FU-10001487","Category":"Furniture","Sub-Category":"Furnishings","Product
                      Name":"Eldon Expressions Wood and Plastic Desk
                      Accessories, Cherry
                      Wood","Sales":"48.86","Quantity":"7","Discount":"0","Profit":"14.1694"},{"Row
                      ID":"7","Order ID":"CA-2015-115812","Order
                      Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                      Mode":"Standard Class","Customer ID":"BH-11710","Product
                      ID":"OFF-AR-10002833","Category":"Office
                      Supplies","Sub-Category":"Art","Product Name":"Newell
                      322","Sales":"7.28","Quantity":"4","Discount":"0","Profit":"1.9656"},{"Row
                      ID":"8","Order ID":"CA-2015-115812","Order
                      Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                      Mode":"Standard Class","Customer ID":"BH-11710","Product
                      ID":"TEC-PH-10002275","Category":"Technology","Sub-Category":"Phones","Product
                      Name":"Mitel 5320 IP Phone VoIP
                      phone","Sales":"907.152","Quantity":"6","Discount":"0.2","Profit":"90.7152"},{"Row
                      ID":"9","Order ID":"CA-2015-115812","Order
                      Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                      Mode":"Standard Class","Customer ID":"BH-11710","Product
                      ID":"OFF-BI-10003910","Category":"Office
                      Supplies","Sub-Category":"Binders","Product Name":"DXL
                      Angle-View Binders with Locking Rings by
                      Samsill","Sales":"18.504","Quantity":"3","Discount":"0.2","Profit":"5.7825"},{"Row
                      ID":"10","Order ID":"CA-2015-115812","Order
                      Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                      Mode":"Standard Class","Customer ID":"BH-11710","Product
                      ID":"OFF-AP-10002892","Category":"Office
                      Supplies","Sub-Category":"Appliances","Product
                      Name":"Belkin F5C206VTEL 6 Outlet
                      Surge","Sales":"114.9","Quantity":"5","Discount":"0","Profit":"34.47"}]
                    size: 3454
                    source: file
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: Sample Orders
                  - columns:
                      - description: A unique identifier for the customer across tables
                        title: Customer ID
                      - description: City of residence
                        title: City
                      - description: Country of residence
                        title: Country
                      - description: Segment of customer according to purchasing habits
                        title: Segment
                      - description: State of residence
                        title: State
                      - description: Postal Code of customer
                        title: Postal Code
                      - description: Region of residence
                        title: Region
                    config: >-
                      {"type":"csv","url":"https://eiexmihxmtknazmbqnsa.supabase.co/storage/v1/object/public/assets/Sample%20Customers.csv"}
                    created_at: "2024-01-21T15:54:42.14785+00:00"
                    created_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    description: >-
                      A sample datasource containing the details of customers in
                      an e-commerce setting
                    id: bce247c9-079a-414f-af8f-49a24598d8b9
                    last_updated_at: "2024-01-21T15:54:42.14785+00:00"
                    last_updated_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    parameters: "[]"
                    sample_data: >-
                      [{"Customer
                      ID":"CG-12520","City":"Henderson","Country":"United
                      States","Segment":"Consumer","State":"Kentucky","Postal
                      Code":"42420","Region":"South"},{"Customer
                      ID":"DV-13045","City":"Los Angeles","Country":"United
                      States","Segment":"Corporate","State":"California","Postal
                      Code":"90036","Region":"West"},{"Customer
                      ID":"SO-20335","City":"Fort Lauderdale","Country":"United
                      States","Segment":"Consumer","State":"Florida","Postal
                      Code":"33311","Region":"South"},{"Customer
                      ID":"BH-11710","City":"Los Angeles","Country":"United
                      States","Segment":"Consumer","State":"California","Postal
                      Code":"90032","Region":"West"},{"Customer
                      ID":"AA-10480","City":"Concord","Country":"United
                      States","Segment":"Consumer","State":"North
                      Carolina","Postal
                      Code":"28027","Region":"South"},{"Customer
                      ID":"IM-15070","City":"Seattle","Country":"United
                      States","Segment":"Consumer","State":"Washington","Postal
                      Code":"98103","Region":"West"},{"Customer
                      ID":"HP-14815","City":"Fort Worth","Country":"United
                      States","Segment":"Home Office","State":"Texas","Postal
                      Code":"76106","Region":"Central"},{"Customer
                      ID":"PK-19075","City":"Madison","Country":"United
                      States","Segment":"Consumer","State":"Wisconsin","Postal
                      Code":"53711","Region":"Central"},{"Customer
                      ID":"AG-10270","City":"West Jordan","Country":"United
                      States","Segment":"Consumer","State":"Utah","Postal
                      Code":"84084","Region":"West"},{"Customer
                      ID":"ZD-21925","City":"San Francisco","Country":"United
                      States","Segment":"Consumer","State":"California","Postal
                      Code":"94109","Region":"West"}]
                    size: 118
                    source: file
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: Sample Customers
                  - columns:
                      - description: A serial number for every row
                        title: Row ID
                      - description: A unique ID for every order
                        title: Order ID
                      - description: Order Date in YYYY-MM-DD format
                        title: Order Date
                      - description: Ship Date in YYYY-MM-DD format
                        title: Ship Date
                      - description: The type of shipping for the order
                        title: Ship Mode
                      - description: Customer ID
                        title: Customer ID
                      - description: Product ID
                        title: Product ID
                      - description: Category of product
                        title: Category
                      - description: Sub-Category of product
                        title: Sub-Category
                      - description: name of the product
                        title: Product Name
                      - description: Sales price in USD
                        title: Sales
                      - description: Quantity as a whole number
                        title: Quantity
                      - description: Discount as a percentage from 0-1
                        title: Discount
                      - description: Profit in USD (can be negative)
                        title: Profit
                    config: >-
                      {"type":"csv","url":"https://eiexmihxmtknazmbqnsa.supabase.co/storage/v1/object/public/assets/Sample%20Orders.csv"}
                    created_at: "2024-01-21T15:54:42.161692+00:00"
                    created_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    description: >-
                      A sample datasource containing the details of orders in an
                      e-commerce setting
                    id: a0242622-ca73-4353-87b1-4e0af2051b07
                    last_updated_at: "2024-01-21T15:54:42.161692+00:00"
                    last_updated_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    parameters: "[]"
                    sample_data: >-
                      [{"Row ID":"1","Order ID":"CA-2017-152156","Order
                      Date":"2017-11-08","Ship Date":"2017-11-11","Ship
                      Mode":"Second Class","Customer ID":"CG-12520","Product
                      ID":"FUR-BO-10001798","Category":"Furniture","Sub-Category":"Bookcases","Product
                      Name":"Bush Somerset Collection
                      Bookcase","Sales":"261.96","Quantity":"2","Discount":"0","Profit":"41.9136"},{"Row
                      ID":"2","Order ID":"CA-2017-152156","Order
                      Date":"2017-11-08","Ship Date":"2017-11-11","Ship
                      Mode":"Second Class","Customer ID":"CG-12520","Product
                      ID":"FUR-CH-10000454","Category":"Furniture","Sub-Category":"Chairs","Product
                      Name":"Hon Deluxe Fabric Upholstered Stacking Chairs,
                      Rounded
                      Back","Sales":"731.94","Quantity":"3","Discount":"0","Profit":"219.582"},{"Row
                      ID":"3","Order ID":"CA-2017-138688","Order
                      Date":"2017-06-12","Ship Date":"2017-06-16","Ship
                      Mode":"Second Class","Customer ID":"DV-13045","Product
                      ID":"OFF-LA-10000240","Category":"Office
                      Supplies","Sub-Category":"Labels","Product
                      Name":"Self-Adhesive Address Labels for Typewriters by
                      Universal","Sales":"14.62","Quantity":"2","Discount":"0","Profit":"6.8714"},{"Row
                      ID":"4","Order ID":"US-2016-108966","Order
                      Date":"2016-10-11","Ship Date":"2016-10-18","Ship
                      Mode":"Standard Class","Customer ID":"SO-20335","Product
                      ID":"FUR-TA-10000577","Category":"Furniture","Sub-Category":"Tables","Product
                      Name":"Bretford CR4500 Series Slim Rectangular
                      Table","Sales":"957.5775","Quantity":"5","Discount":"0.45","Profit":"-383.031"},{"Row
                      ID":"5","Order ID":"US-2016-108966","Order
                      Date":"2016-10-11","Ship Date":"2016-10-18","Ship
                      Mode":"Standard Class","Customer ID":"SO-20335","Product
                      ID":"OFF-ST-10000760","Category":"Office
                      Supplies","Sub-Category":"Storage","Product Name":"Eldon
                      Fold 'N Roll Cart
                      System","Sales":"22.368","Quantity":"2","Discount":"0.2","Profit":"2.5164"},{"Row
                      ID":"6","Order ID":"CA-2015-115812","Order
                      Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                      Mode":"Standard Class","Customer ID":"BH-11710","Product
                      ID":"FUR-FU-10001487","Category":"Furniture","Sub-Category":"Furnishings","Product
                      Name":"Eldon Expressions Wood and Plastic Desk
                      Accessories, Cherry
                      Wood","Sales":"48.86","Quantity":"7","Discount":"0","Profit":"14.1694"},{"Row
                      ID":"7","Order ID":"CA-2015-115812","Order
                      Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                      Mode":"Standard Class","Customer ID":"BH-11710","Product
                      ID":"OFF-AR-10002833","Category":"Office
                      Supplies","Sub-Category":"Art","Product Name":"Newell
                      322","Sales":"7.28","Quantity":"4","Discount":"0","Profit":"1.9656"},{"Row
                      ID":"8","Order ID":"CA-2015-115812","Order
                      Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                      Mode":"Standard Class","Customer ID":"BH-11710","Product
                      ID":"TEC-PH-10002275","Category":"Technology","Sub-Category":"Phones","Product
                      Name":"Mitel 5320 IP Phone VoIP
                      phone","Sales":"907.152","Quantity":"6","Discount":"0.2","Profit":"90.7152"},{"Row
                      ID":"9","Order ID":"CA-2015-115812","Order
                      Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                      Mode":"Standard Class","Customer ID":"BH-11710","Product
                      ID":"OFF-BI-10003910","Category":"Office
                      Supplies","Sub-Category":"Binders","Product Name":"DXL
                      Angle-View Binders with Locking Rings by
                      Samsill","Sales":"18.504","Quantity":"3","Discount":"0.2","Profit":"5.7825"},{"Row
                      ID":"10","Order ID":"CA-2015-115812","Order
                      Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                      Mode":"Standard Class","Customer ID":"BH-11710","Product
                      ID":"OFF-AP-10002892","Category":"Office
                      Supplies","Sub-Category":"Appliances","Product
                      Name":"Belkin F5C206VTEL 6 Outlet
                      Surge","Sales":"114.9","Quantity":"5","Discount":"0","Profit":"34.47"}]
                    size: 3454
                    source: file
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: Sample Orders
                  - columns: []
                    config: '{"company_id":3018,"resource":"bank_accounts"}'
                    created_at: "2024-01-23T10:53:16.403091+00:00"
                    created_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    description: ""
                    id: dc7c03cb-89ed-4036-a597-6086760be083
                    last_updated_at: "2024-01-23T11:25:27.737+00:00"
                    last_updated_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    parameters: "[]"
                    sample_data: "[]"
                    size: 0
                    source: quickbooks
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    title: Quickbooks test
              examples:
                Success:
                  value:
                    - columns:
                        - description: The state where the customer is located.
                          title: State
                        - description: The unique identifier for the customer.
                          title: Customer ID
                        - description: The city where the customer is located.
                          title: City
                        - description: >-
                            The customer segment (e.g., Consumer, Corporate,
                            etc.).
                          title: Segment
                        - description: The country where the customer is located.
                          title: Country
                        - description: The postal code of the customer's location.
                          title: Postal Code
                        - description: The region where the customer is located.
                          title: Region
                      config: >-
                        {"baseId":"appV4eljLGnPbPnUU","baseName":"Sample
                        Customers.csv","tableId":"tbl7ZBUFUNA3kx7GL","tableName":"Imported
                        table"}
                      created_at: "2024-01-17T11:55:26.929359+00:00"
                      created_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      description: ""
                      id: 2e335065-0fb5-47c0-97b0-e603a15efdd8
                      last_updated_at: "2024-01-17T12:00:03.629+00:00"
                      last_updated_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      parameters: "[]"
                      sample_data: >-
                        [{"State":"Michigan","Customer
                        ID":"PO-18865","City":"Westland","Segment":"Consumer","Country":"United
                        States","Postal
                        Code":"48185","Region":"Central"},{"State":"South
                        Dakota","Customer ID":"EM-13825","City":"Sioux
                        Falls","Segment":"Corporate","Country":"United
                        States","Postal
                        Code":"57103","Region":"Central"},{"State":"Missouri","Customer
                        ID":"MC-17635","City":"Saint
                        Louis","Segment":"Corporate","Country":"United
                        States","Postal
                        Code":"63116","Region":"Central"},{"State":"Delaware","Customer
                        ID":"VM-21835","City":"Newark","Segment":"Consumer","Country":"United
                        States","Postal
                        Code":"19711","Region":"East"},{"State":"New
                        York","Customer ID":"AP-10720","City":"New York
                        City","Segment":"Home Office","Country":"United
                        States","Postal
                        Code":"10035","Region":"East"},{"State":"Virginia","Customer
                        ID":"AS-10090","City":"Charlottesville","Segment":"Consumer","Country":"United
                        States","Postal
                        Code":"22901","Region":"South"},{"State":"Tennessee","Customer
                        ID":"JE-15745","City":"Memphis","Segment":"Consumer","Country":"United
                        States","Postal
                        Code":"38109","Region":"South"},{"State":"Illinois","Customer
                        ID":"KL-16645","City":"Chicago","Segment":"Consumer","Country":"United
                        States","Postal
                        Code":"60610","Region":"Central"},{"State":"Ohio","Customer
                        ID":"JR-16210","City":"Springfield","Segment":"Corporate","Country":"United
                        States","Postal
                        Code":"45503","Region":"East"},{"State":"New
                        York","Customer ID":"JG-15805","City":"New York
                        City","Segment":"Corporate","Country":"United
                        States","Postal Code":"10024","Region":"East"}]
                      size: 15
                      source: airtable
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      title: Airtable test
                    - columns:
                        - description: The date in the format 'D-Mon'
                          title: Date
                        - description: The name of the guest
                          title: Guest
                        - description: The phone number of the guest
                          title: Phone number
                        - description: The total number of nights stayed
                          title: Total nights
                        - description: >-
                            The confirmed amount in currency format (e.g.,
                            '3,880.00')
                          title: Confirmed Amt
                        - description: The GST amount in currency format (e.g., '200.00')
                          title: GST
                        - description: >-
                            The amount received by the bank in currency format
                            (e.g., '3,680.00')
                          title: Received by Bank
                      config: >-
                        {"url":"http://localhost:54321/storage/v1/object/sign/data-sources/ee5b08c6-5167-4425-bbc3-a746fe4a7ead/datasource:30f1b94c-a03d-41aa-bb2a-bc94890f1926/Airbnb.csv?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJkYXRhLXNvdXJjZXMvZWU1YjA4YzYtNTE2Ny00NDI1LWJiYzMtYTc0NmZlNGE3ZWFkL2RhdGFzb3VyY2U6MzBmMWI5NGMtYTAzZC00MWFhLWJiMmEtYmM5NDg5MGYxOTI2L0FpcmJuYi5jc3YiLCJpYXQiOjE3MDU1MDkwNzgsImV4cCI6MTczNzA0NTA3OH0.kstAzDO6_pizKI8wQAvQkNCmHoVNzfiJjbcJtpHJ5vo","filename":"Airbnb.csv","type":"csv"}
                      created_at: "2024-01-17T16:31:06.014144+00:00"
                      created_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      description: ""
                      id: 30f1b94c-a03d-41aa-bb2a-bc94890f1926
                      last_updated_at: "2024-01-17T16:31:28.528+00:00"
                      last_updated_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      parameters: "[]"
                      sample_data: >-
                        [{"Date":"1-Jul","Guest":"Siddharth Manmdhan","Phone
                        number":"","Total nights":"1","Confirmed Amt":"
                        \t3,880.00","GST":"200.00","Received by Bank":"
                        \t3,680.00"},{"Date":"6-Jul","Guest":"John Umman","Phone
                        number":"","Total nights":"1","Confirmed Amt":"
                        \t3,880.00","GST":"200.00","Received by Bank":"
                        \t3,680.00"},{"Date":"8-Jul","Guest":"Irshad PP","Phone
                        number":"","Total nights":"1","Confirmed Amt":"
                        \t3,880.00","GST":"200.00","Received by Bank":"
                        \t3,680.00"},{"Date":"9-Jul","Guest":"Avith M
                        Lal","Phone number":"","Total nights":"1","Confirmed
                        Amt":" \t3,317.40","GST":"171.00","Received by Bank":"
                        \t3,146.40"},{"Date":"11-Jul","Guest":"Shams
                        Nazar","Phone number":"","Total nights":"2","Confirmed
                        Amt":" \t7,760.00","GST":"400.00","Received by Bank":"
                        \t7,360.00"},{"Date":"14-Jul","Guest":"Kevin
                        Thomas","Phone number":"","Total nights":"1","Confirmed
                        Amt":" \t3,317.40","GST":"171.00","Received by Bank":"
                        \t3,146.40"},{"Date":"15-Jul","Guest":"Kevin
                        Thomas","Phone number":"","Total nights":"1","Confirmed
                        Amt":" \t3,880.00","GST":"200.00","Received by Bank":"
                        \t3,680.00"},{"Date":"16-Jul","Guest":"Anna Binu","Phone
                        number":"","Total nights":"1","Confirmed Amt":"
                        \t3,298.00","GST":"170.00","Received by Bank":"
                        \t3,128.00"},{"Date":"18-Jul","Guest":"Faiza M","Phone
                        number":"","Total nights":"2","Confirmed Amt":"
                        \t7,760.00","GST":"400.00","Received by Bank":"
                        \t7,360.00"},{"Date":"22-Jul","Guest":"Prabhath
                        CA","Phone number":"","Total nights":"1","Confirmed
                        Amt":" \t3,880.00","GST":"200.00","Received by Bank":"
                        \t3,680.00"}]
                      size: 4
                      source: file
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      title: File test
                    - columns:
                        - description: The name of the subscription service (string)
                          title: Subscription
                        - description: The monthly subscription amount in currency (number)
                          title: Amount per month
                        - description: >-
                            The date of the next renewal in the format 'Month
                            Day, Year' (string)
                          title: Next renewal
                        - description: The status of the subscription (string)
                          title: Status
                      config: >-
                        {"docId":"1-LSXe4MAkOsN0xIKqk3kPQUWksFHsW8QZYG8pYW96GE","sheetId":0,"sheetName":"Sheet1"}
                      created_at: "2024-01-17T16:31:47.377513+00:00"
                      created_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      description: ""
                      id: 9fa19a4d-8852-4228-b0f5-f10ade43f576
                      last_updated_at: "2024-01-17T16:38:54.071+00:00"
                      last_updated_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      parameters: "[]"
                      sample_data: >-
                        [{"Subscription":"Netflix","Amount per
                        month":"650","Next renewal":"October 1,
                        2022","Status":""},{"Subscription":"Game pass
                        ultimate","Amount per month":"499","Next
                        renewal":"October 3,
                        2022","Status":""},{"Subscription":"iCloud
                        200GB","Amount per month":"199","Next
                        renewal":"","Status":""},{"Subscription":"Google
                        one","Amount per month":"130","Next renewal":"October 9,
                        2022","Status":""},{"Subscription":"Disney+
                        hotstar","Amount per month":"125","Next renewal":"March
                        4, 2023","Status":""},{"Subscription":"GitHub
                        copilot","Amount per month":"0","Next renewal":"October
                        21, 2022","Status":""},{"Subscription":"Spotify","Amount
                        per month":"119","Next renewal":"October 18,
                        2022","Status":"Cancelled"},{"Subscription":"YouTube
                        premium","Amount per month":"249","Next
                        renewal":"October 17,
                        2022","Status":"Cancelled"},{"Subscription":"Apple
                        one","Amount per month":"365","Next renewal":"October
                        14, 2022","Status":"Cancelled"},{"Subscription":"Amazon
                        prime","Amount per month":"320","Next renewal":"October
                        18, 2022","Status":"Cancelled"}]
                      size: 1
                      source: google-sheet
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      title: Google sheet test
                    - columns: []
                      config: >-
                        {"url":"mongodb+srv://username:password@cluster0.qllzhbg.mongodb.net/?retryWrites=true&w=majority","database":"admin","collection":"sample_airbnb"}
                      created_at: "2024-01-19T16:39:50.039927+00:00"
                      created_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      description: ""
                      id: 937b32c1-412c-4397-af87-5644ab41bbf7
                      last_updated_at: "2024-01-19T16:48:14.855+00:00"
                      last_updated_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      parameters: "[]"
                      sample_data: "[]"
                      size: 0
                      source: mongodb
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      title: MongoDB
                    - columns:
                        - description: A unique identifier for the customer across tables
                          title: Customer ID
                        - description: City of residence
                          title: City
                        - description: Country of residence
                          title: Country
                        - description: Segment of customer according to purchasing habits
                          title: Segment
                        - description: State of residence
                          title: State
                        - description: Postal Code of customer
                          title: Postal Code
                        - description: Region of residence
                          title: Region
                      config: >-
                        {"type":"csv","url":"https://eiexmihxmtknazmbqnsa.supabase.co/storage/v1/object/public/assets/Sample%20Customers.csv"}
                      created_at: "2024-01-18T09:58:05.210116+00:00"
                      created_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      description: >-
                        A sample datasource containing the details of customers
                        in an e-commerce setting
                      id: fb252707-58e5-4958-bbe4-e1bab726a7ee
                      last_updated_at: "2024-01-18T09:58:05.210116+00:00"
                      last_updated_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      parameters: "[]"
                      sample_data: >-
                        [{"Customer
                        ID":"CG-12520","City":"Henderson","Country":"United
                        States","Segment":"Consumer","State":"Kentucky","Postal
                        Code":"42420","Region":"South"},{"Customer
                        ID":"DV-13045","City":"Los Angeles","Country":"United
                        States","Segment":"Corporate","State":"California","Postal
                        Code":"90036","Region":"West"},{"Customer
                        ID":"SO-20335","City":"Fort
                        Lauderdale","Country":"United
                        States","Segment":"Consumer","State":"Florida","Postal
                        Code":"33311","Region":"South"},{"Customer
                        ID":"BH-11710","City":"Los Angeles","Country":"United
                        States","Segment":"Consumer","State":"California","Postal
                        Code":"90032","Region":"West"},{"Customer
                        ID":"AA-10480","City":"Concord","Country":"United
                        States","Segment":"Consumer","State":"North
                        Carolina","Postal
                        Code":"28027","Region":"South"},{"Customer
                        ID":"IM-15070","City":"Seattle","Country":"United
                        States","Segment":"Consumer","State":"Washington","Postal
                        Code":"98103","Region":"West"},{"Customer
                        ID":"HP-14815","City":"Fort Worth","Country":"United
                        States","Segment":"Home Office","State":"Texas","Postal
                        Code":"76106","Region":"Central"},{"Customer
                        ID":"PK-19075","City":"Madison","Country":"United
                        States","Segment":"Consumer","State":"Wisconsin","Postal
                        Code":"53711","Region":"Central"},{"Customer
                        ID":"AG-10270","City":"West Jordan","Country":"United
                        States","Segment":"Consumer","State":"Utah","Postal
                        Code":"84084","Region":"West"},{"Customer
                        ID":"ZD-21925","City":"San Francisco","Country":"United
                        States","Segment":"Consumer","State":"California","Postal
                        Code":"94109","Region":"West"}]
                      size: 118
                      source: file
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      title: Sample Customers
                    - columns:
                        - description: A serial number for every row
                          title: Row ID
                        - description: A unique ID for every order
                          title: Order ID
                        - description: Order Date in YYYY-MM-DD format
                          title: Order Date
                        - description: Ship Date in YYYY-MM-DD format
                          title: Ship Date
                        - description: The type of shipping for the order
                          title: Ship Mode
                        - description: Customer ID
                          title: Customer ID
                        - description: Product ID
                          title: Product ID
                        - description: Category of product
                          title: Category
                        - description: Sub-Category of product
                          title: Sub-Category
                        - description: name of the product
                          title: Product Name
                        - description: Sales price in USD
                          title: Sales
                        - description: Quantity as a whole number
                          title: Quantity
                        - description: Discount as a percentage from 0-1
                          title: Discount
                        - description: Profit in USD (can be negative)
                          title: Profit
                      config: >-
                        {"type":"csv","url":"https://eiexmihxmtknazmbqnsa.supabase.co/storage/v1/object/public/assets/Sample%20Orders.csv"}
                      created_at: "2024-01-18T09:58:05.300625+00:00"
                      created_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      description: >-
                        A sample datasource containing the details of orders in
                        an e-commerce setting
                      id: fbef48dd-177e-4512-a906-bf5791e1bf05
                      last_updated_at: "2024-01-18T09:58:05.300625+00:00"
                      last_updated_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      parameters: "[]"
                      sample_data: >-
                        [{"Row ID":"1","Order ID":"CA-2017-152156","Order
                        Date":"2017-11-08","Ship Date":"2017-11-11","Ship
                        Mode":"Second Class","Customer ID":"CG-12520","Product
                        ID":"FUR-BO-10001798","Category":"Furniture","Sub-Category":"Bookcases","Product
                        Name":"Bush Somerset Collection
                        Bookcase","Sales":"261.96","Quantity":"2","Discount":"0","Profit":"41.9136"},{"Row
                        ID":"2","Order ID":"CA-2017-152156","Order
                        Date":"2017-11-08","Ship Date":"2017-11-11","Ship
                        Mode":"Second Class","Customer ID":"CG-12520","Product
                        ID":"FUR-CH-10000454","Category":"Furniture","Sub-Category":"Chairs","Product
                        Name":"Hon Deluxe Fabric Upholstered Stacking Chairs,
                        Rounded
                        Back","Sales":"731.94","Quantity":"3","Discount":"0","Profit":"219.582"},{"Row
                        ID":"3","Order ID":"CA-2017-138688","Order
                        Date":"2017-06-12","Ship Date":"2017-06-16","Ship
                        Mode":"Second Class","Customer ID":"DV-13045","Product
                        ID":"OFF-LA-10000240","Category":"Office
                        Supplies","Sub-Category":"Labels","Product
                        Name":"Self-Adhesive Address Labels for Typewriters by
                        Universal","Sales":"14.62","Quantity":"2","Discount":"0","Profit":"6.8714"},{"Row
                        ID":"4","Order ID":"US-2016-108966","Order
                        Date":"2016-10-11","Ship Date":"2016-10-18","Ship
                        Mode":"Standard Class","Customer ID":"SO-20335","Product
                        ID":"FUR-TA-10000577","Category":"Furniture","Sub-Category":"Tables","Product
                        Name":"Bretford CR4500 Series Slim Rectangular
                        Table","Sales":"957.5775","Quantity":"5","Discount":"0.45","Profit":"-383.031"},{"Row
                        ID":"5","Order ID":"US-2016-108966","Order
                        Date":"2016-10-11","Ship Date":"2016-10-18","Ship
                        Mode":"Standard Class","Customer ID":"SO-20335","Product
                        ID":"OFF-ST-10000760","Category":"Office
                        Supplies","Sub-Category":"Storage","Product Name":"Eldon
                        Fold 'N Roll Cart
                        System","Sales":"22.368","Quantity":"2","Discount":"0.2","Profit":"2.5164"},{"Row
                        ID":"6","Order ID":"CA-2015-115812","Order
                        Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                        Mode":"Standard Class","Customer ID":"BH-11710","Product
                        ID":"FUR-FU-10001487","Category":"Furniture","Sub-Category":"Furnishings","Product
                        Name":"Eldon Expressions Wood and Plastic Desk
                        Accessories, Cherry
                        Wood","Sales":"48.86","Quantity":"7","Discount":"0","Profit":"14.1694"},{"Row
                        ID":"7","Order ID":"CA-2015-115812","Order
                        Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                        Mode":"Standard Class","Customer ID":"BH-11710","Product
                        ID":"OFF-AR-10002833","Category":"Office
                        Supplies","Sub-Category":"Art","Product Name":"Newell
                        322","Sales":"7.28","Quantity":"4","Discount":"0","Profit":"1.9656"},{"Row
                        ID":"8","Order ID":"CA-2015-115812","Order
                        Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                        Mode":"Standard Class","Customer ID":"BH-11710","Product
                        ID":"TEC-PH-10002275","Category":"Technology","Sub-Category":"Phones","Product
                        Name":"Mitel 5320 IP Phone VoIP
                        phone","Sales":"907.152","Quantity":"6","Discount":"0.2","Profit":"90.7152"},{"Row
                        ID":"9","Order ID":"CA-2015-115812","Order
                        Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                        Mode":"Standard Class","Customer ID":"BH-11710","Product
                        ID":"OFF-BI-10003910","Category":"Office
                        Supplies","Sub-Category":"Binders","Product Name":"DXL
                        Angle-View Binders with Locking Rings by
                        Samsill","Sales":"18.504","Quantity":"3","Discount":"0.2","Profit":"5.7825"},{"Row
                        ID":"10","Order ID":"CA-2015-115812","Order
                        Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                        Mode":"Standard Class","Customer ID":"BH-11710","Product
                        ID":"OFF-AP-10002892","Category":"Office
                        Supplies","Sub-Category":"Appliances","Product
                        Name":"Belkin F5C206VTEL 6 Outlet
                        Surge","Sales":"114.9","Quantity":"5","Discount":"0","Profit":"34.47"}]
                      size: 3454
                      source: file
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      title: Sample Orders
                    - columns:
                        - description: A unique identifier for the customer across tables
                          title: Customer ID
                        - description: City of residence
                          title: City
                        - description: Country of residence
                          title: Country
                        - description: Segment of customer according to purchasing habits
                          title: Segment
                        - description: State of residence
                          title: State
                        - description: Postal Code of customer
                          title: Postal Code
                        - description: Region of residence
                          title: Region
                      config: >-
                        {"type":"csv","url":"https://eiexmihxmtknazmbqnsa.supabase.co/storage/v1/object/public/assets/Sample%20Customers.csv"}
                      created_at: "2024-01-21T15:54:42.14785+00:00"
                      created_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      description: >-
                        A sample datasource containing the details of customers
                        in an e-commerce setting
                      id: bce247c9-079a-414f-af8f-49a24598d8b9
                      last_updated_at: "2024-01-21T15:54:42.14785+00:00"
                      last_updated_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      parameters: "[]"
                      sample_data: >-
                        [{"Customer
                        ID":"CG-12520","City":"Henderson","Country":"United
                        States","Segment":"Consumer","State":"Kentucky","Postal
                        Code":"42420","Region":"South"},{"Customer
                        ID":"DV-13045","City":"Los Angeles","Country":"United
                        States","Segment":"Corporate","State":"California","Postal
                        Code":"90036","Region":"West"},{"Customer
                        ID":"SO-20335","City":"Fort
                        Lauderdale","Country":"United
                        States","Segment":"Consumer","State":"Florida","Postal
                        Code":"33311","Region":"South"},{"Customer
                        ID":"BH-11710","City":"Los Angeles","Country":"United
                        States","Segment":"Consumer","State":"California","Postal
                        Code":"90032","Region":"West"},{"Customer
                        ID":"AA-10480","City":"Concord","Country":"United
                        States","Segment":"Consumer","State":"North
                        Carolina","Postal
                        Code":"28027","Region":"South"},{"Customer
                        ID":"IM-15070","City":"Seattle","Country":"United
                        States","Segment":"Consumer","State":"Washington","Postal
                        Code":"98103","Region":"West"},{"Customer
                        ID":"HP-14815","City":"Fort Worth","Country":"United
                        States","Segment":"Home Office","State":"Texas","Postal
                        Code":"76106","Region":"Central"},{"Customer
                        ID":"PK-19075","City":"Madison","Country":"United
                        States","Segment":"Consumer","State":"Wisconsin","Postal
                        Code":"53711","Region":"Central"},{"Customer
                        ID":"AG-10270","City":"West Jordan","Country":"United
                        States","Segment":"Consumer","State":"Utah","Postal
                        Code":"84084","Region":"West"},{"Customer
                        ID":"ZD-21925","City":"San Francisco","Country":"United
                        States","Segment":"Consumer","State":"California","Postal
                        Code":"94109","Region":"West"}]
                      size: 118
                      source: file
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      title: Sample Customers
                    - columns:
                        - description: A serial number for every row
                          title: Row ID
                        - description: A unique ID for every order
                          title: Order ID
                        - description: Order Date in YYYY-MM-DD format
                          title: Order Date
                        - description: Ship Date in YYYY-MM-DD format
                          title: Ship Date
                        - description: The type of shipping for the order
                          title: Ship Mode
                        - description: Customer ID
                          title: Customer ID
                        - description: Product ID
                          title: Product ID
                        - description: Category of product
                          title: Category
                        - description: Sub-Category of product
                          title: Sub-Category
                        - description: name of the product
                          title: Product Name
                        - description: Sales price in USD
                          title: Sales
                        - description: Quantity as a whole number
                          title: Quantity
                        - description: Discount as a percentage from 0-1
                          title: Discount
                        - description: Profit in USD (can be negative)
                          title: Profit
                      config: >-
                        {"type":"csv","url":"https://eiexmihxmtknazmbqnsa.supabase.co/storage/v1/object/public/assets/Sample%20Orders.csv"}
                      created_at: "2024-01-21T15:54:42.161692+00:00"
                      created_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      description: >-
                        A sample datasource containing the details of orders in
                        an e-commerce setting
                      id: a0242622-ca73-4353-87b1-4e0af2051b07
                      last_updated_at: "2024-01-21T15:54:42.161692+00:00"
                      last_updated_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      parameters: "[]"
                      sample_data: >-
                        [{"Row ID":"1","Order ID":"CA-2017-152156","Order
                        Date":"2017-11-08","Ship Date":"2017-11-11","Ship
                        Mode":"Second Class","Customer ID":"CG-12520","Product
                        ID":"FUR-BO-10001798","Category":"Furniture","Sub-Category":"Bookcases","Product
                        Name":"Bush Somerset Collection
                        Bookcase","Sales":"261.96","Quantity":"2","Discount":"0","Profit":"41.9136"},{"Row
                        ID":"2","Order ID":"CA-2017-152156","Order
                        Date":"2017-11-08","Ship Date":"2017-11-11","Ship
                        Mode":"Second Class","Customer ID":"CG-12520","Product
                        ID":"FUR-CH-10000454","Category":"Furniture","Sub-Category":"Chairs","Product
                        Name":"Hon Deluxe Fabric Upholstered Stacking Chairs,
                        Rounded
                        Back","Sales":"731.94","Quantity":"3","Discount":"0","Profit":"219.582"},{"Row
                        ID":"3","Order ID":"CA-2017-138688","Order
                        Date":"2017-06-12","Ship Date":"2017-06-16","Ship
                        Mode":"Second Class","Customer ID":"DV-13045","Product
                        ID":"OFF-LA-10000240","Category":"Office
                        Supplies","Sub-Category":"Labels","Product
                        Name":"Self-Adhesive Address Labels for Typewriters by
                        Universal","Sales":"14.62","Quantity":"2","Discount":"0","Profit":"6.8714"},{"Row
                        ID":"4","Order ID":"US-2016-108966","Order
                        Date":"2016-10-11","Ship Date":"2016-10-18","Ship
                        Mode":"Standard Class","Customer ID":"SO-20335","Product
                        ID":"FUR-TA-10000577","Category":"Furniture","Sub-Category":"Tables","Product
                        Name":"Bretford CR4500 Series Slim Rectangular
                        Table","Sales":"957.5775","Quantity":"5","Discount":"0.45","Profit":"-383.031"},{"Row
                        ID":"5","Order ID":"US-2016-108966","Order
                        Date":"2016-10-11","Ship Date":"2016-10-18","Ship
                        Mode":"Standard Class","Customer ID":"SO-20335","Product
                        ID":"OFF-ST-10000760","Category":"Office
                        Supplies","Sub-Category":"Storage","Product Name":"Eldon
                        Fold 'N Roll Cart
                        System","Sales":"22.368","Quantity":"2","Discount":"0.2","Profit":"2.5164"},{"Row
                        ID":"6","Order ID":"CA-2015-115812","Order
                        Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                        Mode":"Standard Class","Customer ID":"BH-11710","Product
                        ID":"FUR-FU-10001487","Category":"Furniture","Sub-Category":"Furnishings","Product
                        Name":"Eldon Expressions Wood and Plastic Desk
                        Accessories, Cherry
                        Wood","Sales":"48.86","Quantity":"7","Discount":"0","Profit":"14.1694"},{"Row
                        ID":"7","Order ID":"CA-2015-115812","Order
                        Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                        Mode":"Standard Class","Customer ID":"BH-11710","Product
                        ID":"OFF-AR-10002833","Category":"Office
                        Supplies","Sub-Category":"Art","Product Name":"Newell
                        322","Sales":"7.28","Quantity":"4","Discount":"0","Profit":"1.9656"},{"Row
                        ID":"8","Order ID":"CA-2015-115812","Order
                        Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                        Mode":"Standard Class","Customer ID":"BH-11710","Product
                        ID":"TEC-PH-10002275","Category":"Technology","Sub-Category":"Phones","Product
                        Name":"Mitel 5320 IP Phone VoIP
                        phone","Sales":"907.152","Quantity":"6","Discount":"0.2","Profit":"90.7152"},{"Row
                        ID":"9","Order ID":"CA-2015-115812","Order
                        Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                        Mode":"Standard Class","Customer ID":"BH-11710","Product
                        ID":"OFF-BI-10003910","Category":"Office
                        Supplies","Sub-Category":"Binders","Product Name":"DXL
                        Angle-View Binders with Locking Rings by
                        Samsill","Sales":"18.504","Quantity":"3","Discount":"0.2","Profit":"5.7825"},{"Row
                        ID":"10","Order ID":"CA-2015-115812","Order
                        Date":"2015-06-09","Ship Date":"2015-06-14","Ship
                        Mode":"Standard Class","Customer ID":"BH-11710","Product
                        ID":"OFF-AP-10002892","Category":"Office
                        Supplies","Sub-Category":"Appliances","Product
                        Name":"Belkin F5C206VTEL 6 Outlet
                        Surge","Sales":"114.9","Quantity":"5","Discount":"0","Profit":"34.47"}]
                      size: 3454
                      source: file
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      title: Sample Orders
                    - columns: []
                      config: '{"company_id":3018,"resource":"bank_accounts"}'
                      created_at: "2024-01-23T10:53:16.403091+00:00"
                      created_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      description: ""
                      id: dc7c03cb-89ed-4036-a597-6086760be083
                      last_updated_at: "2024-01-23T11:25:27.737+00:00"
                      last_updated_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      parameters: "[]"
                      sample_data: "[]"
                      size: 0
                      source: quickbooks
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      title: Quickbooks test
  /api/automations:
    get:
      tags:
        - Automations
      summary: Get all automations
      description: Get all automations
      operationId: getAllAutomations
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 15:50:34 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      type: string
                      example: "2024-01-22T13:09:16.847+00:00"
                    created_by:
                      type: object
                      properties:
                        avatar_url:
                          type: string
                          example: >-
                            https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email:
                          type: string
                          example: ronneldavis1996@gmail.com
                        full_name:
                          type: string
                          example: Ronnel Davis
                        id:
                          type: string
                          example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number:
                          type: string
                          example: "8075065108"
                        updated_at:
                          type: string
                          example: "2024-01-17T10:14:12.62603+00:00"
                    dashboard:
                      type: object
                      properties:
                        id:
                          type: string
                          example: c5d37456-a042-4177-ab5f-69563f07937d
                        title:
                          type: string
                          example: Sample E-commerce dashboard
                    description:
                      type: string
                      example: ""
                    email_format:
                      type: string
                      example: ""
                    email_subject:
                      type: string
                      example: ""
                    enabled:
                      type: boolean
                      example: false
                    id:
                      type: string
                      example: a8a95eeb-a54c-42eb-8d41-276217368105
                    last_run_at:
                      nullable: true
                      example: null
                    last_updated_at:
                      type: string
                      example: "2024-01-22T13:09:16.847+00:00"
                    last_updated_by:
                      type: object
                      properties:
                        avatar_url:
                          type: string
                          example: >-
                            https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email:
                          type: string
                          example: ronneldavis1996@gmail.com
                        full_name:
                          type: string
                          example: Ronnel Davis
                        id:
                          type: string
                          example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number:
                          type: string
                          example: "8075065108"
                        updated_at:
                          type: string
                          example: "2024-01-17T10:14:12.62603+00:00"
                    next_run_at:
                      nullable: true
                      example: null
                    output_format:
                      type: string
                      example: link
                    recipient_type:
                      type: string
                      example: internal
                    recipients:
                      type: array
                      items: {}
                      example: []
                    schedule:
                      type: string
                      example: ""
                    team:
                      type: string
                      example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    timezone:
                      type: string
                      example: Asia/Calcutta
                    title:
                      type: string
                      example: First automation
                example:
                  - created_at: "2024-01-22T13:09:16.847+00:00"
                    created_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    dashboard:
                      id: c5d37456-a042-4177-ab5f-69563f07937d
                      title: Sample E-commerce dashboard
                    description: ""
                    email_format: ""
                    email_subject: ""
                    enabled: false
                    id: a8a95eeb-a54c-42eb-8d41-276217368105
                    last_run_at: null
                    last_updated_at: "2024-01-22T13:09:16.847+00:00"
                    last_updated_by:
                      avatar_url: >-
                        https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                      email: ronneldavis1996@gmail.com
                      full_name: Ronnel Davis
                      id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                      phone_number: "8075065108"
                      updated_at: "2024-01-17T10:14:12.62603+00:00"
                    next_run_at: null
                    output_format: link
                    recipient_type: internal
                    recipients: []
                    schedule: ""
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    timezone: Asia/Calcutta
                    title: First automation
              examples:
                Success:
                  value:
                    - created_at: "2024-01-22T13:09:16.847+00:00"
                      created_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      dashboard:
                        id: c5d37456-a042-4177-ab5f-69563f07937d
                        title: Sample E-commerce dashboard
                      description: ""
                      email_format: ""
                      email_subject: ""
                      enabled: false
                      id: a8a95eeb-a54c-42eb-8d41-276217368105
                      last_run_at: null
                      last_updated_at: "2024-01-22T13:09:16.847+00:00"
                      last_updated_by:
                        avatar_url: >-
                          https://upload.wikimedia.org/wikipedia/commons/8/89/Portrait_Placeholder.png
                        email: ronneldavis1996@gmail.com
                        full_name: Ronnel Davis
                        id: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                        phone_number: "8075065108"
                        updated_at: "2024-01-17T10:14:12.62603+00:00"
                      next_run_at: null
                      output_format: link
                      recipient_type: internal
                      recipients: []
                      schedule: ""
                      team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      timezone: Asia/Calcutta
                      title: First automation
    put:
      tags:
        - Automations
      summary: Create automation
      description: Create automation
      operationId: createAutomation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                created_by:
                  type: string
                  example: 5899f99d-a449-4bfa-8769-19c097aaf1f5
                dashboard:
                  type: string
                  example: c5d37456-a042-4177-ab5f-69563f07937d
                description:
                  type: string
                  example: A sample description
                email_format:
                  type: string
                  example: This is an automation from Onvo
                email_subject:
                  type: string
                  example: This is an automation from Onvo
                enabled:
                  type: boolean
                  example: false
                output_format:
                  type: string
                  example: link
                recipient_type:
                  type: string
                  example: internal
                recipients:
                  type: array
                  items: {}
                  example: []
                schedule:
                  type: string
                  example: ""
                timezone:
                  type: string
                  example: Asia/Calcutta
                title:
                  type: string
                  example: API datasource test
            examples:
              Create automation:
                value:
                  created_by: 5899f99d-a449-4bfa-8769-19c097aaf1f5
                  dashboard: c5d37456-a042-4177-ab5f-69563f07937d
                  description: A sample description
                  email_format: This is an automation from Onvo
                  email_subject: This is an automation from Onvo
                  enabled: false
                  output_format: link
                  recipient_type: internal
                  recipients: []
                  schedule: ""
                  timezone: Asia/Calcutta
                  title: API datasource test
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 16:02:28 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2024-01-24T16:02:28.215923+00:00"
                  created_by:
                    type: string
                    example: 5899f99d-a449-4bfa-8769-19c097aaf1f5
                  dashboard:
                    type: string
                    example: c5d37456-a042-4177-ab5f-69563f07937d
                  description:
                    type: string
                    example: A sample description
                  email_format:
                    type: string
                    example: This is an automation from Onvo
                  email_subject:
                    type: string
                    example: This is an automation from Onvo
                  enabled:
                    type: boolean
                    example: false
                  id:
                    type: string
                    example: fc07e473-e83e-4f8c-ab80-ae14d83a41ba
                  last_run_at:
                    nullable: true
                    example: null
                  last_updated_at:
                    type: string
                    example: "2024-01-24T16:02:28.215923+00:00"
                  last_updated_by:
                    nullable: true
                    example: null
                  next_run_at:
                    nullable: true
                    example: null
                  output_format:
                    type: string
                    example: link
                  recipient_type:
                    type: string
                    example: internal
                  recipients:
                    type: array
                    items: {}
                    example: []
                  schedule:
                    type: string
                    example: ""
                  team:
                    type: string
                    example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  timezone:
                    type: string
                    example: Asia/Calcutta
                  title:
                    type: string
                    example: API datasource test
              examples:
                Success:
                  value:
                    created_at: "2024-01-24T16:02:28.215923+00:00"
                    created_by: 5899f99d-a449-4bfa-8769-19c097aaf1f5
                    dashboard: c5d37456-a042-4177-ab5f-69563f07937d
                    description: A sample description
                    email_format: This is an automation from Onvo
                    email_subject: This is an automation from Onvo
                    enabled: false
                    id: fc07e473-e83e-4f8c-ab80-ae14d83a41ba
                    last_run_at: null
                    last_updated_at: "2024-01-24T16:02:28.215923+00:00"
                    last_updated_by: null
                    next_run_at: null
                    output_format: link
                    recipient_type: internal
                    recipients: []
                    schedule: ""
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    timezone: Asia/Calcutta
                    title: API datasource test
  /api/automations/{id}:
    get:
      tags:
        - Automations
      summary: Get automation by id
      description: Get automation by id
      operationId: getAutomationById
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 16:42:35 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2024-01-22T13:09:16.847+00:00"
                  created_by:
                    type: string
                    example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                  dashboard:
                    type: string
                    example: c5d37456-a042-4177-ab5f-69563f07937d
                  description:
                    type: string
                    example: ""
                  email_format:
                    type: string
                    example: ""
                  email_subject:
                    type: string
                    example: ""
                  enabled:
                    type: boolean
                    example: false
                  id:
                    type: string
                    example: a8a95eeb-a54c-42eb-8d41-276217368105
                  last_run_at:
                    nullable: true
                    example: null
                  last_updated_at:
                    type: string
                    example: "2024-01-22T13:09:16.847+00:00"
                  last_updated_by:
                    type: string
                    example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                  next_run_at:
                    nullable: true
                    example: null
                  output_format:
                    type: string
                    example: link
                  recipient_type:
                    type: string
                    example: internal
                  recipients:
                    type: array
                    items: {}
                    example: []
                  schedule:
                    type: string
                    example: ""
                  team:
                    type: string
                    example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  timezone:
                    type: string
                    example: Asia/Calcutta
                  title:
                    type: string
                    example: First automation by API
              examples:
                Success:
                  value:
                    created_at: "2024-01-22T13:09:16.847+00:00"
                    created_by: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                    dashboard: c5d37456-a042-4177-ab5f-69563f07937d
                    description: ""
                    email_format: ""
                    email_subject: ""
                    enabled: false
                    id: a8a95eeb-a54c-42eb-8d41-276217368105
                    last_run_at: null
                    last_updated_at: "2024-01-22T13:09:16.847+00:00"
                    last_updated_by: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                    next_run_at: null
                    output_format: link
                    recipient_type: internal
                    recipients: []
                    schedule: ""
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    timezone: Asia/Calcutta
                    title: First automation by API
    post:
      tags:
        - Automations
      summary: Update automation by id
      description: Update automation by id
      operationId: updateAutomationById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: First automation by API
            examples:
              Update automation by id:
                value:
                  title: First automation by API
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 15:52:58 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2024-01-22T13:09:16.847+00:00"
                  created_by:
                    type: string
                    example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                  dashboard:
                    type: string
                    example: c5d37456-a042-4177-ab5f-69563f07937d
                  description:
                    type: string
                    example: ""
                  email_format:
                    type: string
                    example: ""
                  email_subject:
                    type: string
                    example: ""
                  enabled:
                    type: boolean
                    example: false
                  id:
                    type: string
                    example: a8a95eeb-a54c-42eb-8d41-276217368105
                  last_run_at:
                    nullable: true
                    example: null
                  last_updated_at:
                    type: string
                    example: "2024-01-22T13:09:16.847+00:00"
                  last_updated_by:
                    type: string
                    example: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                  next_run_at:
                    nullable: true
                    example: null
                  output_format:
                    type: string
                    example: link
                  recipient_type:
                    type: string
                    example: internal
                  recipients:
                    type: array
                    items: {}
                    example: []
                  schedule:
                    type: string
                    example: ""
                  team:
                    type: string
                    example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                  timezone:
                    type: string
                    example: Asia/Calcutta
                  title:
                    type: string
                    example: First automation by API
              examples:
                Success:
                  value:
                    created_at: "2024-01-22T13:09:16.847+00:00"
                    created_by: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                    dashboard: c5d37456-a042-4177-ab5f-69563f07937d
                    description: ""
                    email_format: ""
                    email_subject: ""
                    enabled: false
                    id: a8a95eeb-a54c-42eb-8d41-276217368105
                    last_run_at: null
                    last_updated_at: "2024-01-22T13:09:16.847+00:00"
                    last_updated_by: 5899f99d-a449-4bfa-8769-19c097aaf1f6
                    next_run_at: null
                    output_format: link
                    recipient_type: internal
                    recipients: []
                    schedule: ""
                    team: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    timezone: Asia/Calcutta
                    title: First automation by API
    delete:
      tags:
        - Automations
      summary: Delete automation by id
      description: Delete automation by id
      operationId: deleteAutomationById
      responses:
        "200":
          description: Success
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: >-
                  X-CSRF-Token, X-Requested-With, Accept, Accept-Version,
                  Content-Length, Content-MD5, Content-Type, Date,
                  X-Api-Version, x-api-key
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,DELETE,PATCH,POST,PUT,OPTIONS
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Wed, 24 Jan 2024 16:03:09 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
              examples:
                Success:
                  value:
                    success: true
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: ""
components:
  securitySchemes:
    apiKey:
      type: apiKey
      name: x-api-key
      in: header
security:
  - apiKey: []
tags:
  - name: Accounts
  - name: Teams
    description: >-
      Teams are used to manage a collection of users. They are the parent for
      dashboards, reports, datasources, organisation users, integrations and API
      keys.
  - name: Dashboards
    description: >-
      Dashboards allow you to connect multiple datasources to multiple widgets.
      Once created, a dashboard can be embedded in your platform by creating a
      session. Also, you can ask your dashboard questions once you have setup a
      datasource.
  - name: Widgets
    description: >-
      Widgets are the individual components inside a dashboard. They contain the
      code needed to render a chart.
  - name: Questions
  - name: Sessions
  - name: Embed Users
    description: >-
      These are your companies users, the ones who would be interacting with the
      dashboards and reports once embedded on your product
  - name: Datasources
    description: >-
      A datasource allows you to connect data from files, Rest APIs, databases
      and cloud SaaS providers to your reports and dashboards. None of the data
      from the data sources is stored on our platform (except for file uploads)
  - name: Automations
