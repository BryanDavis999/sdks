openapi: 3.0.3
info:
  title: External APIs
  description: >-
    This is a collection of all the endpoints made available to interact with
    Onvo's servers.


    If you use node js, you can use the `@onvo-ai/node` package to consume the
    endpoints.  

    [https://www.npmjs.com/package/@onvo-ai/node](https://www.npmjs.com/package/@onvo-ai/node)


    ---


    SDKs for other languages are coming soon!


    [https://github.com/onvo-ai/sdks](https://github.com/onvo-ai/sdks)
  version: 1.0.0
  contact: {}
servers:
  - url: "{{baseUrl}}"
paths:
  /api/automations/run:
    get:
      tags:
        - Automations
      summary: Run automations
      description: Run automations
      operationId: runAutomations
      responses:
        "200":
          description: ""
      security:
        - bearerAuth: []
  /api/teams:
    get:
      tags:
        - Teams
      summary: Get all teams
      description: >-
        This endpoint retreives all organisations a user has access to. If
        calling with an API key, the endpoint fails as a key is scoped to a
        singular organisation
      operationId: getAllTeams
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Date:
              schema:
                type: string
                example: Sun, 01 Oct 2023 13:36:45 GMT
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      type: string
                      example: "2023-09-26T13:39:00.642448+00:00"
                    email:
                      type: string
                      example: info@onvo.ai
                    id:
                      type: string
                      example: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    logo:
                      nullable: true
                      example: null
                    name:
                      type: string
                      example: Onvo Test
                    phone_number:
                      nullable: true
                      example: null
                    stripe_id:
                      type: string
                      example: cus_Oj1JlJbQliLM6W
                example:
                  - created_at: "2023-09-26T13:39:00.642448+00:00"
                    email: info@onvo.ai
                    id: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                    logo: null
                    name: Onvo Test
                    phone_number: null
                    stripe_id: cus_Oj1JlJbQliLM6W
              examples:
                Success:
                  value:
                    - created_at: "2023-09-26T13:39:00.642448+00:00"
                      email: info@onvo.ai
                      id: ee5b08c6-5167-4425-bbc3-a746fe4a7ead
                      logo: null
                      name: Onvo Test
                      phone_number: null
                      stripe_id: cus_Oj1JlJbQliLM6W
        "500":
          description: Unauthenticated / Invalid token
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 01:41:07 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Invalid token:
                  value:
                    message: Embed token is not valid or has expired
                Unauthenticated:
                  value:
                    message: No authentication methods found
    put:
      tags:
        - Teams
      summary: Create team
      description: >-
        This endpoint creates an organisation. SInce an API key is scoped to a
        singular organisation, you cannot create an organisation using an API
        key.
      operationId: createTeam
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            examples:
              Create team:
                value: {}
      responses:
        "200":
          description: ""
        "500":
          description: Default
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 01:03:54 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You can only create organisations from the dashboard
              examples:
                Default:
                  value:
                    message: You can only create organisations from the dashboard
  /api/teams/ee5b08c6-5167-4425-bbc3-a746fe4a7ead:
    get:
      tags:
        - Teams
      summary: Get team by id
      description: >-
        This endpoint returns the details of a given organisation. When calling
        it with an API key, unless the organisation is the one scoped by the
        key, the request will fail
      operationId: getTeamById
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 01:07:09 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2023-09-01T10:09:39.883256+00:00"
                  email:
                    type: string
                    example: info@onvo.ai
                  id:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  logo:
                    nullable: true
                    example: null
                  name:
                    type: string
                    example: Onvo test
                  phone_number:
                    nullable: true
                    example: null
              examples:
                Success:
                  value:
                    created_at: "2023-09-01T10:09:39.883256+00:00"
                    email: info@onvo.ai
                    id: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    logo: null
                    name: Onvo test
                    phone_number: null
        "500":
          description: Unauthorised
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 01:07:47 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You do not have permission to access this organisation
              examples:
                Unauthorised:
                  value:
                    message: You do not have permission to access this organisation
    post:
      tags:
        - Teams
      summary: Update team by id
      description: >-
        This endpoint allows you to edit an organisation. If using an API key,
        you can only edit the organisation scoped by the key, it will fail
        otherwise.
      operationId: updateTeamById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Onvo Test
            examples:
              Update team by id:
                value:
                  name: Onvo Test
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 01:09:34 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2023-09-01T10:09:39.883256+00:00"
                  email:
                    type: string
                    example: info@onvo.ai
                  id:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  logo:
                    nullable: true
                    example: null
                  name:
                    type: string
                    example: Onvo Test
                  phone_number:
                    nullable: true
                    example: null
              examples:
                Success:
                  value:
                    created_at: "2023-09-01T10:09:39.883256+00:00"
                    email: info@onvo.ai
                    id: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    logo: null
                    name: Onvo Test
                    phone_number: null
        "500":
          description: Unauthorised
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 01:09:55 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You do not have permission to access this organisation
              examples:
                Unauthorised:
                  value:
                    message: You do not have permission to access this organisation
  /api/dashboards/5159cb4e-b89d-49a6-9c81-ef7833737aba/widgets:
    get:
      tags:
        - Dashboards
        - Widgets
      summary: Get all widgets under dashboard
      description: Get all widgets under dashboard
      operationId: getAllWidgetsUnderDashboard
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:46:50 GMT
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    assumptions:
                      type: array
                      items:
                        type: string
                        example: >-
                          1. The total sales will be calculated from the array
                          with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                          contains the 'Sales' field.
                      example:
                        - >-
                          1. The total sales will be calculated from the array
                          with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                          contains the 'Sales' field.
                        - 2. The 'Sales' field is assumed to be in US dollars.
                        - >-
                          3. The 'Sales' field is assumed to be a numerical
                          value, but it will be passed through the
                          validateNumber function to ensure it is a usable
                          number.
                        - >-
                          4. The 'Sales' field values will be summed up to get
                          the total sales.
                        - >-
                          5. The total sales value will be rounded to 2 decimal
                          points using the toFixed(2) method.
                        - >-
                          6. The total sales value will be returned as a single
                          data point in the datasets.data array.
                        - >-
                          7. The datasets.label will be set to 'Total Sales
                          (USD)' to indicate the unit of the metric.
                        - >-
                          8. The type of chart in config will be set to 'metric'
                          as per the user's request.
                    code:
                      type: string
                      example: |-
                        function main(data) {
                            let totalSales = 0;
                            data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                totalSales += validateNumber(item['Sales']);
                            });
                            totalSales = totalSales.toFixed(2);

                            return {
                                type: 'metric',
                                data: {
                                    datasets: [{
                                        data: [totalSales],
                                        label: 'Total Sales (USD)'
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false
                                }
                            };
                        }
                    dashboard:
                      type: string
                      example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h:
                      type: number
                      example: 1
                    id:
                      type: string
                      example: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                    organisation:
                      type: string
                      example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query:
                      type: string
                      example: >-
                        Show me a metric showing the total amount of sales in US
                        dollars. Round the final value to 2 decimal points
                    title:
                      type: string
                      example: Total sales
                    w:
                      type: number
                      example: 4
                    x:
                      type: number
                      example: 4
                    "y":
                      type: number
                      example: 0
                example:
                  - assumptions:
                      - >-
                        1. The total sales will be calculated from the array
                        with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                        contains the 'Sales' field.
                      - 2. The 'Sales' field is assumed to be in US dollars.
                      - >-
                        3. The 'Sales' field is assumed to be a numerical value,
                        but it will be passed through the validateNumber
                        function to ensure it is a usable number.
                      - >-
                        4. The 'Sales' field values will be summed up to get the
                        total sales.
                      - >-
                        5. The total sales value will be rounded to 2 decimal
                        points using the toFixed(2) method.
                      - >-
                        6. The total sales value will be returned as a single
                        data point in the datasets.data array.
                      - >-
                        7. The datasets.label will be set to 'Total Sales (USD)'
                        to indicate the unit of the metric.
                      - >-
                        8. The type of chart in config will be set to 'metric'
                        as per the user's request.
                    code: |-
                      function main(data) {
                          let totalSales = 0;
                          data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                              totalSales += validateNumber(item['Sales']);
                          });
                          totalSales = totalSales.toFixed(2);

                          return {
                              type: 'metric',
                              data: {
                                  datasets: [{
                                      data: [totalSales],
                                      label: 'Total Sales (USD)'
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false
                              }
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 1
                    id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: >-
                      Show me a metric showing the total amount of sales in US
                      dollars. Round the final value to 2 decimal points
                    title: Total sales
                    w: 4
                    x: 4
                    "y": 0
                  - assumptions: []
                    code: |-
                      function main(data) {
                          let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                          let salesPerMonth = {};

                          salesData.forEach(sale => {
                              let date = new Date(sale['Order Date']);
                              let year = date.getFullYear();
                              let month = date.getMonth();

                              if (!salesPerMonth[year]) {
                                  salesPerMonth[year] = Array(12).fill(0);
                              }

                              salesPerMonth[year][month] += validateNumber(sale['Sales']);
                          });

                          let datasets = [];
                          for (let year in salesPerMonth) {
                              datasets.push({
                                  label: year,
                                  data: salesPerMonth[year],
                                  fill: false,
                                  borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                              });
                          }

                          return {
                              type: 'line',
                              data: {
                                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                  datasets: datasets
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      xAxes: [{
                                          display: true,
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Month'
                                          }
                                      }],
                                      yAxes: [{
                                          display: true,
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Sales'
                                          }
                                      }]
                                  }
                              }
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 3
                    id: 05f28a95-7cf5-488f-ac52-736536b3594e
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: >-
                      Show me the sales per month as a line chart. Each line
                      should show the sales for a year.
                    title: Sales per month as a line chart
                    w: 6
                    x: 6
                    "y": 1
                  - assumptions:
                      - >-
                        1. The total customer to date is calculated by counting
                        the unique Customer IDs in the data.
                      - >-
                        2. The data for Customer IDs is assumed to be in the
                        array for key 44a3aa21-0181-46d9-a54b-af915aaec92e.
                      - >-
                        3. The function uses a Set to store unique Customer IDs
                        and then counts the size of the Set.
                      - >-
                        4. The chart type is set to 'metric' and the total
                        customer count is returned as a single data point.
                      - >-
                        5. The label for the data point is set to 'Total
                        Customers'.
                    code: |-
                      function main(data) {
                          const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                          const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                          const totalCustomers = uniqueCustomers.size;

                          return {
                              type: 'metric',
                              data: {
                                  datasets: [{
                                      data: [totalCustomers],
                                      label: 'Total Customers'
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false
                              }
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 1
                    id: d38b4048-9a60-40e7-aead-62ba8227b7da
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: Create a metric showing the total customer to date
                    title: Total customers
                    w: 4
                    x: 0
                    "y": 0
                  - assumptions:
                      - >-
                        1. The user wants to know the total number of orders to
                        date.
                      - >-
                        2. The 'Order ID' field from the array with key
                        '74813926-d1ec-4b38-82e1-08d1820cb029' will be used to
                        count the number of orders.
                      - >-
                        3. The 'Order Date' field will be used to filter the
                        orders up to the current date.
                      - >-
                        4. The 'Customer ID' field will be used to match the
                        data from both arrays.
                      - >-
                        5. The validateNumber function will be used to ensure
                        the 'Order ID' is a valid number before counting.
                      - >-
                        6. The chart type will be set to 'metric' as per the
                        user's request.
                      - >-
                        7. The chart will display a single data point
                        representing the total number of orders to date.
                      - 8. The label for the data point will be 'Total Orders'.
                    code: |-
                      function main(data) {
                          let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                          let currentDate = new Date();
                          let totalOrders = 0;

                          for (let i = 0; i < orders.length; i++) {
                              let orderDate = new Date(orders[i]['Order Date']);
                              if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                  totalOrders++;
                              }
                          }

                          return {
                              type: 'metric',
                              data: {
                                  datasets: [{
                                      data: [totalOrders],
                                      label: 'Total Orders'
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      xAxes: [{
                                          display: true,
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Orders'
                                          }
                                      }],
                                      yAxes: [{
                                          display: true,
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Count'
                                          }
                                      }]
                                  }
                              }
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 1
                    id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: Show me a metric for how many orders I have to date
                    title: Total orders
                    w: 4
                    x: 8
                    "y": 0
                  - assumptions: []
                    code: |-
                      function main(data) {
                          // Extract the arrays from the data object
                          const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                          const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                          // Create a map to store the total sales volume for each state
                          const stateSales = new Map();

                          // Iterate over the sales data
                          for (let i = 0; i < salesData.length; i++) {
                              // Find the corresponding customer data
                              const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                              // If the customer data is found and the state is not yet in the map, add it
                              if (customer && !stateSales.has(customer.State)) {
                                  stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                              }
                              // If the state is already in the map, add the sales volume to the existing value
                              else if (customer) {
                                  stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                              }
                          }

                          // Convert the map to an array and sort it in descending order by sales volume
                          const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                          // Limit the data to the top 5 states
                          const topStates = sortedStates.slice(0, 5);

                          // Create the data for the chart
                          const chartData = {
                              labels: topStates.map(s => s[0]),
                              datasets: [{
                                  label: 'Sales Volume',
                                  data: topStates.map(s => s[1]),
                                  backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                  borderColor: 'rgba(75, 192, 192, 1)',
                                  borderWidth: 1
                              }]
                          };

                          // Create the options for the chart
                          const chartOptions = {
                              responsive: true,
                              maintainAspectRatio: false,
                              scales: {
                                  yAxes: [{
                                      ticks: {
                                          beginAtZero: true
                                      },
                                      scaleLabel: {
                                          display: true,
                                          labelString: 'Sales Volume'
                                      }
                                  }],
                                  xAxes: [{
                                      scaleLabel: {
                                          display: true,
                                          labelString: 'State'
                                      }
                                  }]
                              }
                          };

                          // Return the chart configuration
                          return {
                              type: 'bar',
                              data: chartData,
                              options: chartOptions
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 3
                    id: 5734dba1-4392-4128-8deb-058b7f6517fe
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: Create a chart showing the top 5 states by sales volume
                    title: Top 5 states by sales volume
                    w: 6
                    x: 0
                    "y": 1
              examples:
                Success:
                  value:
                    - assumptions:
                        - >-
                          1. The total sales will be calculated from the array
                          with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                          contains the 'Sales' field.
                        - 2. The 'Sales' field is assumed to be in US dollars.
                        - >-
                          3. The 'Sales' field is assumed to be a numerical
                          value, but it will be passed through the
                          validateNumber function to ensure it is a usable
                          number.
                        - >-
                          4. The 'Sales' field values will be summed up to get
                          the total sales.
                        - >-
                          5. The total sales value will be rounded to 2 decimal
                          points using the toFixed(2) method.
                        - >-
                          6. The total sales value will be returned as a single
                          data point in the datasets.data array.
                        - >-
                          7. The datasets.label will be set to 'Total Sales
                          (USD)' to indicate the unit of the metric.
                        - >-
                          8. The type of chart in config will be set to 'metric'
                          as per the user's request.
                      code: |-
                        function main(data) {
                            let totalSales = 0;
                            data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                totalSales += validateNumber(item['Sales']);
                            });
                            totalSales = totalSales.toFixed(2);

                            return {
                                type: 'metric',
                                data: {
                                    datasets: [{
                                        data: [totalSales],
                                        label: 'Total Sales (USD)'
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false
                                }
                            };
                        }
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      h: 1
                      id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      query: >-
                        Show me a metric showing the total amount of sales in US
                        dollars. Round the final value to 2 decimal points
                      title: Total sales
                      w: 4
                      x: 4
                      "y": 0
                    - assumptions: []
                      code: |-
                        function main(data) {
                            let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                            let salesPerMonth = {};

                            salesData.forEach(sale => {
                                let date = new Date(sale['Order Date']);
                                let year = date.getFullYear();
                                let month = date.getMonth();

                                if (!salesPerMonth[year]) {
                                    salesPerMonth[year] = Array(12).fill(0);
                                }

                                salesPerMonth[year][month] += validateNumber(sale['Sales']);
                            });

                            let datasets = [];
                            for (let year in salesPerMonth) {
                                datasets.push({
                                    label: year,
                                    data: salesPerMonth[year],
                                    fill: false,
                                    borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                });
                            }

                            return {
                                type: 'line',
                                data: {
                                    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                    datasets: datasets
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    scales: {
                                        xAxes: [{
                                            display: true,
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Month'
                                            }
                                        }],
                                        yAxes: [{
                                            display: true,
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Sales'
                                            }
                                        }]
                                    }
                                }
                            };
                        }
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      h: 3
                      id: 05f28a95-7cf5-488f-ac52-736536b3594e
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      query: >-
                        Show me the sales per month as a line chart. Each line
                        should show the sales for a year.
                      title: Sales per month as a line chart
                      w: 6
                      x: 6
                      "y": 1
                    - assumptions:
                        - >-
                          1. The total customer to date is calculated by
                          counting the unique Customer IDs in the data.
                        - >-
                          2. The data for Customer IDs is assumed to be in the
                          array for key 44a3aa21-0181-46d9-a54b-af915aaec92e.
                        - >-
                          3. The function uses a Set to store unique Customer
                          IDs and then counts the size of the Set.
                        - >-
                          4. The chart type is set to 'metric' and the total
                          customer count is returned as a single data point.
                        - >-
                          5. The label for the data point is set to 'Total
                          Customers'.
                      code: |-
                        function main(data) {
                            const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                            const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                            const totalCustomers = uniqueCustomers.size;

                            return {
                                type: 'metric',
                                data: {
                                    datasets: [{
                                        data: [totalCustomers],
                                        label: 'Total Customers'
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false
                                }
                            };
                        }
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      h: 1
                      id: d38b4048-9a60-40e7-aead-62ba8227b7da
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      query: Create a metric showing the total customer to date
                      title: Total customers
                      w: 4
                      x: 0
                      "y": 0
                    - assumptions:
                        - >-
                          1. The user wants to know the total number of orders
                          to date.
                        - >-
                          2. The 'Order ID' field from the array with key
                          '74813926-d1ec-4b38-82e1-08d1820cb029' will be used to
                          count the number of orders.
                        - >-
                          3. The 'Order Date' field will be used to filter the
                          orders up to the current date.
                        - >-
                          4. The 'Customer ID' field will be used to match the
                          data from both arrays.
                        - >-
                          5. The validateNumber function will be used to ensure
                          the 'Order ID' is a valid number before counting.
                        - >-
                          6. The chart type will be set to 'metric' as per the
                          user's request.
                        - >-
                          7. The chart will display a single data point
                          representing the total number of orders to date.
                        - >-
                          8. The label for the data point will be 'Total
                          Orders'.
                      code: |-
                        function main(data) {
                            let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                            let currentDate = new Date();
                            let totalOrders = 0;

                            for (let i = 0; i < orders.length; i++) {
                                let orderDate = new Date(orders[i]['Order Date']);
                                if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                    totalOrders++;
                                }
                            }

                            return {
                                type: 'metric',
                                data: {
                                    datasets: [{
                                        data: [totalOrders],
                                        label: 'Total Orders'
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    scales: {
                                        xAxes: [{
                                            display: true,
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Orders'
                                            }
                                        }],
                                        yAxes: [{
                                            display: true,
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Count'
                                            }
                                        }]
                                    }
                                }
                            };
                        }
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      h: 1
                      id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      query: Show me a metric for how many orders I have to date
                      title: Total orders
                      w: 4
                      x: 8
                      "y": 0
                    - assumptions: []
                      code: |-
                        function main(data) {
                            // Extract the arrays from the data object
                            const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                            const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                            // Create a map to store the total sales volume for each state
                            const stateSales = new Map();

                            // Iterate over the sales data
                            for (let i = 0; i < salesData.length; i++) {
                                // Find the corresponding customer data
                                const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                // If the customer data is found and the state is not yet in the map, add it
                                if (customer && !stateSales.has(customer.State)) {
                                    stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                }
                                // If the state is already in the map, add the sales volume to the existing value
                                else if (customer) {
                                    stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                }
                            }

                            // Convert the map to an array and sort it in descending order by sales volume
                            const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                            // Limit the data to the top 5 states
                            const topStates = sortedStates.slice(0, 5);

                            // Create the data for the chart
                            const chartData = {
                                labels: topStates.map(s => s[0]),
                                datasets: [{
                                    label: 'Sales Volume',
                                    data: topStates.map(s => s[1]),
                                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                    borderColor: 'rgba(75, 192, 192, 1)',
                                    borderWidth: 1
                                }]
                            };

                            // Create the options for the chart
                            const chartOptions = {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    yAxes: [{
                                        ticks: {
                                            beginAtZero: true
                                        },
                                        scaleLabel: {
                                            display: true,
                                            labelString: 'Sales Volume'
                                        }
                                    }],
                                    xAxes: [{
                                        scaleLabel: {
                                            display: true,
                                            labelString: 'State'
                                        }
                                    }]
                                }
                            };

                            // Return the chart configuration
                            return {
                                type: 'bar',
                                data: chartData,
                                options: chartOptions
                            };
                        }
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      h: 3
                      id: 5734dba1-4392-4128-8deb-058b7f6517fe
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      query: Create a chart showing the top 5 states by sales volume
                      title: Top 5 states by sales volume
                      w: 6
                      x: 0
                      "y": 1
        "401":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:48:24 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
    put:
      tags:
        - Dashboards
        - Widgets
      summary: Create widget
      description: Create widget
      operationId: createWidget
      parameters:
        - name: query
          in: query
          schema:
            type: string
            example: Create a pie chart showing the sales in 2018 vs the sales in 2019
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assumptions:
                  type: array
                  items:
                    type: string
                    example: >-
                      1. The data provided by the user is in the correct format
                      as described above.
                  example:
                    - >-
                      1. The data provided by the user is in the correct format
                      as described above.
                    - 2. The Order Date field is in the format DD/MM/YYYY.
                    - >-
                      3. The Sales field is a numerical value representing the
                      sales for that particular order.
                    - >-
                      4. The data is unsorted, so we need to sort it by Order
                      Date to correctly plot the sales by month.
                    - >-
                      5. We are using the validateNumber function to ensure the
                      Sales field is a valid number.
                    - >-
                      6. We are not using the fields: Row ID, Order ID, Ship
                      Date, Ship Mode, Customer ID, Product ID, Category,
                      Sub-Category, Product Name, Quantity, Discount, Profit,
                      City, Country, Segment, State, Postal Code, Region.
                    - >-
                      7. We are assuming that the data for each month is summed
                      up to represent the total sales for that month.
                code:
                  type: string
                  example: |-
                    function main(data) {
                        // Extract and process sales data
                        let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                            return {
                                date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                sales: validateNumber(order['Sales'])
                            };
                        });

                        // Sort sales data by date
                        salesData.sort((a, b) => a.date - b.date);

                        // Group sales data by month and year
                        let groupedSalesData = {};
                        salesData.forEach(order => {
                            let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                            if (!groupedSalesData[monthYear]) {
                                groupedSalesData[monthYear] = 0;
                            }
                            groupedSalesData[monthYear] += order.sales;
                        });

                        // Prepare data for chart
                        let labels = Object.keys(groupedSalesData);
                        let datasets = [{
                            label: 'Sales',
                            data: Object.values(groupedSalesData),
                            fill: false,
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1
                        }];

                        // Return chart configuration
                        return {
                            type: 'line',
                            data: { labels, datasets },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Month and Year'
                                        }
                                    },
                                    y: {
                                        title: {
                                            display: true,
                                            text: 'Sales'
                                        }
                                    }
                                }
                            }
                        };
                    }
                dashboard:
                  type: string
                  example: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                h:
                  type: number
                  example: 1
                query:
                  type: string
                  example: >-
                    Create a line chart showing sales by month using the order
                    date. The x axis should show the month and year like "June
                    2020"
                title:
                  type: string
                  example: >-
                    Create a line chart showing sales by month using the order
                    date. The x axis should show the month and year like "June
                    2020"
                w:
                  type: number
                  example: 4
                x:
                  type: number
                  example: 0
                "y":
                  type: number
                  example: 0
            examples:
              Create widget:
                value:
                  assumptions:
                    - >-
                      1. The data provided by the user is in the correct format
                      as described above.
                    - 2. The Order Date field is in the format DD/MM/YYYY.
                    - >-
                      3. The Sales field is a numerical value representing the
                      sales for that particular order.
                    - >-
                      4. The data is unsorted, so we need to sort it by Order
                      Date to correctly plot the sales by month.
                    - >-
                      5. We are using the validateNumber function to ensure the
                      Sales field is a valid number.
                    - >-
                      6. We are not using the fields: Row ID, Order ID, Ship
                      Date, Ship Mode, Customer ID, Product ID, Category,
                      Sub-Category, Product Name, Quantity, Discount, Profit,
                      City, Country, Segment, State, Postal Code, Region.
                    - >-
                      7. We are assuming that the data for each month is summed
                      up to represent the total sales for that month.
                  code: |-
                    function main(data) {
                        // Extract and process sales data
                        let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                            return {
                                date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                sales: validateNumber(order['Sales'])
                            };
                        });

                        // Sort sales data by date
                        salesData.sort((a, b) => a.date - b.date);

                        // Group sales data by month and year
                        let groupedSalesData = {};
                        salesData.forEach(order => {
                            let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                            if (!groupedSalesData[monthYear]) {
                                groupedSalesData[monthYear] = 0;
                            }
                            groupedSalesData[monthYear] += order.sales;
                        });

                        // Prepare data for chart
                        let labels = Object.keys(groupedSalesData);
                        let datasets = [{
                            label: 'Sales',
                            data: Object.values(groupedSalesData),
                            fill: false,
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1
                        }];

                        // Return chart configuration
                        return {
                            type: 'line',
                            data: { labels, datasets },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Month and Year'
                                        }
                                    },
                                    y: {
                                        title: {
                                            display: true,
                                            text: 'Sales'
                                        }
                                    }
                                }
                            }
                        };
                    }
                  dashboard: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                  h: 1
                  query: >-
                    Create a line chart showing sales by month using the order
                    date. The x axis should show the month and year like "June
                    2020"
                  title: >-
                    Create a line chart showing sales by month using the order
                    date. The x axis should show the month and year like "June
                    2020"
                  w: 4
                  x: 0
                  "y": 0
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 11:02:53 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  assumptions:
                    type: array
                    items:
                      type: string
                      example: >-
                        1. The data provided by the user is in the correct
                        format as described above.
                    example:
                      - >-
                        1. The data provided by the user is in the correct
                        format as described above.
                      - 2. The Order Date field is in the format DD/MM/YYYY.
                      - >-
                        3. The Sales field is a numerical value representing the
                        sales for that particular order.
                      - >-
                        4. The data is unsorted, so we need to sort it by Order
                        Date to correctly plot the sales by month.
                      - >-
                        5. We are using the validateNumber function to ensure
                        the Sales field is a valid number.
                      - >-
                        6. We are not using the fields: Row ID, Order ID, Ship
                        Date, Ship Mode, Customer ID, Product ID, Category,
                        Sub-Category, Product Name, Quantity, Discount, Profit,
                        City, Country, Segment, State, Postal Code, Region.
                      - >-
                        7. We are assuming that the data for each month is
                        summed up to represent the total sales for that month.
                  code:
                    type: string
                    example: |-
                      function main(data) {
                          // Extract and process sales data
                          let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                              return {
                                  date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                  sales: validateNumber(order['Sales'])
                              };
                          });

                          // Sort sales data by date
                          salesData.sort((a, b) => a.date - b.date);

                          // Group sales data by month and year
                          let groupedSalesData = {};
                          salesData.forEach(order => {
                              let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                              if (!groupedSalesData[monthYear]) {
                                  groupedSalesData[monthYear] = 0;
                              }
                              groupedSalesData[monthYear] += order.sales;
                          });

                          // Prepare data for chart
                          let labels = Object.keys(groupedSalesData);
                          let datasets = [{
                              label: 'Sales',
                              data: Object.values(groupedSalesData),
                              fill: false,
                              borderColor: 'rgb(75, 192, 192)',
                              tension: 0.1
                          }];

                          // Return chart configuration
                          return {
                              type: 'line',
                              data: { labels, datasets },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      x: {
                                          title: {
                                              display: true,
                                              text: 'Month and Year'
                                          }
                                      },
                                      y: {
                                          title: {
                                              display: true,
                                              text: 'Sales'
                                          }
                                      }
                                  }
                              }
                          };
                      }
                  dashboard:
                    type: string
                    example: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                  h:
                    type: number
                    example: 1
                  id:
                    type: string
                    example: 0a895b21-c4a4-4806-943e-4de029121eea
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  query:
                    type: string
                    example: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                  title:
                    type: string
                    example: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                  w:
                    type: number
                    example: 4
                  x:
                    type: number
                    example: 0
                  "y":
                    type: number
                    example: 0
              examples:
                Success:
                  value:
                    assumptions:
                      - >-
                        1. The data provided by the user is in the correct
                        format as described above.
                      - 2. The Order Date field is in the format DD/MM/YYYY.
                      - >-
                        3. The Sales field is a numerical value representing the
                        sales for that particular order.
                      - >-
                        4. The data is unsorted, so we need to sort it by Order
                        Date to correctly plot the sales by month.
                      - >-
                        5. We are using the validateNumber function to ensure
                        the Sales field is a valid number.
                      - >-
                        6. We are not using the fields: Row ID, Order ID, Ship
                        Date, Ship Mode, Customer ID, Product ID, Category,
                        Sub-Category, Product Name, Quantity, Discount, Profit,
                        City, Country, Segment, State, Postal Code, Region.
                      - >-
                        7. We are assuming that the data for each month is
                        summed up to represent the total sales for that month.
                    code: |-
                      function main(data) {
                          // Extract and process sales data
                          let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                              return {
                                  date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                  sales: validateNumber(order['Sales'])
                              };
                          });

                          // Sort sales data by date
                          salesData.sort((a, b) => a.date - b.date);

                          // Group sales data by month and year
                          let groupedSalesData = {};
                          salesData.forEach(order => {
                              let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                              if (!groupedSalesData[monthYear]) {
                                  groupedSalesData[monthYear] = 0;
                              }
                              groupedSalesData[monthYear] += order.sales;
                          });

                          // Prepare data for chart
                          let labels = Object.keys(groupedSalesData);
                          let datasets = [{
                              label: 'Sales',
                              data: Object.values(groupedSalesData),
                              fill: false,
                              borderColor: 'rgb(75, 192, 192)',
                              tension: 0.1
                          }];

                          // Return chart configuration
                          return {
                              type: 'line',
                              data: { labels, datasets },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      x: {
                                          title: {
                                              display: true,
                                              text: 'Month and Year'
                                          }
                                      },
                                      y: {
                                          title: {
                                              display: true,
                                              text: 'Sales'
                                          }
                                      }
                                  }
                              }
                          };
                      }
                    dashboard: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                    h: 1
                    id: 0a895b21-c4a4-4806-943e-4de029121eea
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                    title: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                    w: 4
                    x: 0
                    "y": 0
        "401":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 11:03:10 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
  /api/dashboards/5159cb4e-b89d-49a6-9c81-ef7833737aba/widgets/7dbc98bc-31bb-493d-b716-524de71d1ce8:
    get:
      tags:
        - Dashboards
        - Widgets
      summary: Get widget by id
      description: Get widget by id
      operationId: getWidgetById
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:50:16 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  assumptions:
                    type: array
                    items:
                      type: string
                      example: >-
                        1. The total sales will be calculated from the array
                        with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                        contains the 'Sales' field.
                    example:
                      - >-
                        1. The total sales will be calculated from the array
                        with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                        contains the 'Sales' field.
                      - 2. The 'Sales' field is assumed to be in US dollars.
                      - >-
                        3. The 'Sales' field is assumed to be a numerical value,
                        but it will be passed through the validateNumber
                        function to ensure it is a usable number.
                      - >-
                        4. The 'Sales' field values will be summed up to get the
                        total sales.
                      - >-
                        5. The total sales value will be rounded to 2 decimal
                        points using the toFixed(2) method.
                      - >-
                        6. The total sales value will be returned as a single
                        data point in the datasets.data array.
                      - >-
                        7. The datasets.label will be set to 'Total Sales (USD)'
                        to indicate the unit of the metric.
                      - >-
                        8. The type of chart in config will be set to 'metric'
                        as per the user's request.
                  code:
                    type: string
                    example: |-
                      function main(data) {
                          let totalSales = 0;
                          data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                              totalSales += validateNumber(item['Sales']);
                          });
                          totalSales = totalSales.toFixed(2);

                          return {
                              type: 'metric',
                              data: {
                                  datasets: [{
                                      data: [totalSales],
                                      label: 'Total Sales (USD)'
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false
                              }
                          };
                      }
                  dashboard:
                    type: string
                    example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                  h:
                    type: number
                    example: 1
                  id:
                    type: string
                    example: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  query:
                    type: string
                    example: >-
                      Show me a metric showing the total amount of sales in US
                      dollars. Round the final value to 2 decimal points
                  title:
                    type: string
                    example: Total sales
                  w:
                    type: number
                    example: 4
                  x:
                    type: number
                    example: 4
                  "y":
                    type: number
                    example: 0
              examples:
                Success:
                  value:
                    assumptions:
                      - >-
                        1. The total sales will be calculated from the array
                        with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                        contains the 'Sales' field.
                      - 2. The 'Sales' field is assumed to be in US dollars.
                      - >-
                        3. The 'Sales' field is assumed to be a numerical value,
                        but it will be passed through the validateNumber
                        function to ensure it is a usable number.
                      - >-
                        4. The 'Sales' field values will be summed up to get the
                        total sales.
                      - >-
                        5. The total sales value will be rounded to 2 decimal
                        points using the toFixed(2) method.
                      - >-
                        6. The total sales value will be returned as a single
                        data point in the datasets.data array.
                      - >-
                        7. The datasets.label will be set to 'Total Sales (USD)'
                        to indicate the unit of the metric.
                      - >-
                        8. The type of chart in config will be set to 'metric'
                        as per the user's request.
                    code: |-
                      function main(data) {
                          let totalSales = 0;
                          data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                              totalSales += validateNumber(item['Sales']);
                          });
                          totalSales = totalSales.toFixed(2);

                          return {
                              type: 'metric',
                              data: {
                                  datasets: [{
                                      data: [totalSales],
                                      label: 'Total Sales (USD)'
                                  }]
                              },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false
                              }
                          };
                      }
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    h: 1
                    id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: >-
                      Show me a metric showing the total amount of sales in US
                      dollars. Round the final value to 2 decimal points
                    title: Total sales
                    w: 4
                    x: 4
                    "y": 0
        "401":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:54:16 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
    post:
      tags:
        - Dashboards
        - Widgets
      summary: Update widget by id
      description: Update widget by id
      operationId: updateWidgetById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Testing title change
            examples:
              Update widget by id:
                value:
                  title: Testing title change
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 11:03:43 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  assumptions:
                    type: array
                    items:
                      type: string
                      example: >-
                        1. The data provided by the user is in the correct
                        format as described above.
                    example:
                      - >-
                        1. The data provided by the user is in the correct
                        format as described above.
                      - 2. The Order Date field is in the format DD/MM/YYYY.
                      - >-
                        3. The Sales field is a numerical value representing the
                        sales for that particular order.
                      - >-
                        4. The data is unsorted, so we need to sort it by Order
                        Date to correctly plot the sales by month.
                      - >-
                        5. We are using the validateNumber function to ensure
                        the Sales field is a valid number.
                      - >-
                        6. We are not using the fields: Row ID, Order ID, Ship
                        Date, Ship Mode, Customer ID, Product ID, Category,
                        Sub-Category, Product Name, Quantity, Discount, Profit,
                        City, Country, Segment, State, Postal Code, Region.
                      - >-
                        7. We are assuming that the data for each month is
                        summed up to represent the total sales for that month.
                  code:
                    type: string
                    example: |-
                      function main(data) {
                          // Extract and process sales data
                          let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                              return {
                                  date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                  sales: validateNumber(order['Sales'])
                              };
                          });

                          // Sort sales data by date
                          salesData.sort((a, b) => a.date - b.date);

                          // Group sales data by month and year
                          let groupedSalesData = {};
                          salesData.forEach(order => {
                              let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                              if (!groupedSalesData[monthYear]) {
                                  groupedSalesData[monthYear] = 0;
                              }
                              groupedSalesData[monthYear] += order.sales;
                          });

                          // Prepare data for chart
                          let labels = Object.keys(groupedSalesData);
                          let datasets = [{
                              label: 'Sales',
                              data: Object.values(groupedSalesData),
                              fill: false,
                              borderColor: 'rgb(75, 192, 192)',
                              tension: 0.1
                          }];

                          // Return chart configuration
                          return {
                              type: 'line',
                              data: { labels, datasets },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      x: {
                                          title: {
                                              display: true,
                                              text: 'Month and Year'
                                          }
                                      },
                                      y: {
                                          title: {
                                              display: true,
                                              text: 'Sales'
                                          }
                                      }
                                  }
                              }
                          };
                      }
                  dashboard:
                    type: string
                    example: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                  h:
                    type: number
                    example: 1
                  id:
                    type: string
                    example: 0a895b21-c4a4-4806-943e-4de029121eea
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  query:
                    type: string
                    example: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                  title:
                    type: string
                    example: Testing title change
                  w:
                    type: number
                    example: 4
                  x:
                    type: number
                    example: 0
                  "y":
                    type: number
                    example: 0
              examples:
                Success:
                  value:
                    assumptions:
                      - >-
                        1. The data provided by the user is in the correct
                        format as described above.
                      - 2. The Order Date field is in the format DD/MM/YYYY.
                      - >-
                        3. The Sales field is a numerical value representing the
                        sales for that particular order.
                      - >-
                        4. The data is unsorted, so we need to sort it by Order
                        Date to correctly plot the sales by month.
                      - >-
                        5. We are using the validateNumber function to ensure
                        the Sales field is a valid number.
                      - >-
                        6. We are not using the fields: Row ID, Order ID, Ship
                        Date, Ship Mode, Customer ID, Product ID, Category,
                        Sub-Category, Product Name, Quantity, Discount, Profit,
                        City, Country, Segment, State, Postal Code, Region.
                      - >-
                        7. We are assuming that the data for each month is
                        summed up to represent the total sales for that month.
                    code: |-
                      function main(data) {
                          // Extract and process sales data
                          let salesData = data['b09c3d12-b340-436f-81e3-8fb7af17c4ac'].map(order => {
                              return {
                                  date: new Date(order['Order Date'].split('/').reverse().join('-')),
                                  sales: validateNumber(order['Sales'])
                              };
                          });

                          // Sort sales data by date
                          salesData.sort((a, b) => a.date - b.date);

                          // Group sales data by month and year
                          let groupedSalesData = {};
                          salesData.forEach(order => {
                              let monthYear = order.date.toLocaleString('default', { month: 'long' }) + ' ' + order.date.getFullYear();
                              if (!groupedSalesData[monthYear]) {
                                  groupedSalesData[monthYear] = 0;
                              }
                              groupedSalesData[monthYear] += order.sales;
                          });

                          // Prepare data for chart
                          let labels = Object.keys(groupedSalesData);
                          let datasets = [{
                              label: 'Sales',
                              data: Object.values(groupedSalesData),
                              fill: false,
                              borderColor: 'rgb(75, 192, 192)',
                              tension: 0.1
                          }];

                          // Return chart configuration
                          return {
                              type: 'line',
                              data: { labels, datasets },
                              options: {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      x: {
                                          title: {
                                              display: true,
                                              text: 'Month and Year'
                                          }
                                      },
                                      y: {
                                          title: {
                                              display: true,
                                              text: 'Sales'
                                          }
                                      }
                                  }
                              }
                          };
                      }
                    dashboard: 006f7dd5-f219-48cd-a360-97c5a5f8b57c
                    h: 1
                    id: 0a895b21-c4a4-4806-943e-4de029121eea
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    query: >-
                      Create a line chart showing sales by month using the order
                      date. The x axis should show the month and year like "June
                      2020"
                    title: Testing title change
                    w: 4
                    x: 0
                    "y": 0
        "401":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 11:03:55 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
  /api/dashboards/5159cb4e-b89d-49a6-9c81-ef7833737aba/widgets/00edb07b-2805-4808-a185-3ac2f8635c19:
    delete:
      tags:
        - Dashboards
        - Widgets
      summary: Delete widget by id
      description: Delete widget by id
      operationId: deleteWidgetById
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 11:04:24 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
              examples:
                Success:
                  value:
                    success: true
        "401":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 11:04:34 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
  /api/dashboards/47b6e961-a51c-4bf3-a9d4-01f30215cc42/questions:
    get:
      tags:
        - Dashboards
        - Questions
      summary: Get questions by dashboard id
      description: Get questions by dashboard id
      operationId: getQuestionsByDashboardId
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:44:55 GMT
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    assumptions:
                      type: array
                      items:
                        type: string
                        example: >-
                          1. The 'Sales' field in the second dataset represents
                          the sales volume.
                      example:
                        - >-
                          1. The 'Sales' field in the second dataset represents
                          the sales volume.
                        - >-
                          2. The 'State' field in the first dataset represents
                          the state of the customer.
                        - >-
                          3. The 'Customer ID' field is the common field between
                          the two datasets.
                        - >-
                          4. The 'Sales' field is a numerical value and needs to
                          be validated using the validateNumber function.
                        - >-
                          5. The sales volume is calculated by summing up the
                          'Sales' field for each state.
                        - >-
                          6. If there are multiple states with the same highest
                          sales volume, only one of them will be returned.
                    code:
                      type: string
                      example: |-
                        function main(data) {
                            let customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                            let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                            let salesByState = {};

                            for (let i = 0; i < salesData.length; i++) {
                                let sales = validateNumber(salesData[i]['Sales']);
                                let customerId = salesData[i]['Customer ID'];

                                for (let j = 0; j < customerData.length; j++) {
                                    if (customerData[j]['Customer ID'] === customerId) {
                                        let state = customerData[j]['State'];
                                        if (salesByState[state]) {
                                            salesByState[state] += sales;
                                        } else {
                                            salesByState[state] = sales;
                                        }
                                        break;
                                    }
                                }
                            }

                            let maxSalesState = Object.keys(salesByState).reduce((a, b) => salesByState[a] > salesByState[b] ? a : b);

                            return { 'State': maxSalesState, 'Sales Volume': salesByState[maxSalesState] };
                        }
                    created_at:
                      type: string
                      example: "2023-09-08T10:40:22.02916+00:00"
                    dashboard:
                      type: string
                      example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    id:
                      type: string
                      example: c3016b18-3233-4ca8-b19d-36526d32b049
                    organisation:
                      type: string
                      example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    organisation_user:
                      nullable: true
                      example: null
                    output:
                      type: string
                      example: >-
                        The state with the highest sales volume is California
                        with a sales volume of 451036.58229999995.
                    query:
                      type: string
                      example: Which state has the highest sales volume?
                    report:
                      nullable: true
                      example: null
                    user:
                      nullable: true
                      example: null
                example:
                  - assumptions:
                      - >-
                        1. The 'Sales' field in the second dataset represents
                        the sales volume.
                      - >-
                        2. The 'State' field in the first dataset represents the
                        state of the customer.
                      - >-
                        3. The 'Customer ID' field is the common field between
                        the two datasets.
                      - >-
                        4. The 'Sales' field is a numerical value and needs to
                        be validated using the validateNumber function.
                      - >-
                        5. The sales volume is calculated by summing up the
                        'Sales' field for each state.
                      - >-
                        6. If there are multiple states with the same highest
                        sales volume, only one of them will be returned.
                    code: |-
                      function main(data) {
                          let customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                          let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                          let salesByState = {};

                          for (let i = 0; i < salesData.length; i++) {
                              let sales = validateNumber(salesData[i]['Sales']);
                              let customerId = salesData[i]['Customer ID'];

                              for (let j = 0; j < customerData.length; j++) {
                                  if (customerData[j]['Customer ID'] === customerId) {
                                      let state = customerData[j]['State'];
                                      if (salesByState[state]) {
                                          salesByState[state] += sales;
                                      } else {
                                          salesByState[state] = sales;
                                      }
                                      break;
                                  }
                              }
                          }

                          let maxSalesState = Object.keys(salesByState).reduce((a, b) => salesByState[a] > salesByState[b] ? a : b);

                          return { 'State': maxSalesState, 'Sales Volume': salesByState[maxSalesState] };
                      }
                    created_at: "2023-09-08T10:40:22.02916+00:00"
                    dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    id: c3016b18-3233-4ca8-b19d-36526d32b049
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    organisation_user: null
                    output: >-
                      The state with the highest sales volume is California with
                      a sales volume of 451036.58229999995.
                    query: Which state has the highest sales volume?
                    report: null
                    user: null
              examples:
                Success:
                  value:
                    - assumptions:
                        - >-
                          1. The 'Sales' field in the second dataset represents
                          the sales volume.
                        - >-
                          2. The 'State' field in the first dataset represents
                          the state of the customer.
                        - >-
                          3. The 'Customer ID' field is the common field between
                          the two datasets.
                        - >-
                          4. The 'Sales' field is a numerical value and needs to
                          be validated using the validateNumber function.
                        - >-
                          5. The sales volume is calculated by summing up the
                          'Sales' field for each state.
                        - >-
                          6. If there are multiple states with the same highest
                          sales volume, only one of them will be returned.
                      code: |-
                        function main(data) {
                            let customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                            let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                            let salesByState = {};

                            for (let i = 0; i < salesData.length; i++) {
                                let sales = validateNumber(salesData[i]['Sales']);
                                let customerId = salesData[i]['Customer ID'];

                                for (let j = 0; j < customerData.length; j++) {
                                    if (customerData[j]['Customer ID'] === customerId) {
                                        let state = customerData[j]['State'];
                                        if (salesByState[state]) {
                                            salesByState[state] += sales;
                                        } else {
                                            salesByState[state] = sales;
                                        }
                                        break;
                                    }
                                }
                            }

                            let maxSalesState = Object.keys(salesByState).reduce((a, b) => salesByState[a] > salesByState[b] ? a : b);

                            return { 'State': maxSalesState, 'Sales Volume': salesByState[maxSalesState] };
                        }
                      created_at: "2023-09-08T10:40:22.02916+00:00"
                      dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      id: c3016b18-3233-4ca8-b19d-36526d32b049
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      organisation_user: null
                      output: >-
                        The state with the highest sales volume is California
                        with a sales volume of 451036.58229999995.
                      query: Which state has the highest sales volume?
                      report: null
                      user: null
        "401":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:45:08 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
    put:
      tags:
        - Dashboards
        - Questions
      summary: Ask question to dashboard by id
      description: Ask question to dashboard by id
      operationId: askQuestionToDashboardById
      parameters:
        - name: query
          in: query
          schema:
            type: string
            example: Which state has the highest sales volume?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: TESTING API
            examples:
              Ask question to dashboard by id:
                value:
                  title: TESTING API
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:39:43 GMT
            vary:
              schema:
                type: string
                example: RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url
          content:
            text/plain:
              examples:
                Success:
                  value: >-
                    // Assumptions:

                    // 1. The 'Sales' field in the second dataset represents the
                    sales volume.

                    // 2. The 'State' field in the first dataset represents the
                    state of the customer.

                    // 3. The 'Customer ID' field is the common field between
                    the two datasets.

                    // 4. The 'Sales' field is a numerical value and needs to be
                    validated using the validateNumber function.

                    // 5. The sales volume is calculated by summing up the
                    'Sales' field for each state.

                    // 6. If there are multiple states with the same highest
                    sales volume, only one of them will be returned.


                    function main(data) {
                        let customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                        let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                        let salesByState = {};

                        for (let i = 0; i < salesData.length; i++) {
                            let sales = validateNumber(salesData[i]['Sales']);
                            let customerId = salesData[i]['Customer ID'];

                            for (let j = 0; j < customerData.length; j++) {
                                if (customerData[j]['Customer ID'] === customerId) {
                                    let state = customerData[j]['State'];
                                    if (salesByState[state]) {
                                        salesByState[state] += sales;
                                    } else {
                                        salesByState[state] = sales;
                                    }
                                    break;
                                }
                            }
                        }

                        let maxSalesState = Object.keys(salesByState).reduce((a, b) => salesByState[a] > salesByState[b] ? a : b);

                        return { 'State': maxSalesState, 'Sales Volume': salesByState[maxSalesState] };
                    }

                    FINAL ANSWER:The state with the highest sales volume is
                    California with a sales volume of 451036.58229999995.
        "401":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:43:38 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
        "428":
          description: Incomplete
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:43:18 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No query found
              examples:
                Incomplete:
                  value:
                    message: No query found
  /api/dashboards/47b6e961-a51c-4bf3-a9d4-01f30215cc42/sessions:
    post:
      tags:
        - Dashboards
        - Sessions
      summary: Upsert dashboard session
      description: >-
        A session creates a link between a user under your organisation and a
        dashboard. If a session already exists, its retrieved to save the user's
        changes and edits. If a session does not exist, one is created and is
        retreived
      operationId: upsertDashboardSession
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  type: object
                  properties:
                    hello:
                      type: string
                      example: world
                    testing:
                      type: number
                      example: 1234567456
                user:
                  type: string
                  example: successfull
            examples:
              Upsert dashboard session:
                value:
                  parameters:
                    hello: world
                    testing: 1234567456
                  user: successfull
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 06:48:47 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  dashboard:
                    type: string
                    example: e0a6ce20-ca31-421e-8764-74cde46e9463
                  id:
                    type: string
                    example: 1ad893d9-8654-4797-8603-d01186575349
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  parameters:
                    type: object
                    properties:
                      hello:
                        type: string
                        example: world
                      testing:
                        type: number
                        example: 1234567456
                  url:
                    type: string
                    example: >-
                      /embed/dashboard/e0a6ce20-ca31-421e-8764-74cde46e9463?token=eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiYXV0aGVudGljYXRlZCIsImFwcF9tZXRhZGF0YSI6eyJkYXNoYm9hcmQiOiJlMGE2Y2UyMC1jYTMxLTQyMWUtODc2NC03NGNkZTQ2ZTk0NjMiLCJzZXNzaW9uIjoiMWFkODkzZDktODY1NC00Nzk3LTg2MDMtZDAxMTg2NTc1MzQ5In0sInN1YiI6IjMxYTA1Y2ZkLTEyNzUtNGM3Ni04MzkwLTIwYjMyOGEzYzRiZi1zdWNjZXNzZnVsbCIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJpYXQiOjE2OTQxNTU3Mjd9.P_eZloNdX7FN2sVWsANfIrHy5SikE1Zl8NPmAteDIwU
                  user:
                    type: string
                    example: successfull
              examples:
                Success:
                  value:
                    dashboard: e0a6ce20-ca31-421e-8764-74cde46e9463
                    id: 1ad893d9-8654-4797-8603-d01186575349
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parameters:
                      hello: world
                      testing: 1234567456
                    url: >-
                      /embed/dashboard/e0a6ce20-ca31-421e-8764-74cde46e9463?token=eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiYXV0aGVudGljYXRlZCIsImFwcF9tZXRhZGF0YSI6eyJkYXNoYm9hcmQiOiJlMGE2Y2UyMC1jYTMxLTQyMWUtODc2NC03NGNkZTQ2ZTk0NjMiLCJzZXNzaW9uIjoiMWFkODkzZDktODY1NC00Nzk3LTg2MDMtZDAxMTg2NTc1MzQ5In0sInN1YiI6IjMxYTA1Y2ZkLTEyNzUtNGM3Ni04MzkwLTIwYjMyOGEzYzRiZi1zdWNjZXNzZnVsbCIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJpYXQiOjE2OTQxNTU3Mjd9.P_eZloNdX7FN2sVWsANfIrHy5SikE1Zl8NPmAteDIwU
                    user: successfull
        "500":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 06:49:08 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Embed token is not valid or has expired
              examples:
                Unauthorized:
                  value:
                    message: Embed token is not valid or has expired
  /api/dashboards:
    get:
      tags:
        - Dashboards
      summary: Get all dashboards
      description: This endpoint fetches all teh dashboards under an organisation
      operationId: getAllDashboards
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 06:21:09 GMT
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    created_at:
                      type: string
                      example: "2023-09-01T11:14:50.430891+00:00"
                    datasources:
                      type: array
                      items:
                        type: object
                        properties:
                          columns:
                            type: array
                            items:
                              type: object
                              properties:
                                description:
                                  type: string
                                  example: Customer ID is a unique key across tables
                                title:
                                  type: string
                                  example: Customer ID
                            example:
                              - description: Customer ID is a unique key across tables
                                title: Customer ID
                              - description: City
                                title: City
                              - description: Country
                                title: Country
                              - description: The segment of the customer
                                title: Segment
                              - description: State
                                title: State
                              - description: Postal Code
                                title: Postal Code
                              - description: Region
                                title: Region
                          config:
                            type: object
                            properties:
                              type:
                                type: string
                                example: csv
                              url:
                                type: string
                                example: >-
                                  http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                          created_at:
                            type: string
                            example: "2023-09-01T11:39:30.716235+00:00"
                          id:
                            type: string
                            example: 44a3aa21-0181-46d9-a54b-af915aaec92e
                          last_updated_at:
                            type: string
                            example: "2023-09-01T11:40:13.644+00:00"
                          organisation:
                            type: string
                            example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          parameters:
                            type: array
                            items: {}
                            example: []
                          source:
                            type: string
                            example: file
                          title:
                            type: string
                            example: Customer data
                      example:
                        - columns:
                            - description: Customer ID is a unique key across tables
                              title: Customer ID
                            - description: City
                              title: City
                            - description: Country
                              title: Country
                            - description: The segment of the customer
                              title: Segment
                            - description: State
                              title: State
                            - description: Postal Code
                              title: Postal Code
                            - description: Region
                              title: Region
                          config:
                            type: csv
                            url: >-
                              http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                          created_at: "2023-09-01T11:39:30.716235+00:00"
                          id: 44a3aa21-0181-46d9-a54b-af915aaec92e
                          last_updated_at: "2023-09-01T11:40:13.644+00:00"
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          parameters: []
                          source: file
                          title: Customer data
                        - columns:
                            - description: Row ID
                              title: Row ID
                            - description: Order ID
                              title: Order ID
                            - description: Order Date
                              title: Order Date
                            - description: Ship Date
                              title: Ship Date
                            - description: Ship Mode
                              title: Ship Mode
                            - description: Customer ID
                              title: Customer ID
                            - description: Product ID
                              title: Product ID
                            - description: Category
                              title: Category
                            - description: Sub-Category
                              title: Sub-Category
                            - description: Product Name
                              title: Product Name
                            - description: Sales
                              title: Sales
                            - description: Quantity
                              title: Quantity
                            - description: Discount
                              title: Discount
                            - description: Profit
                              title: Profit
                          config:
                            type: csv
                            url: >-
                              http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:3f6aa55e-ba95-42e3-8a07-b4baceb0812d/Sample%20demo%20dataset%20-%20Sample%20Orders.csv
                          created_at: "2023-09-01T10:26:18.017866+00:00"
                          id: 74813926-d1ec-4b38-82e1-08d1820cb029
                          last_updated_at: "2023-09-06T15:17:27.333+00:00"
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          parameters: []
                          source: file
                          title: Order data
                    description:
                      type: string
                      example: Some description about the dashboard
                    id:
                      type: string
                      example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    last_updated_at:
                      type: string
                      example: "2023-09-07T14:51:42.626+00:00"
                    organisation:
                      type: string
                      example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parent_dashboard:
                      nullable: true
                      example: null
                    thumbnail:
                      type: string
                      example: >-
                        http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/dashboard:47b6e961-a51c-4bf3-a9d4-01f30215cc42/thumbnail.png
                    title:
                      type: string
                      example: Sample Dashboard
                    widgets:
                      type: array
                      items:
                        type: object
                        properties:
                          assumptions:
                            type: array
                            items:
                              type: string
                              example: >-
                                1. The total sales will be calculated from the
                                array with key
                                74813926-d1ec-4b38-82e1-08d1820cb029 as it
                                contains the 'Sales' field.
                            example:
                              - >-
                                1. The total sales will be calculated from the
                                array with key
                                74813926-d1ec-4b38-82e1-08d1820cb029 as it
                                contains the 'Sales' field.
                              - >-
                                2. The 'Sales' field is assumed to be in US
                                dollars.
                              - >-
                                3. The 'Sales' field is assumed to be a
                                numerical value, but it will be passed through
                                the validateNumber function to ensure it is a
                                usable number.
                              - >-
                                4. The 'Sales' field values will be summed up to
                                get the total sales.
                              - >-
                                5. The total sales value will be rounded to 2
                                decimal points using the toFixed(2) method.
                              - >-
                                6. The total sales value will be returned as a
                                single data point in the datasets.data array.
                              - >-
                                7. The datasets.label will be set to 'Total
                                Sales (USD)' to indicate the unit of the metric.
                              - >-
                                8. The type of chart in config will be set to
                                'metric' as per the user's request.
                          code:
                            type: string
                            example: |-
                              function main(data) {
                                  let totalSales = 0;
                                  data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                      totalSales += validateNumber(item['Sales']);
                                  });
                                  totalSales = totalSales.toFixed(2);

                                  return {
                                      type: 'metric',
                                      data: {
                                          datasets: [{
                                              data: [totalSales],
                                              label: 'Total Sales (USD)'
                                          }]
                                      },
                                      options: {
                                          responsive: true,
                                          maintainAspectRatio: false
                                      }
                                  };
                              }
                          dashboard:
                            type: string
                            example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h:
                            type: number
                            example: 1
                          id:
                            type: string
                            example: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                          organisation:
                            type: string
                            example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query:
                            type: string
                            example: >-
                              Show me a metric showing the total amount of sales
                              in US dollars. Round the final value to 2 decimal
                              points
                          title:
                            type: string
                            example: Total sales
                          w:
                            type: number
                            example: 4
                          x:
                            type: number
                            example: 4
                          "y":
                            type: number
                            example: 0
                      example:
                        - assumptions:
                            - >-
                              1. The total sales will be calculated from the
                              array with key
                              74813926-d1ec-4b38-82e1-08d1820cb029 as it
                              contains the 'Sales' field.
                            - >-
                              2. The 'Sales' field is assumed to be in US
                              dollars.
                            - >-
                              3. The 'Sales' field is assumed to be a numerical
                              value, but it will be passed through the
                              validateNumber function to ensure it is a usable
                              number.
                            - >-
                              4. The 'Sales' field values will be summed up to
                              get the total sales.
                            - >-
                              5. The total sales value will be rounded to 2
                              decimal points using the toFixed(2) method.
                            - >-
                              6. The total sales value will be returned as a
                              single data point in the datasets.data array.
                            - >-
                              7. The datasets.label will be set to 'Total Sales
                              (USD)' to indicate the unit of the metric.
                            - >-
                              8. The type of chart in config will be set to
                              'metric' as per the user's request.
                          code: |-
                            function main(data) {
                                let totalSales = 0;
                                data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                    totalSales += validateNumber(item['Sales']);
                                });
                                totalSales = totalSales.toFixed(2);

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalSales],
                                            label: 'Total Sales (USD)'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Show me a metric showing the total amount of sales
                            in US dollars. Round the final value to 2 decimal
                            points
                          title: Total sales
                          w: 4
                          x: 4
                          "y": 0
                        - assumptions:
                            - >-
                              1. The total customer to date is calculated by
                              counting the unique Customer IDs in the data.
                            - >-
                              2. The data for Customer IDs is assumed to be in
                              the array for key
                              44a3aa21-0181-46d9-a54b-af915aaec92e.
                            - >-
                              3. The function uses a Set to store unique
                              Customer IDs and then counts the size of the Set.
                            - >-
                              4. The chart type is set to 'metric' and the total
                              customer count is returned as a single data point.
                            - >-
                              5. The label for the data point is set to 'Total
                              Customers'.
                          code: |-
                            function main(data) {
                                const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                                const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                                const totalCustomers = uniqueCustomers.size;

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalCustomers],
                                            label: 'Total Customers'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: d38b4048-9a60-40e7-aead-62ba8227b7da
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: Create a metric showing the total customer to date
                          title: Total customers
                          w: 4
                          x: 0
                          "y": 0
                        - assumptions: []
                          code: |-
                            function main(data) {
                                let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                                let salesPerMonth = {};

                                salesData.forEach(sale => {
                                    let date = new Date(sale['Order Date']);
                                    let year = date.getFullYear();
                                    let month = date.getMonth();

                                    if (!salesPerMonth[year]) {
                                        salesPerMonth[year] = Array(12).fill(0);
                                    }

                                    salesPerMonth[year][month] += validateNumber(sale['Sales']);
                                });

                                let datasets = [];
                                for (let year in salesPerMonth) {
                                    datasets.push({
                                        label: year,
                                        data: salesPerMonth[year],
                                        fill: false,
                                        borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                    });
                                }

                                return {
                                    type: 'line',
                                    data: {
                                        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                        datasets: datasets
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false,
                                        scales: {
                                            xAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Month'
                                                }
                                            }],
                                            yAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Sales'
                                                }
                                            }]
                                        }
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 3
                          id: 05f28a95-7cf5-488f-ac52-736536b3594e
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Show me the sales per month as a line chart. Each
                            line should show the sales for a year.
                          title: Sales per month as a line chart
                          w: 6
                          x: 6
                          "y": 1
                        - assumptions:
                            - >-
                              1. The user wants to know the total number of
                              orders to date.
                            - >-
                              2. The 'Order ID' field from the array with key
                              '74813926-d1ec-4b38-82e1-08d1820cb029' will be
                              used to count the number of orders.
                            - >-
                              3. The 'Order Date' field will be used to filter
                              the orders up to the current date.
                            - >-
                              4. The 'Customer ID' field will be used to match
                              the data from both arrays.
                            - >-
                              5. The validateNumber function will be used to
                              ensure the 'Order ID' is a valid number before
                              counting.
                            - >-
                              6. The chart type will be set to 'metric' as per
                              the user's request.
                            - >-
                              7. The chart will display a single data point
                              representing the total number of orders to date.
                            - >-
                              8. The label for the data point will be 'Total
                              Orders'.
                          code: |-
                            function main(data) {
                                let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                                let currentDate = new Date();
                                let totalOrders = 0;

                                for (let i = 0; i < orders.length; i++) {
                                    let orderDate = new Date(orders[i]['Order Date']);
                                    if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                        totalOrders++;
                                    }
                                }

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalOrders],
                                            label: 'Total Orders'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false,
                                        scales: {
                                            xAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Orders'
                                                }
                                            }],
                                            yAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Count'
                                                }
                                            }]
                                        }
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: Show me a metric for how many orders I have to date
                          title: Total orders
                          w: 4
                          x: 8
                          "y": 0
                        - assumptions: []
                          code: |-
                            function main(data) {
                                // Extract the arrays from the data object
                                const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                                const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                                // Create a map to store the total sales volume for each state
                                const stateSales = new Map();

                                // Iterate over the sales data
                                for (let i = 0; i < salesData.length; i++) {
                                    // Find the corresponding customer data
                                    const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                    // If the customer data is found and the state is not yet in the map, add it
                                    if (customer && !stateSales.has(customer.State)) {
                                        stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                    }
                                    // If the state is already in the map, add the sales volume to the existing value
                                    else if (customer) {
                                        stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                    }
                                }

                                // Convert the map to an array and sort it in descending order by sales volume
                                const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                                // Limit the data to the top 5 states
                                const topStates = sortedStates.slice(0, 5);

                                // Create the data for the chart
                                const chartData = {
                                    labels: topStates.map(s => s[0]),
                                    datasets: [{
                                        label: 'Sales Volume',
                                        data: topStates.map(s => s[1]),
                                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                        borderColor: 'rgba(75, 192, 192, 1)',
                                        borderWidth: 1
                                    }]
                                };

                                // Create the options for the chart
                                const chartOptions = {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    scales: {
                                        yAxes: [{
                                            ticks: {
                                                beginAtZero: true
                                            },
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Sales Volume'
                                            }
                                        }],
                                        xAxes: [{
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'State'
                                            }
                                        }]
                                    }
                                };

                                // Return the chart configuration
                                return {
                                    type: 'bar',
                                    data: chartData,
                                    options: chartOptions
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 3
                          id: 5734dba1-4392-4128-8deb-058b7f6517fe
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Create a chart showing the top 5 states by sales
                            volume
                          title: Top 5 states by sales volume
                          w: 6
                          x: 0
                          "y": 1
                example:
                  - created_at: "2023-09-01T11:14:50.430891+00:00"
                    datasources:
                      - columns:
                          - description: Customer ID is a unique key across tables
                            title: Customer ID
                          - description: City
                            title: City
                          - description: Country
                            title: Country
                          - description: The segment of the customer
                            title: Segment
                          - description: State
                            title: State
                          - description: Postal Code
                            title: Postal Code
                          - description: Region
                            title: Region
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                        created_at: "2023-09-01T11:39:30.716235+00:00"
                        id: 44a3aa21-0181-46d9-a54b-af915aaec92e
                        last_updated_at: "2023-09-01T11:40:13.644+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Customer data
                      - columns:
                          - description: Row ID
                            title: Row ID
                          - description: Order ID
                            title: Order ID
                          - description: Order Date
                            title: Order Date
                          - description: Ship Date
                            title: Ship Date
                          - description: Ship Mode
                            title: Ship Mode
                          - description: Customer ID
                            title: Customer ID
                          - description: Product ID
                            title: Product ID
                          - description: Category
                            title: Category
                          - description: Sub-Category
                            title: Sub-Category
                          - description: Product Name
                            title: Product Name
                          - description: Sales
                            title: Sales
                          - description: Quantity
                            title: Quantity
                          - description: Discount
                            title: Discount
                          - description: Profit
                            title: Profit
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:3f6aa55e-ba95-42e3-8a07-b4baceb0812d/Sample%20demo%20dataset%20-%20Sample%20Orders.csv
                        created_at: "2023-09-01T10:26:18.017866+00:00"
                        id: 74813926-d1ec-4b38-82e1-08d1820cb029
                        last_updated_at: "2023-09-06T15:17:27.333+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Order data
                    description: Some description about the dashboard
                    id: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    last_updated_at: "2023-09-07T14:51:42.626+00:00"
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parent_dashboard: null
                    thumbnail: >-
                      http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/dashboard:47b6e961-a51c-4bf3-a9d4-01f30215cc42/thumbnail.png
                    title: Sample Dashboard
                    widgets:
                      - assumptions:
                          - >-
                            1. The total sales will be calculated from the array
                            with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                            contains the 'Sales' field.
                          - 2. The 'Sales' field is assumed to be in US dollars.
                          - >-
                            3. The 'Sales' field is assumed to be a numerical
                            value, but it will be passed through the
                            validateNumber function to ensure it is a usable
                            number.
                          - >-
                            4. The 'Sales' field values will be summed up to get
                            the total sales.
                          - >-
                            5. The total sales value will be rounded to 2
                            decimal points using the toFixed(2) method.
                          - >-
                            6. The total sales value will be returned as a
                            single data point in the datasets.data array.
                          - >-
                            7. The datasets.label will be set to 'Total Sales
                            (USD)' to indicate the unit of the metric.
                          - >-
                            8. The type of chart in config will be set to
                            'metric' as per the user's request.
                        code: |-
                          function main(data) {
                              let totalSales = 0;
                              data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                  totalSales += validateNumber(item['Sales']);
                              });
                              totalSales = totalSales.toFixed(2);

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalSales],
                                          label: 'Total Sales (USD)'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me a metric showing the total amount of sales in
                          US dollars. Round the final value to 2 decimal points
                        title: Total sales
                        w: 4
                        x: 4
                        "y": 0
                      - assumptions:
                          - >-
                            1. The total customer to date is calculated by
                            counting the unique Customer IDs in the data.
                          - >-
                            2. The data for Customer IDs is assumed to be in the
                            array for key 44a3aa21-0181-46d9-a54b-af915aaec92e.
                          - >-
                            3. The function uses a Set to store unique Customer
                            IDs and then counts the size of the Set.
                          - >-
                            4. The chart type is set to 'metric' and the total
                            customer count is returned as a single data point.
                          - >-
                            5. The label for the data point is set to 'Total
                            Customers'.
                        code: |-
                          function main(data) {
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                              const totalCustomers = uniqueCustomers.size;

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalCustomers],
                                          label: 'Total Customers'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: d38b4048-9a60-40e7-aead-62ba8227b7da
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Create a metric showing the total customer to date
                        title: Total customers
                        w: 4
                        x: 0
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let salesPerMonth = {};

                              salesData.forEach(sale => {
                                  let date = new Date(sale['Order Date']);
                                  let year = date.getFullYear();
                                  let month = date.getMonth();

                                  if (!salesPerMonth[year]) {
                                      salesPerMonth[year] = Array(12).fill(0);
                                  }

                                  salesPerMonth[year][month] += validateNumber(sale['Sales']);
                              });

                              let datasets = [];
                              for (let year in salesPerMonth) {
                                  datasets.push({
                                      label: year,
                                      data: salesPerMonth[year],
                                      fill: false,
                                      borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                  });
                              }

                              return {
                                  type: 'line',
                                  data: {
                                      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                      datasets: datasets
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Month'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Sales'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 05f28a95-7cf5-488f-ac52-736536b3594e
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me the sales per month as a line chart. Each line
                          should show the sales for a year.
                        title: Sales per month as a line chart
                        w: 6
                        x: 6
                        "y": 1
                      - assumptions:
                          - >-
                            1. The user wants to know the total number of orders
                            to date.
                          - >-
                            2. The 'Order ID' field from the array with key
                            '74813926-d1ec-4b38-82e1-08d1820cb029' will be used
                            to count the number of orders.
                          - >-
                            3. The 'Order Date' field will be used to filter the
                            orders up to the current date.
                          - >-
                            4. The 'Customer ID' field will be used to match the
                            data from both arrays.
                          - >-
                            5. The validateNumber function will be used to
                            ensure the 'Order ID' is a valid number before
                            counting.
                          - >-
                            6. The chart type will be set to 'metric' as per the
                            user's request.
                          - >-
                            7. The chart will display a single data point
                            representing the total number of orders to date.
                          - >-
                            8. The label for the data point will be 'Total
                            Orders'.
                        code: |-
                          function main(data) {
                              let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let currentDate = new Date();
                              let totalOrders = 0;

                              for (let i = 0; i < orders.length; i++) {
                                  let orderDate = new Date(orders[i]['Order Date']);
                                  if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                      totalOrders++;
                                  }
                              }

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalOrders],
                                          label: 'Total Orders'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Orders'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Count'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Show me a metric for how many orders I have to date
                        title: Total orders
                        w: 4
                        x: 8
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              // Extract the arrays from the data object
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                              // Create a map to store the total sales volume for each state
                              const stateSales = new Map();

                              // Iterate over the sales data
                              for (let i = 0; i < salesData.length; i++) {
                                  // Find the corresponding customer data
                                  const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                  // If the customer data is found and the state is not yet in the map, add it
                                  if (customer && !stateSales.has(customer.State)) {
                                      stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                  }
                                  // If the state is already in the map, add the sales volume to the existing value
                                  else if (customer) {
                                      stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                  }
                              }

                              // Convert the map to an array and sort it in descending order by sales volume
                              const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                              // Limit the data to the top 5 states
                              const topStates = sortedStates.slice(0, 5);

                              // Create the data for the chart
                              const chartData = {
                                  labels: topStates.map(s => s[0]),
                                  datasets: [{
                                      label: 'Sales Volume',
                                      data: topStates.map(s => s[1]),
                                      backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                      borderColor: 'rgba(75, 192, 192, 1)',
                                      borderWidth: 1
                                  }]
                              };

                              // Create the options for the chart
                              const chartOptions = {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      yAxes: [{
                                          ticks: {
                                              beginAtZero: true
                                          },
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Sales Volume'
                                          }
                                      }],
                                      xAxes: [{
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'State'
                                          }
                                      }]
                                  }
                              };

                              // Return the chart configuration
                              return {
                                  type: 'bar',
                                  data: chartData,
                                  options: chartOptions
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 5734dba1-4392-4128-8deb-058b7f6517fe
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Create a chart showing the top 5 states by sales
                          volume
                        title: Top 5 states by sales volume
                        w: 6
                        x: 0
                        "y": 1
              examples:
                Success:
                  value:
                    - created_at: "2023-09-01T11:14:50.430891+00:00"
                      datasources:
                        - columns:
                            - description: Customer ID is a unique key across tables
                              title: Customer ID
                            - description: City
                              title: City
                            - description: Country
                              title: Country
                            - description: The segment of the customer
                              title: Segment
                            - description: State
                              title: State
                            - description: Postal Code
                              title: Postal Code
                            - description: Region
                              title: Region
                          config:
                            type: csv
                            url: >-
                              http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                          created_at: "2023-09-01T11:39:30.716235+00:00"
                          id: 44a3aa21-0181-46d9-a54b-af915aaec92e
                          last_updated_at: "2023-09-01T11:40:13.644+00:00"
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          parameters: []
                          source: file
                          title: Customer data
                        - columns:
                            - description: Row ID
                              title: Row ID
                            - description: Order ID
                              title: Order ID
                            - description: Order Date
                              title: Order Date
                            - description: Ship Date
                              title: Ship Date
                            - description: Ship Mode
                              title: Ship Mode
                            - description: Customer ID
                              title: Customer ID
                            - description: Product ID
                              title: Product ID
                            - description: Category
                              title: Category
                            - description: Sub-Category
                              title: Sub-Category
                            - description: Product Name
                              title: Product Name
                            - description: Sales
                              title: Sales
                            - description: Quantity
                              title: Quantity
                            - description: Discount
                              title: Discount
                            - description: Profit
                              title: Profit
                          config:
                            type: csv
                            url: >-
                              http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:3f6aa55e-ba95-42e3-8a07-b4baceb0812d/Sample%20demo%20dataset%20-%20Sample%20Orders.csv
                          created_at: "2023-09-01T10:26:18.017866+00:00"
                          id: 74813926-d1ec-4b38-82e1-08d1820cb029
                          last_updated_at: "2023-09-06T15:17:27.333+00:00"
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          parameters: []
                          source: file
                          title: Order data
                      description: Some description about the dashboard
                      id: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                      last_updated_at: "2023-09-07T14:51:42.626+00:00"
                      organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                      parent_dashboard: null
                      thumbnail: >-
                        http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/dashboard:47b6e961-a51c-4bf3-a9d4-01f30215cc42/thumbnail.png
                      title: Sample Dashboard
                      widgets:
                        - assumptions:
                            - >-
                              1. The total sales will be calculated from the
                              array with key
                              74813926-d1ec-4b38-82e1-08d1820cb029 as it
                              contains the 'Sales' field.
                            - >-
                              2. The 'Sales' field is assumed to be in US
                              dollars.
                            - >-
                              3. The 'Sales' field is assumed to be a numerical
                              value, but it will be passed through the
                              validateNumber function to ensure it is a usable
                              number.
                            - >-
                              4. The 'Sales' field values will be summed up to
                              get the total sales.
                            - >-
                              5. The total sales value will be rounded to 2
                              decimal points using the toFixed(2) method.
                            - >-
                              6. The total sales value will be returned as a
                              single data point in the datasets.data array.
                            - >-
                              7. The datasets.label will be set to 'Total Sales
                              (USD)' to indicate the unit of the metric.
                            - >-
                              8. The type of chart in config will be set to
                              'metric' as per the user's request.
                          code: |-
                            function main(data) {
                                let totalSales = 0;
                                data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                    totalSales += validateNumber(item['Sales']);
                                });
                                totalSales = totalSales.toFixed(2);

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalSales],
                                            label: 'Total Sales (USD)'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Show me a metric showing the total amount of sales
                            in US dollars. Round the final value to 2 decimal
                            points
                          title: Total sales
                          w: 4
                          x: 4
                          "y": 0
                        - assumptions:
                            - >-
                              1. The total customer to date is calculated by
                              counting the unique Customer IDs in the data.
                            - >-
                              2. The data for Customer IDs is assumed to be in
                              the array for key
                              44a3aa21-0181-46d9-a54b-af915aaec92e.
                            - >-
                              3. The function uses a Set to store unique
                              Customer IDs and then counts the size of the Set.
                            - >-
                              4. The chart type is set to 'metric' and the total
                              customer count is returned as a single data point.
                            - >-
                              5. The label for the data point is set to 'Total
                              Customers'.
                          code: |-
                            function main(data) {
                                const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                                const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                                const totalCustomers = uniqueCustomers.size;

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalCustomers],
                                            label: 'Total Customers'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: d38b4048-9a60-40e7-aead-62ba8227b7da
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: Create a metric showing the total customer to date
                          title: Total customers
                          w: 4
                          x: 0
                          "y": 0
                        - assumptions: []
                          code: |-
                            function main(data) {
                                let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                                let salesPerMonth = {};

                                salesData.forEach(sale => {
                                    let date = new Date(sale['Order Date']);
                                    let year = date.getFullYear();
                                    let month = date.getMonth();

                                    if (!salesPerMonth[year]) {
                                        salesPerMonth[year] = Array(12).fill(0);
                                    }

                                    salesPerMonth[year][month] += validateNumber(sale['Sales']);
                                });

                                let datasets = [];
                                for (let year in salesPerMonth) {
                                    datasets.push({
                                        label: year,
                                        data: salesPerMonth[year],
                                        fill: false,
                                        borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                    });
                                }

                                return {
                                    type: 'line',
                                    data: {
                                        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                        datasets: datasets
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false,
                                        scales: {
                                            xAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Month'
                                                }
                                            }],
                                            yAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Sales'
                                                }
                                            }]
                                        }
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 3
                          id: 05f28a95-7cf5-488f-ac52-736536b3594e
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Show me the sales per month as a line chart. Each
                            line should show the sales for a year.
                          title: Sales per month as a line chart
                          w: 6
                          x: 6
                          "y": 1
                        - assumptions:
                            - >-
                              1. The user wants to know the total number of
                              orders to date.
                            - >-
                              2. The 'Order ID' field from the array with key
                              '74813926-d1ec-4b38-82e1-08d1820cb029' will be
                              used to count the number of orders.
                            - >-
                              3. The 'Order Date' field will be used to filter
                              the orders up to the current date.
                            - >-
                              4. The 'Customer ID' field will be used to match
                              the data from both arrays.
                            - >-
                              5. The validateNumber function will be used to
                              ensure the 'Order ID' is a valid number before
                              counting.
                            - >-
                              6. The chart type will be set to 'metric' as per
                              the user's request.
                            - >-
                              7. The chart will display a single data point
                              representing the total number of orders to date.
                            - >-
                              8. The label for the data point will be 'Total
                              Orders'.
                          code: |-
                            function main(data) {
                                let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                                let currentDate = new Date();
                                let totalOrders = 0;

                                for (let i = 0; i < orders.length; i++) {
                                    let orderDate = new Date(orders[i]['Order Date']);
                                    if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                        totalOrders++;
                                    }
                                }

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalOrders],
                                            label: 'Total Orders'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false,
                                        scales: {
                                            xAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Orders'
                                                }
                                            }],
                                            yAxes: [{
                                                display: true,
                                                scaleLabel: {
                                                    display: true,
                                                    labelString: 'Count'
                                                }
                                            }]
                                        }
                                    }
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 1
                          id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: Show me a metric for how many orders I have to date
                          title: Total orders
                          w: 4
                          x: 8
                          "y": 0
                        - assumptions: []
                          code: |-
                            function main(data) {
                                // Extract the arrays from the data object
                                const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                                const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                                // Create a map to store the total sales volume for each state
                                const stateSales = new Map();

                                // Iterate over the sales data
                                for (let i = 0; i < salesData.length; i++) {
                                    // Find the corresponding customer data
                                    const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                    // If the customer data is found and the state is not yet in the map, add it
                                    if (customer && !stateSales.has(customer.State)) {
                                        stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                    }
                                    // If the state is already in the map, add the sales volume to the existing value
                                    else if (customer) {
                                        stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                    }
                                }

                                // Convert the map to an array and sort it in descending order by sales volume
                                const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                                // Limit the data to the top 5 states
                                const topStates = sortedStates.slice(0, 5);

                                // Create the data for the chart
                                const chartData = {
                                    labels: topStates.map(s => s[0]),
                                    datasets: [{
                                        label: 'Sales Volume',
                                        data: topStates.map(s => s[1]),
                                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                        borderColor: 'rgba(75, 192, 192, 1)',
                                        borderWidth: 1
                                    }]
                                };

                                // Create the options for the chart
                                const chartOptions = {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    scales: {
                                        yAxes: [{
                                            ticks: {
                                                beginAtZero: true
                                            },
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'Sales Volume'
                                            }
                                        }],
                                        xAxes: [{
                                            scaleLabel: {
                                                display: true,
                                                labelString: 'State'
                                            }
                                        }]
                                    }
                                };

                                // Return the chart configuration
                                return {
                                    type: 'bar',
                                    data: chartData,
                                    options: chartOptions
                                };
                            }
                          dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                          h: 3
                          id: 5734dba1-4392-4128-8deb-058b7f6517fe
                          organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                          query: >-
                            Create a chart showing the top 5 states by sales
                            volume
                          title: Top 5 states by sales volume
                          w: 6
                          x: 0
                          "y": 1
        "500":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 06:33:02 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Embed token is not valid or has expired
              examples:
                Unauthorized:
                  value:
                    message: Embed token is not valid or has expired
    put:
      tags:
        - Dashboards
      summary: Create dashboard
      description: >-
        This endpoint creates a new dashboard. Minumum requirements are the
        title, description and the thumbnail
      operationId: createDashboard
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                thumbnail:
                  type: string
                  example: >-
                    https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                title:
                  type: string
                  example: Untitled Dashboard
            examples:
              Create dashboard:
                value:
                  description: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                  thumbnail: >-
                    https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                  title: Untitled Dashboard
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 06:27:01 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2023-09-08T06:27:01.524552+00:00"
                  description:
                    type: string
                    example: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                  id:
                    type: string
                    example: d1f04fea-9ef7-4a68-a30e-a0e1d3462006
                  last_updated_at:
                    type: string
                    example: "2023-09-08T06:27:01.524552+00:00"
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  parent_dashboard:
                    nullable: true
                    example: null
                  thumbnail:
                    type: string
                    example: >-
                      https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                  title:
                    type: string
                    example: Untitled Dashboard
              examples:
                Success:
                  value:
                    created_at: "2023-09-08T06:27:01.524552+00:00"
                    description: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                    id: d1f04fea-9ef7-4a68-a30e-a0e1d3462006
                    last_updated_at: "2023-09-08T06:27:01.524552+00:00"
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parent_dashboard: null
                    thumbnail: >-
                      https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                    title: Untitled Dashboard
        "500":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 06:33:46 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
  /api/dashboards/b081d6fd-feca-4cf0-a052-3d839f73a679:
    get:
      tags:
        - Dashboards
      summary: Get dashboard by id
      description: Get dashboard by id
      operationId: getDashboardById
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:29:41 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2023-09-01T11:14:50.430891+00:00"
                  datasources:
                    type: array
                    items:
                      type: object
                      properties:
                        columns:
                          type: array
                          items:
                            type: object
                            properties:
                              description:
                                type: string
                                example: Customer ID is a unique key across tables
                              title:
                                type: string
                                example: Customer ID
                          example:
                            - description: Customer ID is a unique key across tables
                              title: Customer ID
                            - description: City
                              title: City
                            - description: Country
                              title: Country
                            - description: The segment of the customer
                              title: Segment
                            - description: State
                              title: State
                            - description: Postal Code
                              title: Postal Code
                            - description: Region
                              title: Region
                        config:
                          type: object
                          properties:
                            type:
                              type: string
                              example: csv
                            url:
                              type: string
                              example: >-
                                http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                        created_at:
                          type: string
                          example: "2023-09-01T11:39:30.716235+00:00"
                        id:
                          type: string
                          example: 44a3aa21-0181-46d9-a54b-af915aaec92e
                        last_updated_at:
                          type: string
                          example: "2023-09-01T11:40:13.644+00:00"
                        organisation:
                          type: string
                          example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters:
                          type: array
                          items: {}
                          example: []
                        source:
                          type: string
                          example: file
                        title:
                          type: string
                          example: Customer data
                    example:
                      - columns:
                          - description: Customer ID is a unique key across tables
                            title: Customer ID
                          - description: City
                            title: City
                          - description: Country
                            title: Country
                          - description: The segment of the customer
                            title: Segment
                          - description: State
                            title: State
                          - description: Postal Code
                            title: Postal Code
                          - description: Region
                            title: Region
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                        created_at: "2023-09-01T11:39:30.716235+00:00"
                        id: 44a3aa21-0181-46d9-a54b-af915aaec92e
                        last_updated_at: "2023-09-01T11:40:13.644+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Customer data
                      - columns:
                          - description: Row ID
                            title: Row ID
                          - description: Order ID
                            title: Order ID
                          - description: Order Date
                            title: Order Date
                          - description: Ship Date
                            title: Ship Date
                          - description: Ship Mode
                            title: Ship Mode
                          - description: Customer ID
                            title: Customer ID
                          - description: Product ID
                            title: Product ID
                          - description: Category
                            title: Category
                          - description: Sub-Category
                            title: Sub-Category
                          - description: Product Name
                            title: Product Name
                          - description: Sales
                            title: Sales
                          - description: Quantity
                            title: Quantity
                          - description: Discount
                            title: Discount
                          - description: Profit
                            title: Profit
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:3f6aa55e-ba95-42e3-8a07-b4baceb0812d/Sample%20demo%20dataset%20-%20Sample%20Orders.csv
                        created_at: "2023-09-01T10:26:18.017866+00:00"
                        id: 74813926-d1ec-4b38-82e1-08d1820cb029
                        last_updated_at: "2023-09-06T15:17:27.333+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Order data
                  description:
                    type: string
                    example: Some description about the dashboard
                  id:
                    type: string
                    example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                  last_updated_at:
                    type: string
                    example: "2023-09-07T14:51:42.626+00:00"
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  parent_dashboard:
                    nullable: true
                    example: null
                  thumbnail:
                    type: string
                    example: >-
                      http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/dashboard:47b6e961-a51c-4bf3-a9d4-01f30215cc42/thumbnail.png
                  title:
                    type: string
                    example: Sample Dashboard
                  widgets:
                    type: array
                    items:
                      type: object
                      properties:
                        assumptions:
                          type: array
                          items:
                            type: string
                            example: >-
                              1. The total sales will be calculated from the
                              array with key
                              74813926-d1ec-4b38-82e1-08d1820cb029 as it
                              contains the 'Sales' field.
                          example:
                            - >-
                              1. The total sales will be calculated from the
                              array with key
                              74813926-d1ec-4b38-82e1-08d1820cb029 as it
                              contains the 'Sales' field.
                            - >-
                              2. The 'Sales' field is assumed to be in US
                              dollars.
                            - >-
                              3. The 'Sales' field is assumed to be a numerical
                              value, but it will be passed through the
                              validateNumber function to ensure it is a usable
                              number.
                            - >-
                              4. The 'Sales' field values will be summed up to
                              get the total sales.
                            - >-
                              5. The total sales value will be rounded to 2
                              decimal points using the toFixed(2) method.
                            - >-
                              6. The total sales value will be returned as a
                              single data point in the datasets.data array.
                            - >-
                              7. The datasets.label will be set to 'Total Sales
                              (USD)' to indicate the unit of the metric.
                            - >-
                              8. The type of chart in config will be set to
                              'metric' as per the user's request.
                        code:
                          type: string
                          example: |-
                            function main(data) {
                                let totalSales = 0;
                                data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                    totalSales += validateNumber(item['Sales']);
                                });
                                totalSales = totalSales.toFixed(2);

                                return {
                                    type: 'metric',
                                    data: {
                                        datasets: [{
                                            data: [totalSales],
                                            label: 'Total Sales (USD)'
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        maintainAspectRatio: false
                                    }
                                };
                            }
                        dashboard:
                          type: string
                          example: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h:
                          type: number
                          example: 1
                        id:
                          type: string
                          example: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                        organisation:
                          type: string
                          example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query:
                          type: string
                          example: >-
                            Show me a metric showing the total amount of sales
                            in US dollars. Round the final value to 2 decimal
                            points
                        title:
                          type: string
                          example: Total sales
                        w:
                          type: number
                          example: 4
                        x:
                          type: number
                          example: 4
                        "y":
                          type: number
                          example: 0
                    example:
                      - assumptions:
                          - >-
                            1. The total sales will be calculated from the array
                            with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                            contains the 'Sales' field.
                          - 2. The 'Sales' field is assumed to be in US dollars.
                          - >-
                            3. The 'Sales' field is assumed to be a numerical
                            value, but it will be passed through the
                            validateNumber function to ensure it is a usable
                            number.
                          - >-
                            4. The 'Sales' field values will be summed up to get
                            the total sales.
                          - >-
                            5. The total sales value will be rounded to 2
                            decimal points using the toFixed(2) method.
                          - >-
                            6. The total sales value will be returned as a
                            single data point in the datasets.data array.
                          - >-
                            7. The datasets.label will be set to 'Total Sales
                            (USD)' to indicate the unit of the metric.
                          - >-
                            8. The type of chart in config will be set to
                            'metric' as per the user's request.
                        code: |-
                          function main(data) {
                              let totalSales = 0;
                              data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                  totalSales += validateNumber(item['Sales']);
                              });
                              totalSales = totalSales.toFixed(2);

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalSales],
                                          label: 'Total Sales (USD)'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me a metric showing the total amount of sales in
                          US dollars. Round the final value to 2 decimal points
                        title: Total sales
                        w: 4
                        x: 4
                        "y": 0
                      - assumptions:
                          - >-
                            1. The total customer to date is calculated by
                            counting the unique Customer IDs in the data.
                          - >-
                            2. The data for Customer IDs is assumed to be in the
                            array for key 44a3aa21-0181-46d9-a54b-af915aaec92e.
                          - >-
                            3. The function uses a Set to store unique Customer
                            IDs and then counts the size of the Set.
                          - >-
                            4. The chart type is set to 'metric' and the total
                            customer count is returned as a single data point.
                          - >-
                            5. The label for the data point is set to 'Total
                            Customers'.
                        code: |-
                          function main(data) {
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                              const totalCustomers = uniqueCustomers.size;

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalCustomers],
                                          label: 'Total Customers'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: d38b4048-9a60-40e7-aead-62ba8227b7da
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Create a metric showing the total customer to date
                        title: Total customers
                        w: 4
                        x: 0
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let salesPerMonth = {};

                              salesData.forEach(sale => {
                                  let date = new Date(sale['Order Date']);
                                  let year = date.getFullYear();
                                  let month = date.getMonth();

                                  if (!salesPerMonth[year]) {
                                      salesPerMonth[year] = Array(12).fill(0);
                                  }

                                  salesPerMonth[year][month] += validateNumber(sale['Sales']);
                              });

                              let datasets = [];
                              for (let year in salesPerMonth) {
                                  datasets.push({
                                      label: year,
                                      data: salesPerMonth[year],
                                      fill: false,
                                      borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                  });
                              }

                              return {
                                  type: 'line',
                                  data: {
                                      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                      datasets: datasets
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Month'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Sales'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 05f28a95-7cf5-488f-ac52-736536b3594e
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me the sales per month as a line chart. Each line
                          should show the sales for a year.
                        title: Sales per month as a line chart
                        w: 6
                        x: 6
                        "y": 1
                      - assumptions:
                          - >-
                            1. The user wants to know the total number of orders
                            to date.
                          - >-
                            2. The 'Order ID' field from the array with key
                            '74813926-d1ec-4b38-82e1-08d1820cb029' will be used
                            to count the number of orders.
                          - >-
                            3. The 'Order Date' field will be used to filter the
                            orders up to the current date.
                          - >-
                            4. The 'Customer ID' field will be used to match the
                            data from both arrays.
                          - >-
                            5. The validateNumber function will be used to
                            ensure the 'Order ID' is a valid number before
                            counting.
                          - >-
                            6. The chart type will be set to 'metric' as per the
                            user's request.
                          - >-
                            7. The chart will display a single data point
                            representing the total number of orders to date.
                          - >-
                            8. The label for the data point will be 'Total
                            Orders'.
                        code: |-
                          function main(data) {
                              let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let currentDate = new Date();
                              let totalOrders = 0;

                              for (let i = 0; i < orders.length; i++) {
                                  let orderDate = new Date(orders[i]['Order Date']);
                                  if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                      totalOrders++;
                                  }
                              }

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalOrders],
                                          label: 'Total Orders'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Orders'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Count'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Show me a metric for how many orders I have to date
                        title: Total orders
                        w: 4
                        x: 8
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              // Extract the arrays from the data object
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                              // Create a map to store the total sales volume for each state
                              const stateSales = new Map();

                              // Iterate over the sales data
                              for (let i = 0; i < salesData.length; i++) {
                                  // Find the corresponding customer data
                                  const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                  // If the customer data is found and the state is not yet in the map, add it
                                  if (customer && !stateSales.has(customer.State)) {
                                      stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                  }
                                  // If the state is already in the map, add the sales volume to the existing value
                                  else if (customer) {
                                      stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                  }
                              }

                              // Convert the map to an array and sort it in descending order by sales volume
                              const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                              // Limit the data to the top 5 states
                              const topStates = sortedStates.slice(0, 5);

                              // Create the data for the chart
                              const chartData = {
                                  labels: topStates.map(s => s[0]),
                                  datasets: [{
                                      label: 'Sales Volume',
                                      data: topStates.map(s => s[1]),
                                      backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                      borderColor: 'rgba(75, 192, 192, 1)',
                                      borderWidth: 1
                                  }]
                              };

                              // Create the options for the chart
                              const chartOptions = {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      yAxes: [{
                                          ticks: {
                                              beginAtZero: true
                                          },
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Sales Volume'
                                          }
                                      }],
                                      xAxes: [{
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'State'
                                          }
                                      }]
                                  }
                              };

                              // Return the chart configuration
                              return {
                                  type: 'bar',
                                  data: chartData,
                                  options: chartOptions
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 5734dba1-4392-4128-8deb-058b7f6517fe
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Create a chart showing the top 5 states by sales
                          volume
                        title: Top 5 states by sales volume
                        w: 6
                        x: 0
                        "y": 1
              examples:
                Success:
                  value:
                    created_at: "2023-09-01T11:14:50.430891+00:00"
                    datasources:
                      - columns:
                          - description: Customer ID is a unique key across tables
                            title: Customer ID
                          - description: City
                            title: City
                          - description: Country
                            title: Country
                          - description: The segment of the customer
                            title: Segment
                          - description: State
                            title: State
                          - description: Postal Code
                            title: Postal Code
                          - description: Region
                            title: Region
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                        created_at: "2023-09-01T11:39:30.716235+00:00"
                        id: 44a3aa21-0181-46d9-a54b-af915aaec92e
                        last_updated_at: "2023-09-01T11:40:13.644+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Customer data
                      - columns:
                          - description: Row ID
                            title: Row ID
                          - description: Order ID
                            title: Order ID
                          - description: Order Date
                            title: Order Date
                          - description: Ship Date
                            title: Ship Date
                          - description: Ship Mode
                            title: Ship Mode
                          - description: Customer ID
                            title: Customer ID
                          - description: Product ID
                            title: Product ID
                          - description: Category
                            title: Category
                          - description: Sub-Category
                            title: Sub-Category
                          - description: Product Name
                            title: Product Name
                          - description: Sales
                            title: Sales
                          - description: Quantity
                            title: Quantity
                          - description: Discount
                            title: Discount
                          - description: Profit
                            title: Profit
                        config:
                          type: csv
                          url: >-
                            http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:3f6aa55e-ba95-42e3-8a07-b4baceb0812d/Sample%20demo%20dataset%20-%20Sample%20Orders.csv
                        created_at: "2023-09-01T10:26:18.017866+00:00"
                        id: 74813926-d1ec-4b38-82e1-08d1820cb029
                        last_updated_at: "2023-09-06T15:17:27.333+00:00"
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        parameters: []
                        source: file
                        title: Order data
                    description: Some description about the dashboard
                    id: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                    last_updated_at: "2023-09-07T14:51:42.626+00:00"
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parent_dashboard: null
                    thumbnail: >-
                      http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/dashboard:47b6e961-a51c-4bf3-a9d4-01f30215cc42/thumbnail.png
                    title: Sample Dashboard
                    widgets:
                      - assumptions:
                          - >-
                            1. The total sales will be calculated from the array
                            with key 74813926-d1ec-4b38-82e1-08d1820cb029 as it
                            contains the 'Sales' field.
                          - 2. The 'Sales' field is assumed to be in US dollars.
                          - >-
                            3. The 'Sales' field is assumed to be a numerical
                            value, but it will be passed through the
                            validateNumber function to ensure it is a usable
                            number.
                          - >-
                            4. The 'Sales' field values will be summed up to get
                            the total sales.
                          - >-
                            5. The total sales value will be rounded to 2
                            decimal points using the toFixed(2) method.
                          - >-
                            6. The total sales value will be returned as a
                            single data point in the datasets.data array.
                          - >-
                            7. The datasets.label will be set to 'Total Sales
                            (USD)' to indicate the unit of the metric.
                          - >-
                            8. The type of chart in config will be set to
                            'metric' as per the user's request.
                        code: |-
                          function main(data) {
                              let totalSales = 0;
                              data['74813926-d1ec-4b38-82e1-08d1820cb029'].forEach(item => {
                                  totalSales += validateNumber(item['Sales']);
                              });
                              totalSales = totalSales.toFixed(2);

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalSales],
                                          label: 'Total Sales (USD)'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 7bfddd8e-cb99-4a9d-b540-2a07f31c7aee
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me a metric showing the total amount of sales in
                          US dollars. Round the final value to 2 decimal points
                        title: Total sales
                        w: 4
                        x: 4
                        "y": 0
                      - assumptions:
                          - >-
                            1. The total customer to date is calculated by
                            counting the unique Customer IDs in the data.
                          - >-
                            2. The data for Customer IDs is assumed to be in the
                            array for key 44a3aa21-0181-46d9-a54b-af915aaec92e.
                          - >-
                            3. The function uses a Set to store unique Customer
                            IDs and then counts the size of the Set.
                          - >-
                            4. The chart type is set to 'metric' and the total
                            customer count is returned as a single data point.
                          - >-
                            5. The label for the data point is set to 'Total
                            Customers'.
                        code: |-
                          function main(data) {
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const uniqueCustomers = new Set(customerData.map(customer => customer['Customer ID']));
                              const totalCustomers = uniqueCustomers.size;

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalCustomers],
                                          label: 'Total Customers'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: d38b4048-9a60-40e7-aead-62ba8227b7da
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Create a metric showing the total customer to date
                        title: Total customers
                        w: 4
                        x: 0
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              let salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let salesPerMonth = {};

                              salesData.forEach(sale => {
                                  let date = new Date(sale['Order Date']);
                                  let year = date.getFullYear();
                                  let month = date.getMonth();

                                  if (!salesPerMonth[year]) {
                                      salesPerMonth[year] = Array(12).fill(0);
                                  }

                                  salesPerMonth[year][month] += validateNumber(sale['Sales']);
                              });

                              let datasets = [];
                              for (let year in salesPerMonth) {
                                  datasets.push({
                                      label: year,
                                      data: salesPerMonth[year],
                                      fill: false,
                                      borderColor: '#' + Math.floor(Math.random()*16777215).toString(16)
                                  });
                              }

                              return {
                                  type: 'line',
                                  data: {
                                      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                                      datasets: datasets
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Month'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Sales'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 05f28a95-7cf5-488f-ac52-736536b3594e
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Show me the sales per month as a line chart. Each line
                          should show the sales for a year.
                        title: Sales per month as a line chart
                        w: 6
                        x: 6
                        "y": 1
                      - assumptions:
                          - >-
                            1. The user wants to know the total number of orders
                            to date.
                          - >-
                            2. The 'Order ID' field from the array with key
                            '74813926-d1ec-4b38-82e1-08d1820cb029' will be used
                            to count the number of orders.
                          - >-
                            3. The 'Order Date' field will be used to filter the
                            orders up to the current date.
                          - >-
                            4. The 'Customer ID' field will be used to match the
                            data from both arrays.
                          - >-
                            5. The validateNumber function will be used to
                            ensure the 'Order ID' is a valid number before
                            counting.
                          - >-
                            6. The chart type will be set to 'metric' as per the
                            user's request.
                          - >-
                            7. The chart will display a single data point
                            representing the total number of orders to date.
                          - >-
                            8. The label for the data point will be 'Total
                            Orders'.
                        code: |-
                          function main(data) {
                              let orders = data['74813926-d1ec-4b38-82e1-08d1820cb029'];
                              let currentDate = new Date();
                              let totalOrders = 0;

                              for (let i = 0; i < orders.length; i++) {
                                  let orderDate = new Date(orders[i]['Order Date']);
                                  if (orderDate <= currentDate && validateNumber(orders[i]['Order ID'])) {
                                      totalOrders++;
                                  }
                              }

                              return {
                                  type: 'metric',
                                  data: {
                                      datasets: [{
                                          data: [totalOrders],
                                          label: 'Total Orders'
                                      }]
                                  },
                                  options: {
                                      responsive: true,
                                      maintainAspectRatio: false,
                                      scales: {
                                          xAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Orders'
                                              }
                                          }],
                                          yAxes: [{
                                              display: true,
                                              scaleLabel: {
                                                  display: true,
                                                  labelString: 'Count'
                                              }
                                          }]
                                      }
                                  }
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 1
                        id: 85ebae13-f31f-418d-9a46-b0ee9ac8fa09
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: Show me a metric for how many orders I have to date
                        title: Total orders
                        w: 4
                        x: 8
                        "y": 0
                      - assumptions: []
                        code: |-
                          function main(data) {
                              // Extract the arrays from the data object
                              const customerData = data['44a3aa21-0181-46d9-a54b-af915aaec92e'];
                              const salesData = data['74813926-d1ec-4b38-82e1-08d1820cb029'];

                              // Create a map to store the total sales volume for each state
                              const stateSales = new Map();

                              // Iterate over the sales data
                              for (let i = 0; i < salesData.length; i++) {
                                  // Find the corresponding customer data
                                  const customer = customerData.find(c => c['Customer ID'] === salesData[i]['Customer ID']);

                                  // If the customer data is found and the state is not yet in the map, add it
                                  if (customer && !stateSales.has(customer.State)) {
                                      stateSales.set(customer.State, validateNumber(salesData[i].Sales));
                                  }
                                  // If the state is already in the map, add the sales volume to the existing value
                                  else if (customer) {
                                      stateSales.set(customer.State, stateSales.get(customer.State) + validateNumber(salesData[i].Sales));
                                  }
                              }

                              // Convert the map to an array and sort it in descending order by sales volume
                              const sortedStates = Array.from(stateSales).sort((a, b) => b[1] - a[1]);

                              // Limit the data to the top 5 states
                              const topStates = sortedStates.slice(0, 5);

                              // Create the data for the chart
                              const chartData = {
                                  labels: topStates.map(s => s[0]),
                                  datasets: [{
                                      label: 'Sales Volume',
                                      data: topStates.map(s => s[1]),
                                      backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                      borderColor: 'rgba(75, 192, 192, 1)',
                                      borderWidth: 1
                                  }]
                              };

                              // Create the options for the chart
                              const chartOptions = {
                                  responsive: true,
                                  maintainAspectRatio: false,
                                  scales: {
                                      yAxes: [{
                                          ticks: {
                                              beginAtZero: true
                                          },
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'Sales Volume'
                                          }
                                      }],
                                      xAxes: [{
                                          scaleLabel: {
                                              display: true,
                                              labelString: 'State'
                                          }
                                      }]
                                  }
                              };

                              // Return the chart configuration
                              return {
                                  type: 'bar',
                                  data: chartData,
                                  options: chartOptions
                              };
                          }
                        dashboard: 47b6e961-a51c-4bf3-a9d4-01f30215cc42
                        h: 3
                        id: 5734dba1-4392-4128-8deb-058b7f6517fe
                        organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                        query: >-
                          Create a chart showing the top 5 states by sales
                          volume
                        title: Top 5 states by sales volume
                        w: 6
                        x: 0
                        "y": 1
        "401":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:31:08 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
  /api/dashboards/22d7c977-b9fb-426b-82a2-83d68f65afc8:
    delete:
      tags:
        - Dashboards
      summary: Delete dashboard by id
      description: Delete dashboard by id
      operationId: deleteDashboardById
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:33:54 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
              examples:
                Success:
                  value:
                    success: true
        "401":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:34:09 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
  /api/dashboards/d1f04fea-9ef7-4a68-a30e-a0e1d3462006:
    post:
      tags:
        - Dashboards
      summary: Update dashboard by id
      description: Update dashboard by id
      operationId: updateDashboardById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: TESTING API
            examples:
              Update dashboard by id:
                value:
                  title: TESTING API
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:37:58 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2023-09-08T06:27:01.524552+00:00"
                  description:
                    type: string
                    example: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                  id:
                    type: string
                    example: d1f04fea-9ef7-4a68-a30e-a0e1d3462006
                  last_updated_at:
                    type: string
                    example: "2023-09-08T10:37:58.032+00:00"
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  parent_dashboard:
                    nullable: true
                    example: null
                  thumbnail:
                    type: string
                    example: >-
                      https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                  title:
                    type: string
                    example: TESTING API
              examples:
                Success:
                  value:
                    created_at: "2023-09-08T06:27:01.524552+00:00"
                    description: Lorem ipsum dolor sit amet, consetetur sadipscing elitr.
                    id: d1f04fea-9ef7-4a68-a30e-a0e1d3462006
                    last_updated_at: "2023-09-08T10:37:58.032+00:00"
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parent_dashboard: null
                    thumbnail: >-
                      https://images.klipfolio.com/website/public/5a275fee-d42b-4f31-91f6-8148d4d729af/executive%20dashboard.png
                    title: TESTING API
        "401":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:38:15 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
        "404":
          description: Not found
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 10:37:09 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Dashboard does not exist
              examples:
                Not found:
                  value:
                    message: Dashboard does not exist
  /api/embed-users:
    post:
      tags:
        - Embed Users
      summary: Upsert user
      description: Upsert user
      operationId: upsertUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: helleeo@eyworld.com
                id:
                  type: string
                  example: successfull
                metadata:
                  type: object
                  properties:
                    hello:
                      type: string
                      example: world
                name:
                  type: string
                  example: TESTSTTS
            examples:
              Upsert user:
                value:
                  email: helleeo@eyworld.com
                  id: successfull
                  metadata:
                    hello: world
                  name: TESTSTTS
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 06:35:27 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_at:
                    type: string
                    example: "2023-09-05T16:27:36.470607+00:00"
                  email:
                    type: string
                    example: helleeo@eyworld.com
                  id:
                    type: string
                    example: successfull
                  last_updated_at:
                    type: string
                    example: "2023-09-05T16:27:36.470607+00:00"
                  metadata:
                    type: object
                    properties:
                      hello:
                        type: string
                        example: world
                  name:
                    type: string
                    example: TESTSTTS
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
              examples:
                Success:
                  value:
                    created_at: "2023-09-05T16:27:36.470607+00:00"
                    email: helleeo@eyworld.com
                    id: successfull
                    last_updated_at: "2023-09-05T16:27:36.470607+00:00"
                    metadata:
                      hello: world
                    name: TESTSTTS
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
        "500":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 06:36:27 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Embed token is not valid or has expired
              examples:
                Unauthorized:
                  value:
                    message: Embed token is not valid or has expired
  /api/datasources/f94f7918-9b0b-42b3-9261-37cb7c114a7f:
    get:
      tags:
        - Datasources
      summary: Get data source by id
      description: Get data source by id
      operationId: getDataSourceById
      responses:
        "200":
          description: Success
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 07:16:21 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  columns:
                    type: array
                    items:
                      type: object
                      properties:
                        description:
                          type: string
                          example: Customer ID is a unique key across tables
                        title:
                          type: string
                          example: Customer ID
                    example:
                      - description: Customer ID is a unique key across tables
                        title: Customer ID
                      - description: City
                        title: City
                      - description: Country
                        title: Country
                      - description: The segment of the customer
                        title: Segment
                      - description: State
                        title: State
                      - description: Postal Code
                        title: Postal Code
                      - description: Region
                        title: Region
                  config:
                    type: object
                    properties:
                      type:
                        type: string
                        example: csv
                      url:
                        type: string
                        example: >-
                          http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                  created_at:
                    type: string
                    example: "2023-09-01T11:39:30.716235+00:00"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        City:
                          type: string
                          example: Henderson
                        Country:
                          type: string
                          example: United States
                        Customer ID:
                          type: string
                          example: CG-12520
                        Postal Code:
                          type: string
                          example: "42420"
                        Region:
                          type: string
                          example: South
                        Segment:
                          type: string
                          example: Consumer
                        State:
                          type: string
                          example: Kentucky
                    example:
                      - City: Henderson
                        Country: United States
                        Customer ID: CG-12520
                        Postal Code: "42420"
                        Region: South
                        Segment: Consumer
                        State: Kentucky
                      - City: Los Angeles
                        Country: United States
                        Customer ID: DV-13045
                        Postal Code: "90036"
                        Region: West
                        Segment: Corporate
                        State: California
                      - City: Fort Lauderdale
                        Country: United States
                        Customer ID: SO-20335
                        Postal Code: "33311"
                        Region: South
                        Segment: Consumer
                        State: Florida
                      - City: Los Angeles
                        Country: United States
                        Customer ID: BH-11710
                        Postal Code: "90032"
                        Region: West
                        Segment: Consumer
                        State: California
                  id:
                    type: string
                    example: 44a3aa21-0181-46d9-a54b-af915aaec92e
                  last_updated_at:
                    type: string
                    example: "2023-09-01T11:40:13.644+00:00"
                  organisation:
                    type: string
                    example: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                  parameters:
                    type: array
                    items: {}
                    example: []
                  source:
                    type: string
                    example: file
                  title:
                    type: string
                    example: Customer data
              examples:
                Success:
                  value:
                    columns:
                      - description: Customer ID is a unique key across tables
                        title: Customer ID
                      - description: City
                        title: City
                      - description: Country
                        title: Country
                      - description: The segment of the customer
                        title: Segment
                      - description: State
                        title: State
                      - description: Postal Code
                        title: Postal Code
                      - description: Region
                        title: Region
                    config:
                      type: csv
                      url: >-
                        http://localhost:54321/storage/v1/object/public/data-sources/31a05cfd-1275-4c76-8390-20b328a3c4bf/datasource:44a3aa21-0181-46d9-a54b-af915aaec92e/Sample%20Customers.csv
                    created_at: "2023-09-01T11:39:30.716235+00:00"
                    data:
                      - City: Henderson
                        Country: United States
                        Customer ID: CG-12520
                        Postal Code: "42420"
                        Region: South
                        Segment: Consumer
                        State: Kentucky
                      - City: Los Angeles
                        Country: United States
                        Customer ID: DV-13045
                        Postal Code: "90036"
                        Region: West
                        Segment: Corporate
                        State: California
                      - City: Fort Lauderdale
                        Country: United States
                        Customer ID: SO-20335
                        Postal Code: "33311"
                        Region: South
                        Segment: Consumer
                        State: Florida
                      - City: Los Angeles
                        Country: United States
                        Customer ID: BH-11710
                        Postal Code: "90032"
                        Region: West
                        Segment: Consumer
                        State: California
                      - City: Concord
                        Country: United States
                        Customer ID: AA-10480
                        Postal Code: "28027"
                        Region: South
                        Segment: Consumer
                        State: North Carolina
                      - City: Seattle
                        Country: United States
                        Customer ID: IM-15070
                        Postal Code: "98103"
                        Region: West
                        Segment: Consumer
                        State: Washington
                      - City: Fort Worth
                        Country: United States
                        Customer ID: HP-14815
                        Postal Code: "76106"
                        Region: Central
                        Segment: Home Office
                        State: Texas
                      - City: Madison
                        Country: United States
                        Customer ID: PK-19075
                        Postal Code: "53711"
                        Region: Central
                        Segment: Consumer
                        State: Wisconsin
                      - City: West Jordan
                        Country: United States
                        Customer ID: AG-10270
                        Postal Code: "84084"
                        Region: West
                        Segment: Consumer
                        State: Utah
                      - City: San Francisco
                        Country: United States
                        Customer ID: ZD-21925
                        Postal Code: "94109"
                        Region: West
                        Segment: Consumer
                        State: California
                      - City: Fremont
                        Country: United States
                        Customer ID: KB-16585
                        Postal Code: "68025"
                        Region: Central
                        Segment: Corporate
                        State: Nebraska
                      - City: Philadelphia
                        Country: United States
                        Customer ID: SF-20065
                        Postal Code: "19140"
                        Region: East
                        Segment: Consumer
                        State: Pennsylvania
                    id: 44a3aa21-0181-46d9-a54b-af915aaec92e
                    last_updated_at: "2023-09-01T11:40:13.644+00:00"
                    organisation: 31a05cfd-1275-4c76-8390-20b328a3c4bf
                    parameters: []
                    source: file
                    title: Customer data
        "404":
          description: Not found
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 07:10:59 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Datasource doesn't exist
              examples:
                Not found:
                  value:
                    message: Datasource doesn't exist
        "500":
          description: Unauthorized
          headers:
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: gzip
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
            Vary:
              schema:
                type: string
                example: >-
                  RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Url,
                  Accept-Encoding
            date:
              schema:
                type: string
                example: Fri, 08 Sep 2023 07:14:53 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No authentication methods found
              examples:
                Unauthorized:
                  value:
                    message: No authentication methods found
  /api/accounts:
    get:
      tags:
        - Accounts
      summary: Get all accounts
      description: Get all accounts
      operationId: getAllAccounts
      responses:
        "200":
          description: ""
components:
  securitySchemes:
    apiKey:
      type: apiKey
      name: x-api-key
      in: header
    bearerAuth:
      type: http
      scheme: bearer
security:
  - apiKey: []
tags:
  - name: Automations
  - name: Teams
    description: >-
      Teams are used to manage a collection of users. They are the parent for
      dashboards, reports, datasources, organisation users, integrations and API
      keys.
  - name: Dashboards
    description: >-
      Dashboards allow you to connect multiple datasources to multiple widgets.
      Once created, a dashboard can be embedded in your platform by creating a
      session. Also, you can ask your dashboard questions once you have setup a
      datasource.
  - name: Widgets
    description: >-
      Widgets are the individual components inside a dashboard. They contain the
      code needed to render a chart.
  - name: Questions
  - name: Sessions
  - name: Embed Users
    description: >-
      These are your companies users, the ones who would be interacting with the
      dashboards and reports once embedded on your product
  - name: Datasources
    description: >-
      A datasource allows you to connect data from files, Rest APIs, databases
      and cloud SaaS providers to your reports and dashboards. None of the data
      from the data sources is stored on our platform (except for file uploads)
  - name: Accounts
  - name: API keys
